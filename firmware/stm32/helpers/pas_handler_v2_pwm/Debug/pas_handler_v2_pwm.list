
pas_handler_v2_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be4  08004be4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bec  08004bec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000005c  08004c50  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004c50  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbed  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d0a  00000000  00000000  0002ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a1  00000000  00000000  0002f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016acf  00000000  00000000  0002ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9bf  00000000  00000000  00046a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7d2  00000000  00000000  0005444f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039d8  00000000  00000000  000e1c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e55fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ae0 	.word	0x08004ae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004ae0 	.word	0x08004ae0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <calculateDutyCycle>:
#include "algorithm.h"
#include "helpers.h"
#include "stm32f4xx_hal.h"

// (-0.00000044 * (x*x*x*x*x)) - (0.000049 * (x*x*x*x)) + (0.00164 * (x*x*x)) +( 0.0169 * (x*x)) + (1.1815 * x) + 18.912;
void calculateDutyCycle(float x) {
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	ed87 0a01 	vstr	s0, [r7, #4]
	float rawDutyCycle = ALGORITHM_EQ_FACTOR * ((-0.00000044 * (x * x * x * x * x))
 8000e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e16:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e32:	ee17 0a90 	vmov	r0, s15
 8000e36:	f7ff fb8f 	bl	8000558 <__aeabi_f2d>
 8000e3a:	a39d      	add	r3, pc, #628	; (adr r3, 80010b0 <calculateDutyCycle+0x2a8>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff fbe2 	bl	8000608 <__aeabi_dmul>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4614      	mov	r4, r2
 8000e4a:	461d      	mov	r5, r3
			- (0.000049 * (x * x * x * x)) + (0.00164 * (x * x * x))
 8000e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e50:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e54:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e64:	ee17 0a90 	vmov	r0, s15
 8000e68:	f7ff fb76 	bl	8000558 <__aeabi_f2d>
 8000e6c:	a392      	add	r3, pc, #584	; (adr r3, 80010b8 <calculateDutyCycle+0x2b0>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	f7ff fbc9 	bl	8000608 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	f7ff fa0b 	bl	8000298 <__aeabi_dsub>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4614      	mov	r4, r2
 8000e88:	461d      	mov	r5, r3
 8000e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e8e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e9a:	ee17 0a90 	vmov	r0, s15
 8000e9e:	f7ff fb5b 	bl	8000558 <__aeabi_f2d>
 8000ea2:	a387      	add	r3, pc, #540	; (adr r3, 80010c0 <calculateDutyCycle+0x2b8>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fbae 	bl	8000608 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	f7ff f9f2 	bl	800029c <__adddf3>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4614      	mov	r4, r2
 8000ebe:	461d      	mov	r5, r3
			+ (0.0169 * (x * x)) + (1.1815 * x) + 18.912 + ALGORITHM_EQ_COMPONENT); // DUTY_EQ_COMPONENT to spin a bit FASTER than pedals
 8000ec0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec8:	ee17 0a90 	vmov	r0, s15
 8000ecc:	f7ff fb44 	bl	8000558 <__aeabi_f2d>
 8000ed0:	a37d      	add	r3, pc, #500	; (adr r3, 80010c8 <calculateDutyCycle+0x2c0>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff fb97 	bl	8000608 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4620      	mov	r0, r4
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	f7ff f9db 	bl	800029c <__adddf3>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4614      	mov	r4, r2
 8000eec:	461d      	mov	r5, r3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fb32 	bl	8000558 <__aeabi_f2d>
 8000ef4:	a376      	add	r3, pc, #472	; (adr r3, 80010d0 <calculateDutyCycle+0x2c8>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff fb85 	bl	8000608 <__aeabi_dmul>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4620      	mov	r0, r4
 8000f04:	4629      	mov	r1, r5
 8000f06:	f7ff f9c9 	bl	800029c <__adddf3>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	a371      	add	r3, pc, #452	; (adr r3, 80010d8 <calculateDutyCycle+0x2d0>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff f9c0 	bl	800029c <__adddf3>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b5b      	ldr	r3, [pc, #364]	; (8001098 <calculateDutyCycle+0x290>)
 8000f2a:	f7ff f9b7 	bl	800029c <__adddf3>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
	float rawDutyCycle = ALGORITHM_EQ_FACTOR * ((-0.00000044 * (x * x * x * x * x))
 8000f36:	a34e      	add	r3, pc, #312	; (adr r3, 8001070 <calculateDutyCycle+0x268>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb64 	bl	8000608 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fd90 	bl	8000a6c <__aeabi_d2f>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60fb      	str	r3, [r7, #12]
	if (rawDutyCycle <= MIN_DUTY_CYCLE) {
 8000f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f54:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d804      	bhi.n	8000f6c <calculateDutyCycle+0x164>
		targetDutyCycle = 0;
 8000f62:	4b4e      	ldr	r3, [pc, #312]	; (800109c <calculateDutyCycle+0x294>)
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e078      	b.n	800105e <calculateDutyCycle+0x256>
	} else if (rawDutyCycle > WARN_DUTY_CYCLE) {
 8000f6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f70:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80010a0 <calculateDutyCycle+0x298>
 8000f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	dd04      	ble.n	8000f88 <calculateDutyCycle+0x180>
		targetDutyCycle = 0;
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <calculateDutyCycle+0x294>)
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e06a      	b.n	800105e <calculateDutyCycle+0x256>
	} else if (rawDutyCycle > MAX_DUTY_CYCLE && rawDutyCycle < WARN_DUTY_CYCLE) {
 8000f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f8c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80010a4 <calculateDutyCycle+0x29c>
 8000f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	dd0c      	ble.n	8000fb4 <calculateDutyCycle+0x1ac>
 8000f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f9e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80010a0 <calculateDutyCycle+0x298>
 8000fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	d503      	bpl.n	8000fb4 <calculateDutyCycle+0x1ac>
		targetDutyCycle = MAX_DUTY_CYCLE;
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <calculateDutyCycle+0x294>)
 8000fae:	4a3e      	ldr	r2, [pc, #248]	; (80010a8 <calculateDutyCycle+0x2a0>)
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e054      	b.n	800105e <calculateDutyCycle+0x256>
	} else {
		if (rawDutyCycle > previousDutyCycle) {								// speeding up
 8000fb4:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <calculateDutyCycle+0x2a4>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc6:	dd25      	ble.n	8001014 <calculateDutyCycle+0x20c>
			targetDutyCycle = (DUTY_SMOOTH_FACTOR_UP * rawDutyCycle)
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f7ff fac5 	bl	8000558 <__aeabi_f2d>
 8000fce:	a32a      	add	r3, pc, #168	; (adr r3, 8001078 <calculateDutyCycle+0x270>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff fb18 	bl	8000608 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4614      	mov	r4, r2
 8000fde:	461d      	mov	r5, r3
					+ ((1 - DUTY_SMOOTH_FACTOR_UP) * previousDutyCycle);
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <calculateDutyCycle+0x2a4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fab7 	bl	8000558 <__aeabi_f2d>
 8000fea:	a325      	add	r3, pc, #148	; (adr r3, 8001080 <calculateDutyCycle+0x278>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fb0a 	bl	8000608 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff f94e 	bl	800029c <__adddf3>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fd30 	bl	8000a6c <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
			targetDutyCycle = (DUTY_SMOOTH_FACTOR_UP * rawDutyCycle)
 800100e:	4a23      	ldr	r2, [pc, #140]	; (800109c <calculateDutyCycle+0x294>)
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e024      	b.n	800105e <calculateDutyCycle+0x256>
		} else {															// slowing down
			targetDutyCycle = (DUTY_SMOOTH_FACTOR_DOWN * rawDutyCycle)
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fa9f 	bl	8000558 <__aeabi_f2d>
 800101a:	a31b      	add	r3, pc, #108	; (adr r3, 8001088 <calculateDutyCycle+0x280>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff faf2 	bl	8000608 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4614      	mov	r4, r2
 800102a:	461d      	mov	r5, r3
					+ ((1 - DUTY_SMOOTH_FACTOR_DOWN) * previousDutyCycle);
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <calculateDutyCycle+0x2a4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa91 	bl	8000558 <__aeabi_f2d>
 8001036:	a316      	add	r3, pc, #88	; (adr r3, 8001090 <calculateDutyCycle+0x288>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fae4 	bl	8000608 <__aeabi_dmul>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff f928 	bl	800029c <__adddf3>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fd0a 	bl	8000a6c <__aeabi_d2f>
 8001058:	4603      	mov	r3, r0
			targetDutyCycle = (DUTY_SMOOTH_FACTOR_DOWN * rawDutyCycle)
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <calculateDutyCycle+0x294>)
 800105c:	6013      	str	r3, [r2, #0]
		}
	}
	previousDutyCycle = targetDutyCycle;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <calculateDutyCycle+0x294>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <calculateDutyCycle+0x2a4>)
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	9999999a 	.word	0x9999999a
 8001074:	3ff19999 	.word	0x3ff19999
 8001078:	9999999a 	.word	0x9999999a
 800107c:	3fd99999 	.word	0x3fd99999
 8001080:	33333333 	.word	0x33333333
 8001084:	3fe33333 	.word	0x3fe33333
 8001088:	9999999a 	.word	0x9999999a
 800108c:	3fe99999 	.word	0x3fe99999
 8001090:	99999998 	.word	0x99999998
 8001094:	3fc99999 	.word	0x3fc99999
 8001098:	40040000 	.word	0x40040000
 800109c:	20000090 	.word	0x20000090
 80010a0:	42a00000 	.word	0x42a00000
 80010a4:	42840000 	.word	0x42840000
 80010a8:	42840000 	.word	0x42840000
 80010ac:	20000094 	.word	0x20000094
 80010b0:	7702c0d0 	.word	0x7702c0d0
 80010b4:	be9d8724 	.word	0xbe9d8724
 80010b8:	2e1693c0 	.word	0x2e1693c0
 80010bc:	3f09b0ab 	.word	0x3f09b0ab
 80010c0:	97635e74 	.word	0x97635e74
 80010c4:	3f5adea8 	.word	0x3f5adea8
 80010c8:	cd35a858 	.word	0xcd35a858
 80010cc:	3f914e3b 	.word	0x3f914e3b
 80010d0:	8b439581 	.word	0x8b439581
 80010d4:	3ff2e76c 	.word	0x3ff2e76c
 80010d8:	d4fdf3b6 	.word	0xd4fdf3b6
 80010dc:	4032e978 	.word	0x4032e978

080010e0 <runAlgorithm>:

bool runAlgorithm(float timeS) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a01 	vstr	s0, [r7, #4]

	if(!checkSwitches()) return false;
 80010ea:	f000 fa5f 	bl	80015ac <checkSwitches>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <runAlgorithm+0x1e>
 80010fa:	2300      	movs	r3, #0
 80010fc:	e07b      	b.n	80011f6 <runAlgorithm+0x116>

	if (pasCounter >= 1) {
 80010fe:	4b44      	ldr	r3, [pc, #272]	; (8001210 <runAlgorithm+0x130>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d060      	beq.n	80011c8 <runAlgorithm+0xe8>

//	 	If bike is stationary, wait for 5 PAS counts before updating
		if (vWheel == 0.0 && pasCounter < 5) {
 8001106:	4b43      	ldr	r3, [pc, #268]	; (8001214 <runAlgorithm+0x134>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d10f      	bne.n	8001136 <runAlgorithm+0x56>
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <runAlgorithm+0x130>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d80b      	bhi.n	8001136 <runAlgorithm+0x56>
			if (pasCounter < 4)
 800111e:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <runAlgorithm+0x130>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d805      	bhi.n	8001132 <runAlgorithm+0x52>
				lastPasResetTick = HAL_GetTick();
 8001126:	f000 fe49 	bl	8001dbc <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <runAlgorithm+0x138>)
 8001130:	601a      	str	r2, [r3, #0]
			return false;
 8001132:	2300      	movs	r3, #0
 8001134:	e05f      	b.n	80011f6 <runAlgorithm+0x116>
		}

		logDebugDegrees(timeS);  // 30 stopni!
 8001136:	ed97 0a01 	vldr	s0, [r7, #4]
 800113a:	f000 f8eb 	bl	8001314 <logDebugDegrees>

		omegaPedals = PAS_MAGNET_ANGLE / timeS;
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fa0a 	bl	8000558 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	a12d      	add	r1, pc, #180	; (adr r1, 8001200 <runAlgorithm+0x120>)
 800114a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800114e:	f7ff fb85 	bl	800085c <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fc87 	bl	8000a6c <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a2e      	ldr	r2, [pc, #184]	; (800121c <runAlgorithm+0x13c>)
 8001162:	6013      	str	r3, [r2, #0]
		omegaWheel = omegaPedals * PEDAL_GEAR_RATIO;
 8001164:	4b2d      	ldr	r3, [pc, #180]	; (800121c <runAlgorithm+0x13c>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	eeb0 7a07 	vmov.f32	s14, #7	; 0x40380000  2.875
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <runAlgorithm+0x140>)
 8001174:	edc3 7a00 	vstr	s15, [r3]

		vWheel = omegaWheel * R_WHEEL;
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <runAlgorithm+0x140>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <runAlgorithm+0x134>)
 8001188:	edc3 7a00 	vstr	s15, [r3]
		logDebugVWheel();
 800118c:	f000 f8dc 	bl	8001348 <logDebugVWheel>

		// Duty cycle calc
		calculateDutyCycle(vWheel * 3.6);
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <runAlgorithm+0x134>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9df 	bl	8000558 <__aeabi_f2d>
 800119a:	a31b      	add	r3, pc, #108	; (adr r3, 8001208 <runAlgorithm+0x128>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa32 	bl	8000608 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fc5e 	bl	8000a6c <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	ee00 3a10 	vmov	s0, r3
 80011b6:	f7ff fe27 	bl	8000e08 <calculateDutyCycle>
		updateDutyCycle();
 80011ba:	f000 f92d 	bl	8001418 <updateDutyCycle>
		logDebugDutyCycle();
 80011be:	f000 f8fb 	bl	80013b8 <logDebugDutyCycle>

		resetPas(0);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f950 	bl	8001468 <resetPas>
	}
	if (timeS > 0.75 && pasActive) {
 80011c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011cc:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	dd0c      	ble.n	80011f4 <runAlgorithm+0x114>
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <runAlgorithm+0x144>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	d004      	beq.n	80011f4 <runAlgorithm+0x114>
		logDebugInactive();
 80011ea:	f000 f90b 	bl	8001404 <logDebugInactive>
		resetPas(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 f93a 	bl	8001468 <resetPas>
	}
	return true;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	fdb20051 	.word	0xfdb20051
 8001204:	3fe0c151 	.word	0x3fe0c151
 8001208:	cccccccd 	.word	0xcccccccd
 800120c:	400ccccc 	.word	0x400ccccc
 8001210:	20000078 	.word	0x20000078
 8001214:	20000088 	.word	0x20000088
 8001218:	2000007c 	.word	0x2000007c
 800121c:	20000080 	.word	0x20000080
 8001220:	20000084 	.word	0x20000084
 8001224:	2000008c 	.word	0x2000008c

08001228 <init>:
float targetDutyCycle = 0.0;				// PWM duty cycle

// TODO proper .h/macro!!!
float previousDutyCycle = 0.0;  // Przechowuje poprzednią wartość duty cycle

void init() {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	lastPasResetTick = HAL_GetTick();
 800122c:	f000 fdc6 	bl	8001dbc <HAL_GetTick>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <init+0x3c>)
 8001236:	601a      	str	r2, [r3, #0]

	TIM1->CCR1 = targetDutyCycle;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <init+0x40>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <init+0x44>)
 8001240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001244:	ee17 2a90 	vmov	r2, s15
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800124a:	2100      	movs	r1, #0
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <init+0x48>)
 800124e:	f001 fdc5 	bl	8002ddc <HAL_TIM_PWM_Start>

	startupAnim();
 8001252:	f000 f945 	bl	80014e0 <startupAnim>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2108      	movs	r1, #8
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <init+0x4c>)
 800125c:	f001 f88c 	bl	8002378 <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000007c 	.word	0x2000007c
 8001268:	20000090 	.word	0x20000090
 800126c:	40010000 	.word	0x40010000
 8001270:	20000098 	.word	0x20000098
 8001274:	40020400 	.word	0x40020400

08001278 <send_string>:

void send_string(char *s) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), 1000);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7fe ffad 	bl	80001e0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <send_string+0x28>)
 8001292:	f002 fbc5 	bl	8003a20 <HAL_UART_Transmit>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000e0 	.word	0x200000e0

080012a4 <send_float>:
	char buffer[12];
	sprintf(buffer, "%d", num);
	send_string(buffer);
}

void send_float(float num) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
	int whole_part = (int) num; // Część całkowita
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b6:	ee17 3a90 	vmov	r3, s15
 80012ba:	623b      	str	r3, [r7, #32]
	int fractional_part = (int) ((num - whole_part) * 100); // Część ułamkowa do 2 miejsc po przecinku
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80012ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800130c <send_float+0x68>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	627b      	str	r3, [r7, #36]	; 0x24

	if (fractional_part < 0) {
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da02      	bge.n	80012ec <send_float+0x48>
		fractional_part = -fractional_part; // Dla ujemnych wartości
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	425b      	negs	r3, r3
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	char buffer[20];
	sprintf(buffer, "%d.%02d", whole_part, fractional_part); // Formatowanie na część całkowitą i ułamkową
 80012ec:	f107 000c 	add.w	r0, r7, #12
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	6a3a      	ldr	r2, [r7, #32]
 80012f4:	4906      	ldr	r1, [pc, #24]	; (8001310 <send_float+0x6c>)
 80012f6:	f002 ff4f 	bl	8004198 <siprintf>
	send_string(buffer); // Wywołanie send_string
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffba 	bl	8001278 <send_string>
}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	42c80000 	.word	0x42c80000
 8001310:	08004b00 	.word	0x08004b00

08001314 <logDebugDegrees>:

void logDebugDegrees(float timeS) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
	send_string("[DEBUG]: 30 stopni!\r\nczas: ");
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <logDebugDegrees+0x28>)
 8001320:	f7ff ffaa 	bl	8001278 <send_string>

	send_float(timeS);
 8001324:	ed97 0a01 	vldr	s0, [r7, #4]
 8001328:	f7ff ffbc 	bl	80012a4 <send_float>
	send_string("sekund\r\n");
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <logDebugDegrees+0x2c>)
 800132e:	f7ff ffa3 	bl	8001278 <send_string>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08004b08 	.word	0x08004b08
 8001340:	08004b24 	.word	0x08004b24
 8001344:	00000000 	.word	0x00000000

08001348 <logDebugVWheel>:

void logDebugVWheel() {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	send_string("vWheel: ");
 800134c:	4816      	ldr	r0, [pc, #88]	; (80013a8 <logDebugVWheel+0x60>)
 800134e:	f7ff ff93 	bl	8001278 <send_string>
	send_float(vWheel);
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <logDebugVWheel+0x64>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f7ff ffa2 	bl	80012a4 <send_float>
	send_string(" [m/s] ");
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <logDebugVWheel+0x68>)
 8001362:	f7ff ff89 	bl	8001278 <send_string>
	send_float(vWheel * 3.6);
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <logDebugVWheel+0x64>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8f4 	bl	8000558 <__aeabi_f2d>
 8001370:	a30b      	add	r3, pc, #44	; (adr r3, 80013a0 <logDebugVWheel+0x58>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f947 	bl	8000608 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fb73 	bl	8000a6c <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	ee00 3a10 	vmov	s0, r3
 800138c:	f7ff ff8a 	bl	80012a4 <send_float>
	send_string(" [km/h] \r\n");
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <logDebugVWheel+0x6c>)
 8001392:	f7ff ff71 	bl	8001278 <send_string>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	cccccccd 	.word	0xcccccccd
 80013a4:	400ccccc 	.word	0x400ccccc
 80013a8:	08004b30 	.word	0x08004b30
 80013ac:	20000088 	.word	0x20000088
 80013b0:	08004b3c 	.word	0x08004b3c
 80013b4:	08004b44 	.word	0x08004b44

080013b8 <logDebugDutyCycle>:

void logDebugDutyCycle() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	send_string("dutyCycle: ");
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <logDebugDutyCycle+0x3c>)
 80013be:	f7ff ff5b 	bl	8001278 <send_string>
	send_float(targetDutyCycle);
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <logDebugDutyCycle+0x40>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	f7ff ff6a 	bl	80012a4 <send_float>
	send_string(" [%] \r\n");
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <logDebugDutyCycle+0x44>)
 80013d2:	f7ff ff51 	bl	8001278 <send_string>
	send_string("targetDutyCycle: ");
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <logDebugDutyCycle+0x48>)
 80013d8:	f7ff ff4e 	bl	8001278 <send_string>
	send_float(targetDutyCycle);
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <logDebugDutyCycle+0x40>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb0 0a67 	vmov.f32	s0, s15
 80013e6:	f7ff ff5d 	bl	80012a4 <send_float>
	send_string(" [%] \r\n");
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <logDebugDutyCycle+0x44>)
 80013ec:	f7ff ff44 	bl	8001278 <send_string>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08004b50 	.word	0x08004b50
 80013f8:	20000090 	.word	0x20000090
 80013fc:	08004b5c 	.word	0x08004b5c
 8001400:	08004b64 	.word	0x08004b64

08001404 <logDebugInactive>:

void logDebugInactive() {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	send_string("[DEBUG]: ---- INACTIVE ----\r\n");
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <logDebugInactive+0x10>)
 800140a:	f7ff ff35 	bl	8001278 <send_string>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	08004b78 	.word	0x08004b78

08001418 <updateDutyCycle>:

void updateDutyCycle(void) {
 8001418:	b598      	push	{r3, r4, r7, lr}
 800141a:	af00      	add	r7, sp, #0

	TIM1->CCR1 = (targetDutyCycle / 100.0) * DUTY_PWM_MAX_CCR1;
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <updateDutyCycle+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f899 	bl	8000558 <__aeabi_f2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <updateDutyCycle+0x44>)
 800142c:	f7ff fa16 	bl	800085c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <updateDutyCycle+0x48>)
 800143e:	f7ff f8e3 	bl	8000608 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4c07      	ldr	r4, [pc, #28]	; (8001464 <updateDutyCycle+0x4c>)
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff faee 	bl	8000a2c <__aeabi_d2uiz>
 8001450:	4603      	mov	r3, r0
 8001452:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001454:	bf00      	nop
 8001456:	bd98      	pop	{r3, r4, r7, pc}
 8001458:	20000090 	.word	0x20000090
 800145c:	40590000 	.word	0x40590000
 8001460:	408f4000 	.word	0x408f4000
 8001464:	40010000 	.word	0x40010000

08001468 <resetPas>:

void resetPas(bool inactive) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	lastPasResetTick = HAL_GetTick();
 8001472:	f000 fca3 	bl	8001dbc <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <resetPas+0x5c>)
 800147c:	601a      	str	r2, [r3, #0]

	if (inactive) {
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <resetPas+0x44>
		pasActive = 0;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <resetPas+0x60>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
		targetDutyCycle = 0.0;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <resetPas+0x64>)
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		previousDutyCycle = 0.0;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <resetPas+0x68>)
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
		vWheel = 0.0;  // Reset vWheel only if the bike is inactive!
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <resetPas+0x6c>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
		TIM1->CCR1 = 0;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <resetPas+0x70>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		pasActive = 1;
		pasCounter = 0;
	}
}
 80014aa:	e006      	b.n	80014ba <resetPas+0x52>
		pasActive = 1;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <resetPas+0x60>)
 80014ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014b2:	601a      	str	r2, [r3, #0]
		pasCounter = 0;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <resetPas+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000007c 	.word	0x2000007c
 80014c8:	2000008c 	.word	0x2000008c
 80014cc:	20000090 	.word	0x20000090
 80014d0:	20000094 	.word	0x20000094
 80014d4:	20000088 	.word	0x20000088
 80014d8:	40010000 	.word	0x40010000
 80014dc:	20000078 	.word	0x20000078

080014e0 <startupAnim>:

void startupAnim() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 20; i++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	e014      	b.n	8001516 <startupAnim+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f2:	482d      	ldr	r0, [pc, #180]	; (80015a8 <startupAnim+0xc8>)
 80014f4:	f000 ff40 	bl	8002378 <HAL_GPIO_WritePin>
		HAL_Delay(15);
 80014f8:	200f      	movs	r0, #15
 80014fa:	f000 fc6b 	bl	8001dd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001504:	4828      	ldr	r0, [pc, #160]	; (80015a8 <startupAnim+0xc8>)
 8001506:	f000 ff37 	bl	8002378 <HAL_GPIO_WritePin>
		HAL_Delay(15);
 800150a:	200f      	movs	r0, #15
 800150c:	f000 fc62 	bl	8001dd4 <HAL_Delay>
	for (uint8_t i = 0; i < 20; i++) {
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	3301      	adds	r3, #1
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b13      	cmp	r3, #19
 800151a:	d9e7      	bls.n	80014ec <startupAnim+0xc>
	}
	HAL_Delay(200);
 800151c:	20c8      	movs	r0, #200	; 0xc8
 800151e:	f000 fc59 	bl	8001dd4 <HAL_Delay>

	for (uint8_t i = 0; i < 4; i++) {
 8001522:	2300      	movs	r3, #0
 8001524:	71bb      	strb	r3, [r7, #6]
 8001526:	e014      	b.n	8001552 <startupAnim+0x72>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800152e:	481e      	ldr	r0, [pc, #120]	; (80015a8 <startupAnim+0xc8>)
 8001530:	f000 ff22 	bl	8002378 <HAL_GPIO_WritePin>
		HAL_Delay(75);
 8001534:	204b      	movs	r0, #75	; 0x4b
 8001536:	f000 fc4d 	bl	8001dd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001540:	4819      	ldr	r0, [pc, #100]	; (80015a8 <startupAnim+0xc8>)
 8001542:	f000 ff19 	bl	8002378 <HAL_GPIO_WritePin>
		HAL_Delay(75);
 8001546:	204b      	movs	r0, #75	; 0x4b
 8001548:	f000 fc44 	bl	8001dd4 <HAL_Delay>
	for (uint8_t i = 0; i < 4; i++) {
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	3301      	adds	r3, #1
 8001550:	71bb      	strb	r3, [r7, #6]
 8001552:	79bb      	ldrb	r3, [r7, #6]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d9e7      	bls.n	8001528 <startupAnim+0x48>
	}

	HAL_Delay(200);
 8001558:	20c8      	movs	r0, #200	; 0xc8
 800155a:	f000 fc3b 	bl	8001dd4 <HAL_Delay>

	for (uint8_t i = 0; i < 1; i++) {
 800155e:	2300      	movs	r3, #0
 8001560:	717b      	strb	r3, [r7, #5]
 8001562:	e014      	b.n	800158e <startupAnim+0xae>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156a:	480f      	ldr	r0, [pc, #60]	; (80015a8 <startupAnim+0xc8>)
 800156c:	f000 ff04 	bl	8002378 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001570:	20c8      	movs	r0, #200	; 0xc8
 8001572:	f000 fc2f 	bl	8001dd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <startupAnim+0xc8>)
 800157e:	f000 fefb 	bl	8002378 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001582:	20c8      	movs	r0, #200	; 0xc8
 8001584:	f000 fc26 	bl	8001dd4 <HAL_Delay>
	for (uint8_t i = 0; i < 1; i++) {
 8001588:	797b      	ldrb	r3, [r7, #5]
 800158a:	3301      	adds	r3, #1
 800158c:	717b      	strb	r3, [r7, #5]
 800158e:	797b      	ldrb	r3, [r7, #5]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0e7      	beq.n	8001564 <startupAnim+0x84>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <startupAnim+0xc8>)
 800159c:	f000 feec 	bl	8002378 <HAL_GPIO_WritePin>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020800 	.word	0x40020800

080015ac <checkSwitches>:

bool checkSwitches() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1) {
 80015b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <checkSwitches+0x34>)
 80015b6:	f000 fec7 	bl	8002348 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <checkSwitches+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2108      	movs	r1, #8
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <checkSwitches+0x34>)
 80015c6:	f000 fed7 	bl	8002378 <HAL_GPIO_WritePin>
		return 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e005      	b.n	80015da <checkSwitches+0x2e>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2108      	movs	r1, #8
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <checkSwitches+0x34>)
 80015d4:	f000 fed0 	bl	8002378 <HAL_GPIO_WritePin>
		return 1;
 80015d8:	2301      	movs	r3, #1
	}
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40020400 	.word	0x40020400

080015e4 <HAL_GPIO_EXTI_Callback>:

/* Global variables ----------------------------------------------------------*/
TIM_HandleTypeDef htim1;
UART_HandleTypeDef huart1;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5)
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d105      	bne.n	8001600 <HAL_GPIO_EXTI_Callback+0x1c>
		pasCounter++;
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_GPIO_EXTI_Callback+0x28>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_GPIO_EXTI_Callback+0x28>)
 80015fe:	701a      	strb	r2, [r3, #0]

}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000078 	.word	0x20000078

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001616:	f000 fb6b 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161a:	f000 f835 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161e:	f000 f967 	bl	80018f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001622:	f000 f93b 	bl	800189c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001626:	f000 f899 	bl	800175c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	init();
 800162a:	f7ff fdfd 	bl	8001228 <init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		float timeS = ((float) HAL_GetTick() - (float) lastPasResetTick) / 1000.0;
 800162e:	f000 fbc5 	bl	8001dbc <HAL_GetTick>
 8001632:	ee07 0a90 	vmov	s15, r0
 8001636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <main+0x70>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164a:	ee17 0a90 	vmov	r0, s15
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <main+0x74>)
 8001658:	f7ff f900 	bl	800085c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fa02 	bl	8000a6c <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	607b      	str	r3, [r7, #4]

		if (!runAlgorithm(timeS))
 800166c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001670:	f7ff fd36 	bl	80010e0 <runAlgorithm>
 8001674:	4603      	mov	r3, r0
 8001676:	f083 0301 	eor.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
	while (1) {
 800167e:	e7d6      	b.n	800162e <main+0x1e>
 8001680:	2000007c 	.word	0x2000007c
 8001684:	408f4000 	.word	0x408f4000

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	; 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fd9e 	bl	80041d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <SystemClock_Config+0xcc>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <SystemClock_Config+0xd0>)
 80016d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <SystemClock_Config+0xd0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f0:	2310      	movs	r3, #16
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016fc:	2308      	movs	r3, #8
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001700:	2348      	movs	r3, #72	; 0x48
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fe63 	bl	80023dc <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800171c:	f000 f972 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2102      	movs	r1, #2
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f8c5 	bl	80028cc <HAL_RCC_ClockConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001748:	f000 f95c 	bl	8001a04 <Error_Handler>
  }
}
 800174c:	bf00      	nop
 800174e:	3750      	adds	r7, #80	; 0x50
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000

0800175c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b096      	sub	sp, #88	; 0x58
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2220      	movs	r2, #32
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fd1f 	bl	80041d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <MX_TIM1_Init+0x138>)
 800179c:	4a3e      	ldr	r2, [pc, #248]	; (8001898 <MX_TIM1_Init+0x13c>)
 800179e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80017a0:	4b3c      	ldr	r3, [pc, #240]	; (8001894 <MX_TIM1_Init+0x138>)
 80017a2:	2247      	movs	r2, #71	; 0x47
 80017a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <MX_TIM1_Init+0x138>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <MX_TIM1_Init+0x138>)
 80017ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b37      	ldr	r3, [pc, #220]	; (8001894 <MX_TIM1_Init+0x138>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <MX_TIM1_Init+0x138>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b34      	ldr	r3, [pc, #208]	; (8001894 <MX_TIM1_Init+0x138>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c6:	4833      	ldr	r0, [pc, #204]	; (8001894 <MX_TIM1_Init+0x138>)
 80017c8:	f001 fa60 	bl	8002c8c <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017d2:	f000 f917 	bl	8001a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e0:	4619      	mov	r1, r3
 80017e2:	482c      	ldr	r0, [pc, #176]	; (8001894 <MX_TIM1_Init+0x138>)
 80017e4:	f001 fc6c 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017ee:	f000 f909 	bl	8001a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017f2:	4828      	ldr	r0, [pc, #160]	; (8001894 <MX_TIM1_Init+0x138>)
 80017f4:	f001 fa99 	bl	8002d2a <HAL_TIM_PWM_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017fe:	f000 f901 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800180a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800180e:	4619      	mov	r1, r3
 8001810:	4820      	ldr	r0, [pc, #128]	; (8001894 <MX_TIM1_Init+0x138>)
 8001812:	f001 fff5 	bl	8003800 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800181c:	f000 f8f2 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001820:	2360      	movs	r3, #96	; 0x60
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <MX_TIM1_Init+0x138>)
 8001846:	f001 fb79 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001850:	f000 f8d8 	bl	8001a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <MX_TIM1_Init+0x138>)
 8001878:	f002 f830 	bl	80038dc <HAL_TIMEx_ConfigBreakDeadTime>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001882:	f000 f8bf 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <MX_TIM1_Init+0x138>)
 8001888:	f000 f90c 	bl	8001aa4 <HAL_TIM_MspPostInit>

}
 800188c:	bf00      	nop
 800188e:	3758      	adds	r7, #88	; 0x58
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000098 	.word	0x20000098
 8001898:	40010000 	.word	0x40010000

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <MX_USART1_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f002 f854 	bl	8003980 <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f000 f891 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000e0 	.word	0x200000e0
 80018ec:	40011000 	.word	0x40011000

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <MX_GPIO_Init+0x108>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a3a      	ldr	r2, [pc, #232]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <MX_GPIO_Init+0x108>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <MX_GPIO_Init+0x108>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REAR_FRONT_LEDS_GPIO_Port, REAR_FRONT_LEDS_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001960:	4826      	ldr	r0, [pc, #152]	; (80019fc <MX_GPIO_Init+0x10c>)
 8001962:	f000 fd09 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(THR_DIS_GPIO_Port, THR_DIS_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2108      	movs	r1, #8
 800196a:	4825      	ldr	r0, [pc, #148]	; (8001a00 <MX_GPIO_Init+0x110>)
 800196c:	f000 fd04 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REAR_FRONT_LEDS_Pin */
  GPIO_InitStruct.Pin = REAR_FRONT_LEDS_Pin;
 8001970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197a:	2302      	movs	r3, #2
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REAR_FRONT_LEDS_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	481c      	ldr	r0, [pc, #112]	; (80019fc <MX_GPIO_Init+0x10c>)
 800198a:	f000 fb59 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : THR_SWITCH_Pin */
  GPIO_InitStruct.Pin = THR_SWITCH_Pin;
 800198e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(THR_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	4817      	ldr	r0, [pc, #92]	; (8001a00 <MX_GPIO_Init+0x110>)
 80019a4:	f000 fb4c 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : THR_DIS_Pin */
  GPIO_InitStruct.Pin = THR_DIS_Pin;
 80019a8:	2308      	movs	r3, #8
 80019aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(THR_DIS_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	4810      	ldr	r0, [pc, #64]	; (8001a00 <MX_GPIO_Init+0x110>)
 80019c0:	f000 fb3e 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAS_SIGNAL_Pin */
  GPIO_InitStruct.Pin = PAS_SIGNAL_Pin;
 80019c4:	2320      	movs	r3, #32
 80019c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ce:	2302      	movs	r3, #2
 80019d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PAS_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <MX_GPIO_Init+0x110>)
 80019da:	f000 fb31 	bl	8002040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2017      	movs	r0, #23
 80019e4:	f000 faf5 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019e8:	2017      	movs	r0, #23
 80019ea:	f000 fb0e 	bl	800200a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020400 	.word	0x40020400

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>
	...

08001a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <HAL_TIM_Base_MspInit+0x3c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10d      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_TIM_Base_MspInit+0x40>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_TIM_Base_MspInit+0x40>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_TIM_Base_MspInit+0x40>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <HAL_TIM_MspPostInit+0x68>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d11e      	bne.n	8001b04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_TIM_MspPostInit+0x6c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_TIM_MspPostInit+0x6c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = OUT_PWM_Pin;
 8001ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aec:	2302      	movs	r3, #2
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <HAL_TIM_MspPostInit+0x70>)
 8001b00:	f000 fa9e 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000

08001b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_UART_MspInit+0x84>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12c      	bne.n	8001b94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_UART_MspInit+0x88>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_UART_MspInit+0x88>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_UART_MspInit+0x88>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_UART_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_UART_MspInit+0x88>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_UART_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b84:	2307      	movs	r3, #7
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_UART_MspInit+0x8c>)
 8001b90:	f000 fa56 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bac:	e7fe      	b.n	8001bac <NMI_Handler+0x4>

08001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf4:	f000 f8ce 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PAS_SIGNAL_Pin);
 8001c00:	2020      	movs	r0, #32
 8001c02:	f000 fbd3 	bl	80023ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f002 fad4 	bl	80041e8 <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20010000 	.word	0x20010000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000128 	.word	0x20000128
 8001c74:	20000278 	.word	0x20000278

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ca0:	f7ff ffea 	bl	8001c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	; (8001cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	; (8001ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f002 fa93 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff fc9f 	bl	8001610 <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ce0:	08004bf4 	.word	0x08004bf4
  ldr r2, =_sbss
 8001ce4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ce8:	20000278 	.word	0x20000278

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_Init+0x40>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_Init+0x40>)
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_Init+0x40>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 f94f 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f000 f808 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fe74 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x54>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_InitTick+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f967 	bl	8002026 <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d70:	f000 f92f 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_InitTick+0x5c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008
 8001db8:	2000012c 	.word	0x2000012c

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2000012c 	.word	0x2000012c

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff ffee 	bl	8001dbc <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff3e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff31 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e159      	b.n	8002310 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 8148 	bne.w	800230a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a2 	beq.w	800230a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b54      	ldr	r3, [pc, #336]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_GPIO_Init+0x2ec>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_GPIO_Init+0x2f0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x202>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_GPIO_Init+0x2f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x1fe>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_GPIO_Init+0x2f8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x1fa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a46      	ldr	r2, [pc, #280]	; (800233c <HAL_GPIO_Init+0x2fc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x1f6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a45      	ldr	r2, [pc, #276]	; (8002340 <HAL_GPIO_Init+0x300>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x1f2>
 800222e:	2304      	movs	r3, #4
 8002230:	e008      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002232:	2307      	movs	r3, #7
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002236:	2303      	movs	r3, #3
 8002238:	e004      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223a:	2302      	movs	r3, #2
 800223c:	e002      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002242:	2300      	movs	r3, #0
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	f002 0203 	and.w	r2, r2, #3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002254:	4935      	ldr	r1, [pc, #212]	; (800232c <HAL_GPIO_Init+0x2ec>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_GPIO_Init+0x304>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b0:	4a24      	ldr	r2, [pc, #144]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002304:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	f67f aea2 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40013800 	.word	0x40013800
 8002330:	40020000 	.word	0x40020000
 8002334:	40020400 	.word	0x40020400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	40021000 	.word	0x40021000
 8002344:	40013c00 	.word	0x40013c00

08002348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e001      	b.n	800236a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002394:	e003      	b.n	800239e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f90a 	bl	80015e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40013c00 	.word	0x40013c00

080023dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e267      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d075      	beq.n	80024e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023fa:	4b88      	ldr	r3, [pc, #544]	; (800261c <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d00c      	beq.n	8002420 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002406:	4b85      	ldr	r3, [pc, #532]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800240e:	2b08      	cmp	r3, #8
 8002410:	d112      	bne.n	8002438 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002412:	4b82      	ldr	r3, [pc, #520]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241e:	d10b      	bne.n	8002438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	4b7e      	ldr	r3, [pc, #504]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d05b      	beq.n	80024e4 <HAL_RCC_OscConfig+0x108>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d157      	bne.n	80024e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e242      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x74>
 8002442:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a75      	ldr	r2, [pc, #468]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xb0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x98>
 800245a:	4b70      	ldr	r3, [pc, #448]	; (800261c <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6f      	ldr	r2, [pc, #444]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b6d      	ldr	r3, [pc, #436]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6c      	ldr	r2, [pc, #432]	; (800261c <HAL_RCC_OscConfig+0x240>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xb0>
 8002474:	4b69      	ldr	r3, [pc, #420]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a68      	ldr	r2, [pc, #416]	; (800261c <HAL_RCC_OscConfig+0x240>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b66      	ldr	r3, [pc, #408]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a65      	ldr	r2, [pc, #404]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fc92 	bl	8001dbc <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fc8e 	bl	8001dbc <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e207      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b5b      	ldr	r3, [pc, #364]	; (800261c <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xc0>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fc7e 	bl	8001dbc <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff fc7a 	bl	8001dbc <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1f3      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0xe8>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d063      	beq.n	80025ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024f2:	4b4a      	ldr	r3, [pc, #296]	; (800261c <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250a:	4b44      	ldr	r3, [pc, #272]	; (800261c <HAL_RCC_OscConfig+0x240>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x152>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1c7      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4937      	ldr	r1, [pc, #220]	; (800261c <HAL_RCC_OscConfig+0x240>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HAL_RCC_OscConfig+0x244>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7ff fc33 	bl	8001dbc <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7ff fc2f 	bl	8001dbc <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1a8      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4925      	ldr	r1, [pc, #148]	; (800261c <HAL_RCC_OscConfig+0x240>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_OscConfig+0x244>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff fc12 	bl	8001dbc <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7ff fc0e 	bl	8001dbc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e187      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d036      	beq.n	8002634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_RCC_OscConfig+0x248>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7ff fbf2 	bl	8001dbc <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7ff fbee 	bl	8001dbc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e167      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_OscConfig+0x240>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x200>
 80025fa:	e01b      	b.n	8002634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_OscConfig+0x248>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7ff fbdb 	bl	8001dbc <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	e00e      	b.n	8002628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260a:	f7ff fbd7 	bl	8001dbc <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d907      	bls.n	8002628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e150      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
 800261c:	40023800 	.word	0x40023800
 8002620:	42470000 	.word	0x42470000
 8002624:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x470>)
 800262a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ea      	bne.n	800260a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8097 	beq.w	8002770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b81      	ldr	r3, [pc, #516]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	4b7d      	ldr	r3, [pc, #500]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a7c      	ldr	r2, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b7a      	ldr	r3, [pc, #488]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b77      	ldr	r3, [pc, #476]	; (8002850 <HAL_RCC_OscConfig+0x474>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d118      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267e:	4b74      	ldr	r3, [pc, #464]	; (8002850 <HAL_RCC_OscConfig+0x474>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a73      	ldr	r2, [pc, #460]	; (8002850 <HAL_RCC_OscConfig+0x474>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268a:	f7ff fb97 	bl	8001dbc <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7ff fb93 	bl	8001dbc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e10c      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x474>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2ea>
 80026b8:	4b64      	ldr	r3, [pc, #400]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a63      	ldr	r2, [pc, #396]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x324>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x30c>
 80026ce:	4b5f      	ldr	r3, [pc, #380]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5e      	ldr	r2, [pc, #376]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	4b5c      	ldr	r3, [pc, #368]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a5b      	ldr	r2, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0x324>
 80026e8:	4b58      	ldr	r3, [pc, #352]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a57      	ldr	r2, [pc, #348]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	4b55      	ldr	r3, [pc, #340]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a54      	ldr	r2, [pc, #336]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80026fa:	f023 0304 	bic.w	r3, r3, #4
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7ff fb58 	bl	8001dbc <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7ff fb54 	bl	8001dbc <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0cb      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ee      	beq.n	8002710 <HAL_RCC_OscConfig+0x334>
 8002732:	e014      	b.n	800275e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7ff fb42 	bl	8001dbc <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273a:	e00a      	b.n	8002752 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7ff fb3e 	bl	8001dbc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0b5      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	4b3e      	ldr	r3, [pc, #248]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ee      	bne.n	800273c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	4a38      	ldr	r2, [pc, #224]	; (800284c <HAL_RCC_OscConfig+0x470>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a1 	beq.w	80028bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800277a:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x470>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b08      	cmp	r3, #8
 8002784:	d05c      	beq.n	8002840 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d141      	bne.n	8002812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_RCC_OscConfig+0x478>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff fb12 	bl	8001dbc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff fb0e 	bl	8001dbc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e087      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	491b      	ldr	r1, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x470>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x478>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7ff fae7 	bl	8001dbc <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7ff fae3 	bl	8001dbc <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e05c      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x416>
 8002810:	e054      	b.n	80028bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_OscConfig+0x478>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff fad0 	bl	8001dbc <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7ff facc 	bl	8001dbc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e045      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_OscConfig+0x470>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x444>
 800283e:	e03d      	b.n	80028bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d107      	bne.n	8002858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e038      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
 800284c:	40023800 	.word	0x40023800
 8002850:	40007000 	.word	0x40007000
 8002854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x4ec>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d028      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d121      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d11a      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002888:	4013      	ands	r3, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800288e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	3b01      	subs	r3, #1
 80028a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0cc      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d90c      	bls.n	8002908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d044      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d119      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d003      	beq.n	800298a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e067      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4934      	ldr	r1, [pc, #208]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7ff f9fe 	bl	8001dbc <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7ff f9fa 	bl	8001dbc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e04f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d20c      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f95e 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08004b98 	.word	0x08004b98
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a9c:	b090      	sub	sp, #64	; 0x40
 8002a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab0:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d00d      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	f200 80a1 	bhi.w	8002c04 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x34>
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aca:	e09b      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002ace:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ad0:	e09b      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad2:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ad6:	e098      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae2:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d028      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aee:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	2200      	movs	r2, #0
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	627a      	str	r2, [r7, #36]	; 0x24
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b00:	2100      	movs	r1, #0
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b04:	fb03 f201 	mul.w	r2, r3, r1
 8002b08:	2300      	movs	r3, #0
 8002b0a:	fb00 f303 	mul.w	r3, r0, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b12:	fba0 1202 	umull	r1, r2, r0, r2
 8002b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b18:	460a      	mov	r2, r1
 8002b1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1e:	4413      	add	r3, r2
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	2200      	movs	r2, #0
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	61fa      	str	r2, [r7, #28]
 8002b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b32:	f7fd ffeb 	bl	8000b0c <__aeabi_uldivmod>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3e:	e053      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b40:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	2200      	movs	r2, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	617a      	str	r2, [r7, #20]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b52:	f04f 0b00 	mov.w	fp, #0
 8002b56:	4652      	mov	r2, sl
 8002b58:	465b      	mov	r3, fp
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b72:	eb63 090b 	sbc.w	r9, r3, fp
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	00eb      	lsls	r3, r5, #3
 8002b9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba0:	00e2      	lsls	r2, r4, #3
 8002ba2:	4614      	mov	r4, r2
 8002ba4:	461d      	mov	r5, r3
 8002ba6:	eb14 030a 	adds.w	r3, r4, sl
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	eb45 030b 	adc.w	r3, r5, fp
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	028b      	lsls	r3, r1, #10
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc8:	4621      	mov	r1, r4
 8002bca:	028a      	lsls	r2, r1, #10
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	60fa      	str	r2, [r7, #12]
 8002bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bdc:	f7fd ff96 	bl	8000b0c <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c02:	e002      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3740      	adds	r7, #64	; 0x40
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	00f42400 	.word	0x00f42400
 8002c20:	017d7840 	.word	0x017d7840

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c40:	f7ff fff0 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08004ba8 	.word	0x08004ba8

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c68:	f7ff ffdc 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0b5b      	lsrs	r3, r3, #13
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08004ba8 	.word	0x08004ba8

08002c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e041      	b.n	8002d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe fed4 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 fac0 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e041      	b.n	8002dc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f839 	bl	8002dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 fa71 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x24>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e022      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d109      	bne.n	8002e1a <HAL_TIM_PWM_Start+0x3e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e015      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d109      	bne.n	8002e34 <HAL_TIM_PWM_Start+0x58>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e008      	b.n	8002e46 <HAL_TIM_PWM_Start+0x6a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e068      	b.n	8002f20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_PWM_Start+0x82>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e5c:	e013      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x92>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e6c:	e00b      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0xa2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	e003      	b.n	8002e86 <HAL_TIM_PWM_Start+0xaa>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fc90 	bl	80037b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <HAL_TIM_PWM_Start+0x14c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d107      	bne.n	8002eae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_TIM_PWM_Start+0x14c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d013      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_TIM_PWM_Start+0x150>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_TIM_PWM_Start+0x154>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_TIM_PWM_Start+0x158>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIM_PWM_Start+0x10e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <HAL_TIM_PWM_Start+0x15c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b06      	cmp	r3, #6
 8002efa:	d010      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	e007      	b.n	8002f1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40014000 	.word	0x40014000

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ae      	b.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f200 809f 	bhi.w	80030a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	080030a9 	.word	0x080030a9
 8002f88:	080030a9 	.word	0x080030a9
 8002f8c:	080030a9 	.word	0x080030a9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	08003067 	.word	0x08003067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f9dc 	bl	8003368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
      break;
 8002fe2:	e064      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fa22 	bl	8003434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e043      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fa6d 	bl	800350c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
      break;
 8003064:	e023      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fab7 	bl	80035e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
      break;
 80030a6:	e002      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_ConfigClockSource+0x1c>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0b4      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x186>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d03e      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xd4>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	f200 8087 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	f000 8086 	beq.w	8003232 <HAL_TIM_ConfigClockSource+0x172>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d87f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d01a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xa6>
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d87b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d050      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x11a>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d877      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d03c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0xfa>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d873      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d058      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x13a>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d86f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d064      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d86b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d060      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d867      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d05a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003164:	e062      	b.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	f000 fafd 	bl	8003774 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e04f      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a4:	f000 fae6 	bl	8003774 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e03c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 fa5a 	bl	8003680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2150      	movs	r1, #80	; 0x50
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fab3 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 80031d8:	e02c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fa79 	bl	80036de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2160      	movs	r1, #96	; 0x60
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 faa3 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 80031f8:	e01c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fa3a 	bl	8003680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fa93 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 8003218:	e00c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 fa8a 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 800322a:	e003      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e000      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3a      	ldr	r2, [pc, #232]	; (800334c <TIM_Base_SetConfig+0xfc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00f      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d00b      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a37      	ldr	r2, [pc, #220]	; (8003350 <TIM_Base_SetConfig+0x100>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a36      	ldr	r2, [pc, #216]	; (8003354 <TIM_Base_SetConfig+0x104>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a35      	ldr	r2, [pc, #212]	; (8003358 <TIM_Base_SetConfig+0x108>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d108      	bne.n	800329a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2b      	ldr	r2, [pc, #172]	; (800334c <TIM_Base_SetConfig+0xfc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a28      	ldr	r2, [pc, #160]	; (8003350 <TIM_Base_SetConfig+0x100>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <TIM_Base_SetConfig+0x104>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a26      	ldr	r2, [pc, #152]	; (8003358 <TIM_Base_SetConfig+0x108>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a25      	ldr	r2, [pc, #148]	; (800335c <TIM_Base_SetConfig+0x10c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <TIM_Base_SetConfig+0x110>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <TIM_Base_SetConfig+0x114>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <TIM_Base_SetConfig+0xfc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
  }
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800

08003368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 0201 	bic.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f023 0302 	bic.w	r3, r3, #2
 80033b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <TIM_OC1_SetConfig+0xc8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10c      	bne.n	80033de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 0308 	bic.w	r3, r3, #8
 80033ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <TIM_OC1_SetConfig+0xc8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d111      	bne.n	800340a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	621a      	str	r2, [r3, #32]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40010000 	.word	0x40010000

08003434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f023 0210 	bic.w	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0320 	bic.w	r3, r3, #32
 800347e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <TIM_OC2_SetConfig+0xd4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10d      	bne.n	80034b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <TIM_OC2_SetConfig+0xd4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d113      	bne.n	80034e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000

0800350c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <TIM_OC3_SetConfig+0xd0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10d      	bne.n	8003586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <TIM_OC3_SetConfig+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d113      	bne.n	80035b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40010000 	.word	0x40010000

080035e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800362a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	031b      	lsls	r3, r3, #12
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a10      	ldr	r2, [pc, #64]	; (800367c <TIM_OC4_SetConfig+0x9c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000

08003680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0201 	bic.w	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 030a 	bic.w	r3, r3, #10
 80036bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036de:	b480      	push	{r7}
 80036e0:	b087      	sub	sp, #28
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f023 0210 	bic.w	r2, r3, #16
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	031b      	lsls	r3, r3, #12
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800371a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	f043 0307 	orr.w	r3, r3, #7
 8003760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	431a      	orrs	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2201      	movs	r2, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1a      	ldr	r2, [r3, #32]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	401a      	ands	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003814:	2302      	movs	r3, #2
 8003816:	e050      	b.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d018      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d013      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10c      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40014000 	.word	0x40014000

080038dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e03d      	b.n	8003974 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e042      	b.n	8003a18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe f8b6 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f973 	bl	8003cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d175      	bne.n	8003b2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_UART_Transmit+0x2c>
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e06e      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2221      	movs	r2, #33	; 0x21
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5e:	f7fe f9ad 	bl	8001dbc <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	88fa      	ldrh	r2, [r7, #6]
 8003a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a78:	d108      	bne.n	8003a8c <HAL_UART_Transmit+0x6c>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e003      	b.n	8003a94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a94:	e02e      	b.n	8003af4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f848 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e03a      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e007      	b.n	8003ae6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1cb      	bne.n	8003a96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f814 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e006      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b46:	e03b      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4e:	d037      	beq.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b50:	f7fe f934 	bl	8001dbc <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	6a3a      	ldr	r2, [r7, #32]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d302      	bcc.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e03a      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d023      	beq.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d020      	beq.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d01d      	beq.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d116      	bne.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f81d 	bl	8003be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e00f      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d0b4      	beq.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b095      	sub	sp, #84	; 0x54
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c10:	643a      	str	r2, [r7, #64]	; 0x40
 8003c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d119      	bne.n	8003c94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f023 0310 	bic.w	r3, r3, #16
 8003c76:	647b      	str	r3, [r7, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c80:	61ba      	str	r2, [r7, #24]
 8003c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e5      	bne.n	8003c60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ca2:	bf00      	nop
 8003ca4:	3754      	adds	r7, #84	; 0x54
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb4:	b0c0      	sub	sp, #256	; 0x100
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	68d9      	ldr	r1, [r3, #12]
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	ea40 0301 	orr.w	r3, r0, r1
 8003cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d08:	f021 010c 	bic.w	r1, r1, #12
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d16:	430b      	orrs	r3, r1
 8003d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	6999      	ldr	r1, [r3, #24]
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	ea40 0301 	orr.w	r3, r0, r1
 8003d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b8f      	ldr	r3, [pc, #572]	; (8003f7c <UART_SetConfig+0x2cc>)
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d005      	beq.n	8003d50 <UART_SetConfig+0xa0>
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b8d      	ldr	r3, [pc, #564]	; (8003f80 <UART_SetConfig+0x2d0>)
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d104      	bne.n	8003d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d50:	f7fe ff88 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8003d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d58:	e003      	b.n	8003d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d5a:	f7fe ff6f 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8003d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6c:	f040 810c 	bne.w	8003f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d74:	2200      	movs	r2, #0
 8003d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	1891      	adds	r1, r2, r2
 8003d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d92:	4621      	mov	r1, r4
 8003d94:	eb12 0801 	adds.w	r8, r2, r1
 8003d98:	4629      	mov	r1, r5
 8003d9a:	eb43 0901 	adc.w	r9, r3, r1
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003db2:	4690      	mov	r8, r2
 8003db4:	4699      	mov	r9, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	eb18 0303 	adds.w	r3, r8, r3
 8003dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dc0:	462b      	mov	r3, r5
 8003dc2:	eb49 0303 	adc.w	r3, r9, r3
 8003dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dde:	460b      	mov	r3, r1
 8003de0:	18db      	adds	r3, r3, r3
 8003de2:	653b      	str	r3, [r7, #80]	; 0x50
 8003de4:	4613      	mov	r3, r2
 8003de6:	eb42 0303 	adc.w	r3, r2, r3
 8003dea:	657b      	str	r3, [r7, #84]	; 0x54
 8003dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003df4:	f7fc fe8a 	bl	8000b0c <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <UART_SetConfig+0x2d4>)
 8003dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	011c      	lsls	r4, r3, #4
 8003e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e18:	4642      	mov	r2, r8
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e20:	415b      	adcs	r3, r3
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e28:	4641      	mov	r1, r8
 8003e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e2e:	4649      	mov	r1, r9
 8003e30:	eb43 0b01 	adc.w	fp, r3, r1
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e48:	4692      	mov	sl, r2
 8003e4a:	469b      	mov	fp, r3
 8003e4c:	4643      	mov	r3, r8
 8003e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e56:	464b      	mov	r3, r9
 8003e58:	eb4b 0303 	adc.w	r3, fp, r3
 8003e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e74:	460b      	mov	r3, r1
 8003e76:	18db      	adds	r3, r3, r3
 8003e78:	643b      	str	r3, [r7, #64]	; 0x40
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
 8003e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e8a:	f7fc fe3f 	bl	8000b0c <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <UART_SetConfig+0x2d4>)
 8003e96:	fba3 2301 	umull	r2, r3, r3, r1
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2264      	movs	r2, #100	; 0x64
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	1acb      	subs	r3, r1, r3
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003eaa:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <UART_SetConfig+0x2d4>)
 8003eac:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eb8:	441c      	add	r4, r3
 8003eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ecc:	4642      	mov	r2, r8
 8003ece:	464b      	mov	r3, r9
 8003ed0:	1891      	adds	r1, r2, r2
 8003ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ed4:	415b      	adcs	r3, r3
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003edc:	4641      	mov	r1, r8
 8003ede:	1851      	adds	r1, r2, r1
 8003ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	414b      	adcs	r3, r1
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	00cb      	lsls	r3, r1, #3
 8003ef8:	4651      	mov	r1, sl
 8003efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efe:	4651      	mov	r1, sl
 8003f00:	00ca      	lsls	r2, r1, #3
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	4642      	mov	r2, r8
 8003f0a:	189b      	adds	r3, r3, r2
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f10:	464b      	mov	r3, r9
 8003f12:	460a      	mov	r2, r1
 8003f14:	eb42 0303 	adc.w	r3, r2, r3
 8003f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f30:	460b      	mov	r3, r1
 8003f32:	18db      	adds	r3, r3, r3
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f36:	4613      	mov	r3, r2
 8003f38:	eb42 0303 	adc.w	r3, r2, r3
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f46:	f7fc fde1 	bl	8000b0c <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <UART_SetConfig+0x2d4>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	; 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <UART_SetConfig+0x2d4>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 0207 	and.w	r2, r3, #7
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4422      	add	r2, r4
 8003f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f78:	e106      	b.n	8004188 <UART_SetConfig+0x4d8>
 8003f7a:	bf00      	nop
 8003f7c:	40011000 	.word	0x40011000
 8003f80:	40011400 	.word	0x40011400
 8003f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f9a:	4642      	mov	r2, r8
 8003f9c:	464b      	mov	r3, r9
 8003f9e:	1891      	adds	r1, r2, r2
 8003fa0:	6239      	str	r1, [r7, #32]
 8003fa2:	415b      	adcs	r3, r3
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003faa:	4641      	mov	r1, r8
 8003fac:	1854      	adds	r4, r2, r1
 8003fae:	4649      	mov	r1, r9
 8003fb0:	eb43 0501 	adc.w	r5, r3, r1
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	00eb      	lsls	r3, r5, #3
 8003fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc2:	00e2      	lsls	r2, r4, #3
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	4643      	mov	r3, r8
 8003fca:	18e3      	adds	r3, r4, r3
 8003fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	eb45 0303 	adc.w	r3, r5, r3
 8003fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	008b      	lsls	r3, r1, #2
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004000:	4621      	mov	r1, r4
 8004002:	008a      	lsls	r2, r1, #2
 8004004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004008:	f7fc fd80 	bl	8000b0c <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4b60      	ldr	r3, [pc, #384]	; (8004194 <UART_SetConfig+0x4e4>)
 8004012:	fba3 2302 	umull	r2, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	011c      	lsls	r4, r3, #4
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	1891      	adds	r1, r2, r2
 8004032:	61b9      	str	r1, [r7, #24]
 8004034:	415b      	adcs	r3, r3
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403c:	4641      	mov	r1, r8
 800403e:	1851      	adds	r1, r2, r1
 8004040:	6139      	str	r1, [r7, #16]
 8004042:	4649      	mov	r1, r9
 8004044:	414b      	adcs	r3, r1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004054:	4659      	mov	r1, fp
 8004056:	00cb      	lsls	r3, r1, #3
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405e:	4651      	mov	r1, sl
 8004060:	00ca      	lsls	r2, r1, #3
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	4603      	mov	r3, r0
 8004068:	4642      	mov	r2, r8
 800406a:	189b      	adds	r3, r3, r2
 800406c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004070:	464b      	mov	r3, r9
 8004072:	460a      	mov	r2, r1
 8004074:	eb42 0303 	adc.w	r3, r2, r3
 8004078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	67bb      	str	r3, [r7, #120]	; 0x78
 8004086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004094:	4649      	mov	r1, r9
 8004096:	008b      	lsls	r3, r1, #2
 8004098:	4641      	mov	r1, r8
 800409a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800409e:	4641      	mov	r1, r8
 80040a0:	008a      	lsls	r2, r1, #2
 80040a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040a6:	f7fc fd31 	bl	8000b0c <__aeabi_uldivmod>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	4b38      	ldr	r3, [pc, #224]	; (8004194 <UART_SetConfig+0x4e4>)
 80040b2:	fba3 2301 	umull	r2, r3, r3, r1
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2264      	movs	r2, #100	; 0x64
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	1acb      	subs	r3, r1, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	; 0x32
 80040c4:	4a33      	ldr	r2, [pc, #204]	; (8004194 <UART_SetConfig+0x4e4>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d0:	441c      	add	r4, r3
 80040d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d6:	2200      	movs	r2, #0
 80040d8:	673b      	str	r3, [r7, #112]	; 0x70
 80040da:	677a      	str	r2, [r7, #116]	; 0x74
 80040dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	1891      	adds	r1, r2, r2
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	415b      	adcs	r3, r3
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f0:	4641      	mov	r1, r8
 80040f2:	1851      	adds	r1, r2, r1
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	4649      	mov	r1, r9
 80040f8:	414b      	adcs	r3, r1
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004108:	4659      	mov	r1, fp
 800410a:	00cb      	lsls	r3, r1, #3
 800410c:	4651      	mov	r1, sl
 800410e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004112:	4651      	mov	r1, sl
 8004114:	00ca      	lsls	r2, r1, #3
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	4603      	mov	r3, r0
 800411c:	4642      	mov	r2, r8
 800411e:	189b      	adds	r3, r3, r2
 8004120:	66bb      	str	r3, [r7, #104]	; 0x68
 8004122:	464b      	mov	r3, r9
 8004124:	460a      	mov	r2, r1
 8004126:	eb42 0303 	adc.w	r3, r2, r3
 800412a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	663b      	str	r3, [r7, #96]	; 0x60
 8004136:	667a      	str	r2, [r7, #100]	; 0x64
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004144:	4649      	mov	r1, r9
 8004146:	008b      	lsls	r3, r1, #2
 8004148:	4641      	mov	r1, r8
 800414a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414e:	4641      	mov	r1, r8
 8004150:	008a      	lsls	r2, r1, #2
 8004152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004156:	f7fc fcd9 	bl	8000b0c <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <UART_SetConfig+0x4e4>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	; 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <UART_SetConfig+0x4e4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4422      	add	r2, r4
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	bf00      	nop
 800418a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800418e:	46bd      	mov	sp, r7
 8004190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004194:	51eb851f 	.word	0x51eb851f

08004198 <siprintf>:
 8004198:	b40e      	push	{r1, r2, r3}
 800419a:	b500      	push	{lr}
 800419c:	b09c      	sub	sp, #112	; 0x70
 800419e:	ab1d      	add	r3, sp, #116	; 0x74
 80041a0:	9002      	str	r0, [sp, #8]
 80041a2:	9006      	str	r0, [sp, #24]
 80041a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041a8:	4809      	ldr	r0, [pc, #36]	; (80041d0 <siprintf+0x38>)
 80041aa:	9107      	str	r1, [sp, #28]
 80041ac:	9104      	str	r1, [sp, #16]
 80041ae:	4909      	ldr	r1, [pc, #36]	; (80041d4 <siprintf+0x3c>)
 80041b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80041b4:	9105      	str	r1, [sp, #20]
 80041b6:	6800      	ldr	r0, [r0, #0]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	a902      	add	r1, sp, #8
 80041bc:	f000 f992 	bl	80044e4 <_svfiprintf_r>
 80041c0:	9b02      	ldr	r3, [sp, #8]
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	b01c      	add	sp, #112	; 0x70
 80041c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041cc:	b003      	add	sp, #12
 80041ce:	4770      	bx	lr
 80041d0:	20000058 	.word	0x20000058
 80041d4:	ffff0208 	.word	0xffff0208

080041d8 <memset>:
 80041d8:	4402      	add	r2, r0
 80041da:	4603      	mov	r3, r0
 80041dc:	4293      	cmp	r3, r2
 80041de:	d100      	bne.n	80041e2 <memset+0xa>
 80041e0:	4770      	bx	lr
 80041e2:	f803 1b01 	strb.w	r1, [r3], #1
 80041e6:	e7f9      	b.n	80041dc <memset+0x4>

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000058 	.word	0x20000058

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	; (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	; (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x44>)
 8004208:	f000 fc6a 	bl	8004ae0 <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08004bec 	.word	0x08004bec
 8004230:	08004bec 	.word	0x08004bec
 8004234:	08004bec 	.word	0x08004bec
 8004238:	08004bf0 	.word	0x08004bf0

0800423c <__retarget_lock_acquire_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_release_recursive>:
 800423e:	4770      	bx	lr

08004240 <_free_r>:
 8004240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004242:	2900      	cmp	r1, #0
 8004244:	d044      	beq.n	80042d0 <_free_r+0x90>
 8004246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424a:	9001      	str	r0, [sp, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f1a1 0404 	sub.w	r4, r1, #4
 8004252:	bfb8      	it	lt
 8004254:	18e4      	addlt	r4, r4, r3
 8004256:	f000 f8df 	bl	8004418 <__malloc_lock>
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <_free_r+0x94>)
 800425c:	9801      	ldr	r0, [sp, #4]
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	b933      	cbnz	r3, 8004270 <_free_r+0x30>
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	6014      	str	r4, [r2, #0]
 8004266:	b003      	add	sp, #12
 8004268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800426c:	f000 b8da 	b.w	8004424 <__malloc_unlock>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d908      	bls.n	8004286 <_free_r+0x46>
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1961      	adds	r1, r4, r5
 8004278:	428b      	cmp	r3, r1
 800427a:	bf01      	itttt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	1949      	addeq	r1, r1, r5
 8004282:	6021      	streq	r1, [r4, #0]
 8004284:	e7ed      	b.n	8004262 <_free_r+0x22>
 8004286:	461a      	mov	r2, r3
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b10b      	cbz	r3, 8004290 <_free_r+0x50>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d9fa      	bls.n	8004286 <_free_r+0x46>
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	1855      	adds	r5, r2, r1
 8004294:	42a5      	cmp	r5, r4
 8004296:	d10b      	bne.n	80042b0 <_free_r+0x70>
 8004298:	6824      	ldr	r4, [r4, #0]
 800429a:	4421      	add	r1, r4
 800429c:	1854      	adds	r4, r2, r1
 800429e:	42a3      	cmp	r3, r4
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	d1e0      	bne.n	8004266 <_free_r+0x26>
 80042a4:	681c      	ldr	r4, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	6053      	str	r3, [r2, #4]
 80042aa:	440c      	add	r4, r1
 80042ac:	6014      	str	r4, [r2, #0]
 80042ae:	e7da      	b.n	8004266 <_free_r+0x26>
 80042b0:	d902      	bls.n	80042b8 <_free_r+0x78>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6003      	str	r3, [r0, #0]
 80042b6:	e7d6      	b.n	8004266 <_free_r+0x26>
 80042b8:	6825      	ldr	r5, [r4, #0]
 80042ba:	1961      	adds	r1, r4, r5
 80042bc:	428b      	cmp	r3, r1
 80042be:	bf04      	itt	eq
 80042c0:	6819      	ldreq	r1, [r3, #0]
 80042c2:	685b      	ldreq	r3, [r3, #4]
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	bf04      	itt	eq
 80042c8:	1949      	addeq	r1, r1, r5
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	6054      	str	r4, [r2, #4]
 80042ce:	e7ca      	b.n	8004266 <_free_r+0x26>
 80042d0:	b003      	add	sp, #12
 80042d2:	bd30      	pop	{r4, r5, pc}
 80042d4:	20000270 	.word	0x20000270

080042d8 <sbrk_aligned>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4e0e      	ldr	r6, [pc, #56]	; (8004314 <sbrk_aligned+0x3c>)
 80042dc:	460c      	mov	r4, r1
 80042de:	6831      	ldr	r1, [r6, #0]
 80042e0:	4605      	mov	r5, r0
 80042e2:	b911      	cbnz	r1, 80042ea <sbrk_aligned+0x12>
 80042e4:	f000 fba6 	bl	8004a34 <_sbrk_r>
 80042e8:	6030      	str	r0, [r6, #0]
 80042ea:	4621      	mov	r1, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 fba1 	bl	8004a34 <_sbrk_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	d00a      	beq.n	800430c <sbrk_aligned+0x34>
 80042f6:	1cc4      	adds	r4, r0, #3
 80042f8:	f024 0403 	bic.w	r4, r4, #3
 80042fc:	42a0      	cmp	r0, r4
 80042fe:	d007      	beq.n	8004310 <sbrk_aligned+0x38>
 8004300:	1a21      	subs	r1, r4, r0
 8004302:	4628      	mov	r0, r5
 8004304:	f000 fb96 	bl	8004a34 <_sbrk_r>
 8004308:	3001      	adds	r0, #1
 800430a:	d101      	bne.n	8004310 <sbrk_aligned+0x38>
 800430c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004310:	4620      	mov	r0, r4
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	20000274 	.word	0x20000274

08004318 <_malloc_r>:
 8004318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800431c:	1ccd      	adds	r5, r1, #3
 800431e:	f025 0503 	bic.w	r5, r5, #3
 8004322:	3508      	adds	r5, #8
 8004324:	2d0c      	cmp	r5, #12
 8004326:	bf38      	it	cc
 8004328:	250c      	movcc	r5, #12
 800432a:	2d00      	cmp	r5, #0
 800432c:	4607      	mov	r7, r0
 800432e:	db01      	blt.n	8004334 <_malloc_r+0x1c>
 8004330:	42a9      	cmp	r1, r5
 8004332:	d905      	bls.n	8004340 <_malloc_r+0x28>
 8004334:	230c      	movs	r3, #12
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	2600      	movs	r6, #0
 800433a:	4630      	mov	r0, r6
 800433c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004340:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004414 <_malloc_r+0xfc>
 8004344:	f000 f868 	bl	8004418 <__malloc_lock>
 8004348:	f8d8 3000 	ldr.w	r3, [r8]
 800434c:	461c      	mov	r4, r3
 800434e:	bb5c      	cbnz	r4, 80043a8 <_malloc_r+0x90>
 8004350:	4629      	mov	r1, r5
 8004352:	4638      	mov	r0, r7
 8004354:	f7ff ffc0 	bl	80042d8 <sbrk_aligned>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	4604      	mov	r4, r0
 800435c:	d155      	bne.n	800440a <_malloc_r+0xf2>
 800435e:	f8d8 4000 	ldr.w	r4, [r8]
 8004362:	4626      	mov	r6, r4
 8004364:	2e00      	cmp	r6, #0
 8004366:	d145      	bne.n	80043f4 <_malloc_r+0xdc>
 8004368:	2c00      	cmp	r4, #0
 800436a:	d048      	beq.n	80043fe <_malloc_r+0xe6>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	4631      	mov	r1, r6
 8004370:	4638      	mov	r0, r7
 8004372:	eb04 0903 	add.w	r9, r4, r3
 8004376:	f000 fb5d 	bl	8004a34 <_sbrk_r>
 800437a:	4581      	cmp	r9, r0
 800437c:	d13f      	bne.n	80043fe <_malloc_r+0xe6>
 800437e:	6821      	ldr	r1, [r4, #0]
 8004380:	1a6d      	subs	r5, r5, r1
 8004382:	4629      	mov	r1, r5
 8004384:	4638      	mov	r0, r7
 8004386:	f7ff ffa7 	bl	80042d8 <sbrk_aligned>
 800438a:	3001      	adds	r0, #1
 800438c:	d037      	beq.n	80043fe <_malloc_r+0xe6>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	442b      	add	r3, r5
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	f8d8 3000 	ldr.w	r3, [r8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d038      	beq.n	800440e <_malloc_r+0xf6>
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	42a2      	cmp	r2, r4
 80043a0:	d12b      	bne.n	80043fa <_malloc_r+0xe2>
 80043a2:	2200      	movs	r2, #0
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	e00f      	b.n	80043c8 <_malloc_r+0xb0>
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	1b52      	subs	r2, r2, r5
 80043ac:	d41f      	bmi.n	80043ee <_malloc_r+0xd6>
 80043ae:	2a0b      	cmp	r2, #11
 80043b0:	d917      	bls.n	80043e2 <_malloc_r+0xca>
 80043b2:	1961      	adds	r1, r4, r5
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	6059      	strne	r1, [r3, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	bf08      	it	eq
 80043c0:	f8c8 1000 	streq.w	r1, [r8]
 80043c4:	5162      	str	r2, [r4, r5]
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	4638      	mov	r0, r7
 80043ca:	f104 060b 	add.w	r6, r4, #11
 80043ce:	f000 f829 	bl	8004424 <__malloc_unlock>
 80043d2:	f026 0607 	bic.w	r6, r6, #7
 80043d6:	1d23      	adds	r3, r4, #4
 80043d8:	1af2      	subs	r2, r6, r3
 80043da:	d0ae      	beq.n	800433a <_malloc_r+0x22>
 80043dc:	1b9b      	subs	r3, r3, r6
 80043de:	50a3      	str	r3, [r4, r2]
 80043e0:	e7ab      	b.n	800433a <_malloc_r+0x22>
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	6862      	ldr	r2, [r4, #4]
 80043e6:	d1dd      	bne.n	80043a4 <_malloc_r+0x8c>
 80043e8:	f8c8 2000 	str.w	r2, [r8]
 80043ec:	e7ec      	b.n	80043c8 <_malloc_r+0xb0>
 80043ee:	4623      	mov	r3, r4
 80043f0:	6864      	ldr	r4, [r4, #4]
 80043f2:	e7ac      	b.n	800434e <_malloc_r+0x36>
 80043f4:	4634      	mov	r4, r6
 80043f6:	6876      	ldr	r6, [r6, #4]
 80043f8:	e7b4      	b.n	8004364 <_malloc_r+0x4c>
 80043fa:	4613      	mov	r3, r2
 80043fc:	e7cc      	b.n	8004398 <_malloc_r+0x80>
 80043fe:	230c      	movs	r3, #12
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4638      	mov	r0, r7
 8004404:	f000 f80e 	bl	8004424 <__malloc_unlock>
 8004408:	e797      	b.n	800433a <_malloc_r+0x22>
 800440a:	6025      	str	r5, [r4, #0]
 800440c:	e7dc      	b.n	80043c8 <_malloc_r+0xb0>
 800440e:	605b      	str	r3, [r3, #4]
 8004410:	deff      	udf	#255	; 0xff
 8004412:	bf00      	nop
 8004414:	20000270 	.word	0x20000270

08004418 <__malloc_lock>:
 8004418:	4801      	ldr	r0, [pc, #4]	; (8004420 <__malloc_lock+0x8>)
 800441a:	f7ff bf0f 	b.w	800423c <__retarget_lock_acquire_recursive>
 800441e:	bf00      	nop
 8004420:	2000026c 	.word	0x2000026c

08004424 <__malloc_unlock>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__malloc_unlock+0x8>)
 8004426:	f7ff bf0a 	b.w	800423e <__retarget_lock_release_recursive>
 800442a:	bf00      	nop
 800442c:	2000026c 	.word	0x2000026c

08004430 <__ssputs_r>:
 8004430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	688e      	ldr	r6, [r1, #8]
 8004436:	461f      	mov	r7, r3
 8004438:	42be      	cmp	r6, r7
 800443a:	680b      	ldr	r3, [r1, #0]
 800443c:	4682      	mov	sl, r0
 800443e:	460c      	mov	r4, r1
 8004440:	4690      	mov	r8, r2
 8004442:	d82c      	bhi.n	800449e <__ssputs_r+0x6e>
 8004444:	898a      	ldrh	r2, [r1, #12]
 8004446:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800444a:	d026      	beq.n	800449a <__ssputs_r+0x6a>
 800444c:	6965      	ldr	r5, [r4, #20]
 800444e:	6909      	ldr	r1, [r1, #16]
 8004450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004454:	eba3 0901 	sub.w	r9, r3, r1
 8004458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800445c:	1c7b      	adds	r3, r7, #1
 800445e:	444b      	add	r3, r9
 8004460:	106d      	asrs	r5, r5, #1
 8004462:	429d      	cmp	r5, r3
 8004464:	bf38      	it	cc
 8004466:	461d      	movcc	r5, r3
 8004468:	0553      	lsls	r3, r2, #21
 800446a:	d527      	bpl.n	80044bc <__ssputs_r+0x8c>
 800446c:	4629      	mov	r1, r5
 800446e:	f7ff ff53 	bl	8004318 <_malloc_r>
 8004472:	4606      	mov	r6, r0
 8004474:	b360      	cbz	r0, 80044d0 <__ssputs_r+0xa0>
 8004476:	6921      	ldr	r1, [r4, #16]
 8004478:	464a      	mov	r2, r9
 800447a:	f000 faeb 	bl	8004a54 <memcpy>
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	6126      	str	r6, [r4, #16]
 800448c:	6165      	str	r5, [r4, #20]
 800448e:	444e      	add	r6, r9
 8004490:	eba5 0509 	sub.w	r5, r5, r9
 8004494:	6026      	str	r6, [r4, #0]
 8004496:	60a5      	str	r5, [r4, #8]
 8004498:	463e      	mov	r6, r7
 800449a:	42be      	cmp	r6, r7
 800449c:	d900      	bls.n	80044a0 <__ssputs_r+0x70>
 800449e:	463e      	mov	r6, r7
 80044a0:	6820      	ldr	r0, [r4, #0]
 80044a2:	4632      	mov	r2, r6
 80044a4:	4641      	mov	r1, r8
 80044a6:	f000 faab 	bl	8004a00 <memmove>
 80044aa:	68a3      	ldr	r3, [r4, #8]
 80044ac:	1b9b      	subs	r3, r3, r6
 80044ae:	60a3      	str	r3, [r4, #8]
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	4433      	add	r3, r6
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2000      	movs	r0, #0
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044bc:	462a      	mov	r2, r5
 80044be:	f000 fad7 	bl	8004a70 <_realloc_r>
 80044c2:	4606      	mov	r6, r0
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d1e0      	bne.n	800448a <__ssputs_r+0x5a>
 80044c8:	6921      	ldr	r1, [r4, #16]
 80044ca:	4650      	mov	r0, sl
 80044cc:	f7ff feb8 	bl	8004240 <_free_r>
 80044d0:	230c      	movs	r3, #12
 80044d2:	f8ca 3000 	str.w	r3, [sl]
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e2:	e7e9      	b.n	80044b8 <__ssputs_r+0x88>

080044e4 <_svfiprintf_r>:
 80044e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e8:	4698      	mov	r8, r3
 80044ea:	898b      	ldrh	r3, [r1, #12]
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	b09d      	sub	sp, #116	; 0x74
 80044f0:	4607      	mov	r7, r0
 80044f2:	460d      	mov	r5, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	d50e      	bpl.n	8004516 <_svfiprintf_r+0x32>
 80044f8:	690b      	ldr	r3, [r1, #16]
 80044fa:	b963      	cbnz	r3, 8004516 <_svfiprintf_r+0x32>
 80044fc:	2140      	movs	r1, #64	; 0x40
 80044fe:	f7ff ff0b 	bl	8004318 <_malloc_r>
 8004502:	6028      	str	r0, [r5, #0]
 8004504:	6128      	str	r0, [r5, #16]
 8004506:	b920      	cbnz	r0, 8004512 <_svfiprintf_r+0x2e>
 8004508:	230c      	movs	r3, #12
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004510:	e0d0      	b.n	80046b4 <_svfiprintf_r+0x1d0>
 8004512:	2340      	movs	r3, #64	; 0x40
 8004514:	616b      	str	r3, [r5, #20]
 8004516:	2300      	movs	r3, #0
 8004518:	9309      	str	r3, [sp, #36]	; 0x24
 800451a:	2320      	movs	r3, #32
 800451c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004520:	f8cd 800c 	str.w	r8, [sp, #12]
 8004524:	2330      	movs	r3, #48	; 0x30
 8004526:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046cc <_svfiprintf_r+0x1e8>
 800452a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800452e:	f04f 0901 	mov.w	r9, #1
 8004532:	4623      	mov	r3, r4
 8004534:	469a      	mov	sl, r3
 8004536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453a:	b10a      	cbz	r2, 8004540 <_svfiprintf_r+0x5c>
 800453c:	2a25      	cmp	r2, #37	; 0x25
 800453e:	d1f9      	bne.n	8004534 <_svfiprintf_r+0x50>
 8004540:	ebba 0b04 	subs.w	fp, sl, r4
 8004544:	d00b      	beq.n	800455e <_svfiprintf_r+0x7a>
 8004546:	465b      	mov	r3, fp
 8004548:	4622      	mov	r2, r4
 800454a:	4629      	mov	r1, r5
 800454c:	4638      	mov	r0, r7
 800454e:	f7ff ff6f 	bl	8004430 <__ssputs_r>
 8004552:	3001      	adds	r0, #1
 8004554:	f000 80a9 	beq.w	80046aa <_svfiprintf_r+0x1c6>
 8004558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455a:	445a      	add	r2, fp
 800455c:	9209      	str	r2, [sp, #36]	; 0x24
 800455e:	f89a 3000 	ldrb.w	r3, [sl]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80a1 	beq.w	80046aa <_svfiprintf_r+0x1c6>
 8004568:	2300      	movs	r3, #0
 800456a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800456e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004572:	f10a 0a01 	add.w	sl, sl, #1
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	9307      	str	r3, [sp, #28]
 800457a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800457e:	931a      	str	r3, [sp, #104]	; 0x68
 8004580:	4654      	mov	r4, sl
 8004582:	2205      	movs	r2, #5
 8004584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004588:	4850      	ldr	r0, [pc, #320]	; (80046cc <_svfiprintf_r+0x1e8>)
 800458a:	f7fb fe31 	bl	80001f0 <memchr>
 800458e:	9a04      	ldr	r2, [sp, #16]
 8004590:	b9d8      	cbnz	r0, 80045ca <_svfiprintf_r+0xe6>
 8004592:	06d0      	lsls	r0, r2, #27
 8004594:	bf44      	itt	mi
 8004596:	2320      	movmi	r3, #32
 8004598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459c:	0711      	lsls	r1, r2, #28
 800459e:	bf44      	itt	mi
 80045a0:	232b      	movmi	r3, #43	; 0x2b
 80045a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a6:	f89a 3000 	ldrb.w	r3, [sl]
 80045aa:	2b2a      	cmp	r3, #42	; 0x2a
 80045ac:	d015      	beq.n	80045da <_svfiprintf_r+0xf6>
 80045ae:	9a07      	ldr	r2, [sp, #28]
 80045b0:	4654      	mov	r4, sl
 80045b2:	2000      	movs	r0, #0
 80045b4:	f04f 0c0a 	mov.w	ip, #10
 80045b8:	4621      	mov	r1, r4
 80045ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045be:	3b30      	subs	r3, #48	; 0x30
 80045c0:	2b09      	cmp	r3, #9
 80045c2:	d94d      	bls.n	8004660 <_svfiprintf_r+0x17c>
 80045c4:	b1b0      	cbz	r0, 80045f4 <_svfiprintf_r+0x110>
 80045c6:	9207      	str	r2, [sp, #28]
 80045c8:	e014      	b.n	80045f4 <_svfiprintf_r+0x110>
 80045ca:	eba0 0308 	sub.w	r3, r0, r8
 80045ce:	fa09 f303 	lsl.w	r3, r9, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	46a2      	mov	sl, r4
 80045d8:	e7d2      	b.n	8004580 <_svfiprintf_r+0x9c>
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	1d19      	adds	r1, r3, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	9103      	str	r1, [sp, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bfbb      	ittet	lt
 80045e6:	425b      	neglt	r3, r3
 80045e8:	f042 0202 	orrlt.w	r2, r2, #2
 80045ec:	9307      	strge	r3, [sp, #28]
 80045ee:	9307      	strlt	r3, [sp, #28]
 80045f0:	bfb8      	it	lt
 80045f2:	9204      	strlt	r2, [sp, #16]
 80045f4:	7823      	ldrb	r3, [r4, #0]
 80045f6:	2b2e      	cmp	r3, #46	; 0x2e
 80045f8:	d10c      	bne.n	8004614 <_svfiprintf_r+0x130>
 80045fa:	7863      	ldrb	r3, [r4, #1]
 80045fc:	2b2a      	cmp	r3, #42	; 0x2a
 80045fe:	d134      	bne.n	800466a <_svfiprintf_r+0x186>
 8004600:	9b03      	ldr	r3, [sp, #12]
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	9203      	str	r2, [sp, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	bfb8      	it	lt
 800460c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004610:	3402      	adds	r4, #2
 8004612:	9305      	str	r3, [sp, #20]
 8004614:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80046dc <_svfiprintf_r+0x1f8>
 8004618:	7821      	ldrb	r1, [r4, #0]
 800461a:	2203      	movs	r2, #3
 800461c:	4650      	mov	r0, sl
 800461e:	f7fb fde7 	bl	80001f0 <memchr>
 8004622:	b138      	cbz	r0, 8004634 <_svfiprintf_r+0x150>
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	eba0 000a 	sub.w	r0, r0, sl
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	4082      	lsls	r2, r0
 800462e:	4313      	orrs	r3, r2
 8004630:	3401      	adds	r4, #1
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004638:	4825      	ldr	r0, [pc, #148]	; (80046d0 <_svfiprintf_r+0x1ec>)
 800463a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800463e:	2206      	movs	r2, #6
 8004640:	f7fb fdd6 	bl	80001f0 <memchr>
 8004644:	2800      	cmp	r0, #0
 8004646:	d038      	beq.n	80046ba <_svfiprintf_r+0x1d6>
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <_svfiprintf_r+0x1f0>)
 800464a:	bb1b      	cbnz	r3, 8004694 <_svfiprintf_r+0x1b0>
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	3307      	adds	r3, #7
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	3308      	adds	r3, #8
 8004656:	9303      	str	r3, [sp, #12]
 8004658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465a:	4433      	add	r3, r6
 800465c:	9309      	str	r3, [sp, #36]	; 0x24
 800465e:	e768      	b.n	8004532 <_svfiprintf_r+0x4e>
 8004660:	fb0c 3202 	mla	r2, ip, r2, r3
 8004664:	460c      	mov	r4, r1
 8004666:	2001      	movs	r0, #1
 8004668:	e7a6      	b.n	80045b8 <_svfiprintf_r+0xd4>
 800466a:	2300      	movs	r3, #0
 800466c:	3401      	adds	r4, #1
 800466e:	9305      	str	r3, [sp, #20]
 8004670:	4619      	mov	r1, r3
 8004672:	f04f 0c0a 	mov.w	ip, #10
 8004676:	4620      	mov	r0, r4
 8004678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800467c:	3a30      	subs	r2, #48	; 0x30
 800467e:	2a09      	cmp	r2, #9
 8004680:	d903      	bls.n	800468a <_svfiprintf_r+0x1a6>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0c6      	beq.n	8004614 <_svfiprintf_r+0x130>
 8004686:	9105      	str	r1, [sp, #20]
 8004688:	e7c4      	b.n	8004614 <_svfiprintf_r+0x130>
 800468a:	fb0c 2101 	mla	r1, ip, r1, r2
 800468e:	4604      	mov	r4, r0
 8004690:	2301      	movs	r3, #1
 8004692:	e7f0      	b.n	8004676 <_svfiprintf_r+0x192>
 8004694:	ab03      	add	r3, sp, #12
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	462a      	mov	r2, r5
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <_svfiprintf_r+0x1f4>)
 800469c:	a904      	add	r1, sp, #16
 800469e:	4638      	mov	r0, r7
 80046a0:	f3af 8000 	nop.w
 80046a4:	1c42      	adds	r2, r0, #1
 80046a6:	4606      	mov	r6, r0
 80046a8:	d1d6      	bne.n	8004658 <_svfiprintf_r+0x174>
 80046aa:	89ab      	ldrh	r3, [r5, #12]
 80046ac:	065b      	lsls	r3, r3, #25
 80046ae:	f53f af2d 	bmi.w	800450c <_svfiprintf_r+0x28>
 80046b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046b4:	b01d      	add	sp, #116	; 0x74
 80046b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ba:	ab03      	add	r3, sp, #12
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	462a      	mov	r2, r5
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <_svfiprintf_r+0x1f4>)
 80046c2:	a904      	add	r1, sp, #16
 80046c4:	4638      	mov	r0, r7
 80046c6:	f000 f879 	bl	80047bc <_printf_i>
 80046ca:	e7eb      	b.n	80046a4 <_svfiprintf_r+0x1c0>
 80046cc:	08004bb0 	.word	0x08004bb0
 80046d0:	08004bba 	.word	0x08004bba
 80046d4:	00000000 	.word	0x00000000
 80046d8:	08004431 	.word	0x08004431
 80046dc:	08004bb6 	.word	0x08004bb6

080046e0 <_printf_common>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	4616      	mov	r6, r2
 80046e6:	4699      	mov	r9, r3
 80046e8:	688a      	ldr	r2, [r1, #8]
 80046ea:	690b      	ldr	r3, [r1, #16]
 80046ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bfb8      	it	lt
 80046f4:	4613      	movlt	r3, r2
 80046f6:	6033      	str	r3, [r6, #0]
 80046f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046fc:	4607      	mov	r7, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	b10a      	cbz	r2, 8004706 <_printf_common+0x26>
 8004702:	3301      	adds	r3, #1
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	0699      	lsls	r1, r3, #26
 800470a:	bf42      	ittt	mi
 800470c:	6833      	ldrmi	r3, [r6, #0]
 800470e:	3302      	addmi	r3, #2
 8004710:	6033      	strmi	r3, [r6, #0]
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	f015 0506 	ands.w	r5, r5, #6
 8004718:	d106      	bne.n	8004728 <_printf_common+0x48>
 800471a:	f104 0a19 	add.w	sl, r4, #25
 800471e:	68e3      	ldr	r3, [r4, #12]
 8004720:	6832      	ldr	r2, [r6, #0]
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	42ab      	cmp	r3, r5
 8004726:	dc26      	bgt.n	8004776 <_printf_common+0x96>
 8004728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800472c:	1e13      	subs	r3, r2, #0
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	bf18      	it	ne
 8004732:	2301      	movne	r3, #1
 8004734:	0692      	lsls	r2, r2, #26
 8004736:	d42b      	bmi.n	8004790 <_printf_common+0xb0>
 8004738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800473c:	4649      	mov	r1, r9
 800473e:	4638      	mov	r0, r7
 8004740:	47c0      	blx	r8
 8004742:	3001      	adds	r0, #1
 8004744:	d01e      	beq.n	8004784 <_printf_common+0xa4>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	6922      	ldr	r2, [r4, #16]
 800474a:	f003 0306 	and.w	r3, r3, #6
 800474e:	2b04      	cmp	r3, #4
 8004750:	bf02      	ittt	eq
 8004752:	68e5      	ldreq	r5, [r4, #12]
 8004754:	6833      	ldreq	r3, [r6, #0]
 8004756:	1aed      	subeq	r5, r5, r3
 8004758:	68a3      	ldr	r3, [r4, #8]
 800475a:	bf0c      	ite	eq
 800475c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004760:	2500      	movne	r5, #0
 8004762:	4293      	cmp	r3, r2
 8004764:	bfc4      	itt	gt
 8004766:	1a9b      	subgt	r3, r3, r2
 8004768:	18ed      	addgt	r5, r5, r3
 800476a:	2600      	movs	r6, #0
 800476c:	341a      	adds	r4, #26
 800476e:	42b5      	cmp	r5, r6
 8004770:	d11a      	bne.n	80047a8 <_printf_common+0xc8>
 8004772:	2000      	movs	r0, #0
 8004774:	e008      	b.n	8004788 <_printf_common+0xa8>
 8004776:	2301      	movs	r3, #1
 8004778:	4652      	mov	r2, sl
 800477a:	4649      	mov	r1, r9
 800477c:	4638      	mov	r0, r7
 800477e:	47c0      	blx	r8
 8004780:	3001      	adds	r0, #1
 8004782:	d103      	bne.n	800478c <_printf_common+0xac>
 8004784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	3501      	adds	r5, #1
 800478e:	e7c6      	b.n	800471e <_printf_common+0x3e>
 8004790:	18e1      	adds	r1, r4, r3
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	2030      	movs	r0, #48	; 0x30
 8004796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800479a:	4422      	add	r2, r4
 800479c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047a4:	3302      	adds	r3, #2
 80047a6:	e7c7      	b.n	8004738 <_printf_common+0x58>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4622      	mov	r2, r4
 80047ac:	4649      	mov	r1, r9
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c0      	blx	r8
 80047b2:	3001      	adds	r0, #1
 80047b4:	d0e6      	beq.n	8004784 <_printf_common+0xa4>
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7d9      	b.n	800476e <_printf_common+0x8e>
	...

080047bc <_printf_i>:
 80047bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	7e0f      	ldrb	r7, [r1, #24]
 80047c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047c4:	2f78      	cmp	r7, #120	; 0x78
 80047c6:	4691      	mov	r9, r2
 80047c8:	4680      	mov	r8, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	469a      	mov	sl, r3
 80047ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047d2:	d807      	bhi.n	80047e4 <_printf_i+0x28>
 80047d4:	2f62      	cmp	r7, #98	; 0x62
 80047d6:	d80a      	bhi.n	80047ee <_printf_i+0x32>
 80047d8:	2f00      	cmp	r7, #0
 80047da:	f000 80d4 	beq.w	8004986 <_printf_i+0x1ca>
 80047de:	2f58      	cmp	r7, #88	; 0x58
 80047e0:	f000 80c0 	beq.w	8004964 <_printf_i+0x1a8>
 80047e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047ec:	e03a      	b.n	8004864 <_printf_i+0xa8>
 80047ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047f2:	2b15      	cmp	r3, #21
 80047f4:	d8f6      	bhi.n	80047e4 <_printf_i+0x28>
 80047f6:	a101      	add	r1, pc, #4	; (adr r1, 80047fc <_printf_i+0x40>)
 80047f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004869 	.word	0x08004869
 8004804:	080047e5 	.word	0x080047e5
 8004808:	080047e5 	.word	0x080047e5
 800480c:	080047e5 	.word	0x080047e5
 8004810:	080047e5 	.word	0x080047e5
 8004814:	08004869 	.word	0x08004869
 8004818:	080047e5 	.word	0x080047e5
 800481c:	080047e5 	.word	0x080047e5
 8004820:	080047e5 	.word	0x080047e5
 8004824:	080047e5 	.word	0x080047e5
 8004828:	0800496d 	.word	0x0800496d
 800482c:	08004895 	.word	0x08004895
 8004830:	08004927 	.word	0x08004927
 8004834:	080047e5 	.word	0x080047e5
 8004838:	080047e5 	.word	0x080047e5
 800483c:	0800498f 	.word	0x0800498f
 8004840:	080047e5 	.word	0x080047e5
 8004844:	08004895 	.word	0x08004895
 8004848:	080047e5 	.word	0x080047e5
 800484c:	080047e5 	.word	0x080047e5
 8004850:	0800492f 	.word	0x0800492f
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	602a      	str	r2, [r5, #0]
 800485c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004864:	2301      	movs	r3, #1
 8004866:	e09f      	b.n	80049a8 <_printf_i+0x1ec>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	0607      	lsls	r7, r0, #24
 800486e:	f103 0104 	add.w	r1, r3, #4
 8004872:	6029      	str	r1, [r5, #0]
 8004874:	d501      	bpl.n	800487a <_printf_i+0xbe>
 8004876:	681e      	ldr	r6, [r3, #0]
 8004878:	e003      	b.n	8004882 <_printf_i+0xc6>
 800487a:	0646      	lsls	r6, r0, #25
 800487c:	d5fb      	bpl.n	8004876 <_printf_i+0xba>
 800487e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004882:	2e00      	cmp	r6, #0
 8004884:	da03      	bge.n	800488e <_printf_i+0xd2>
 8004886:	232d      	movs	r3, #45	; 0x2d
 8004888:	4276      	negs	r6, r6
 800488a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488e:	485a      	ldr	r0, [pc, #360]	; (80049f8 <_printf_i+0x23c>)
 8004890:	230a      	movs	r3, #10
 8004892:	e012      	b.n	80048ba <_printf_i+0xfe>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	1d19      	adds	r1, r3, #4
 800489a:	6029      	str	r1, [r5, #0]
 800489c:	0605      	lsls	r5, r0, #24
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0xe8>
 80048a0:	681e      	ldr	r6, [r3, #0]
 80048a2:	e002      	b.n	80048aa <_printf_i+0xee>
 80048a4:	0641      	lsls	r1, r0, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0xe4>
 80048a8:	881e      	ldrh	r6, [r3, #0]
 80048aa:	4853      	ldr	r0, [pc, #332]	; (80049f8 <_printf_i+0x23c>)
 80048ac:	2f6f      	cmp	r7, #111	; 0x6f
 80048ae:	bf0c      	ite	eq
 80048b0:	2308      	moveq	r3, #8
 80048b2:	230a      	movne	r3, #10
 80048b4:	2100      	movs	r1, #0
 80048b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ba:	6865      	ldr	r5, [r4, #4]
 80048bc:	60a5      	str	r5, [r4, #8]
 80048be:	2d00      	cmp	r5, #0
 80048c0:	bfa2      	ittt	ge
 80048c2:	6821      	ldrge	r1, [r4, #0]
 80048c4:	f021 0104 	bicge.w	r1, r1, #4
 80048c8:	6021      	strge	r1, [r4, #0]
 80048ca:	b90e      	cbnz	r6, 80048d0 <_printf_i+0x114>
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	d04b      	beq.n	8004968 <_printf_i+0x1ac>
 80048d0:	4615      	mov	r5, r2
 80048d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048d6:	fb03 6711 	mls	r7, r3, r1, r6
 80048da:	5dc7      	ldrb	r7, [r0, r7]
 80048dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048e0:	4637      	mov	r7, r6
 80048e2:	42bb      	cmp	r3, r7
 80048e4:	460e      	mov	r6, r1
 80048e6:	d9f4      	bls.n	80048d2 <_printf_i+0x116>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d10b      	bne.n	8004904 <_printf_i+0x148>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	07de      	lsls	r6, r3, #31
 80048f0:	d508      	bpl.n	8004904 <_printf_i+0x148>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	6861      	ldr	r1, [r4, #4]
 80048f6:	4299      	cmp	r1, r3
 80048f8:	bfde      	ittt	le
 80048fa:	2330      	movle	r3, #48	; 0x30
 80048fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004900:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004904:	1b52      	subs	r2, r2, r5
 8004906:	6122      	str	r2, [r4, #16]
 8004908:	f8cd a000 	str.w	sl, [sp]
 800490c:	464b      	mov	r3, r9
 800490e:	aa03      	add	r2, sp, #12
 8004910:	4621      	mov	r1, r4
 8004912:	4640      	mov	r0, r8
 8004914:	f7ff fee4 	bl	80046e0 <_printf_common>
 8004918:	3001      	adds	r0, #1
 800491a:	d14a      	bne.n	80049b2 <_printf_i+0x1f6>
 800491c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004920:	b004      	add	sp, #16
 8004922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	f043 0320 	orr.w	r3, r3, #32
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	4833      	ldr	r0, [pc, #204]	; (80049fc <_printf_i+0x240>)
 8004930:	2778      	movs	r7, #120	; 0x78
 8004932:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	6829      	ldr	r1, [r5, #0]
 800493a:	061f      	lsls	r7, r3, #24
 800493c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004940:	d402      	bmi.n	8004948 <_printf_i+0x18c>
 8004942:	065f      	lsls	r7, r3, #25
 8004944:	bf48      	it	mi
 8004946:	b2b6      	uxthmi	r6, r6
 8004948:	07df      	lsls	r7, r3, #31
 800494a:	bf48      	it	mi
 800494c:	f043 0320 	orrmi.w	r3, r3, #32
 8004950:	6029      	str	r1, [r5, #0]
 8004952:	bf48      	it	mi
 8004954:	6023      	strmi	r3, [r4, #0]
 8004956:	b91e      	cbnz	r6, 8004960 <_printf_i+0x1a4>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f023 0320 	bic.w	r3, r3, #32
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	2310      	movs	r3, #16
 8004962:	e7a7      	b.n	80048b4 <_printf_i+0xf8>
 8004964:	4824      	ldr	r0, [pc, #144]	; (80049f8 <_printf_i+0x23c>)
 8004966:	e7e4      	b.n	8004932 <_printf_i+0x176>
 8004968:	4615      	mov	r5, r2
 800496a:	e7bd      	b.n	80048e8 <_printf_i+0x12c>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	6826      	ldr	r6, [r4, #0]
 8004970:	6961      	ldr	r1, [r4, #20]
 8004972:	1d18      	adds	r0, r3, #4
 8004974:	6028      	str	r0, [r5, #0]
 8004976:	0635      	lsls	r5, r6, #24
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	d501      	bpl.n	8004980 <_printf_i+0x1c4>
 800497c:	6019      	str	r1, [r3, #0]
 800497e:	e002      	b.n	8004986 <_printf_i+0x1ca>
 8004980:	0670      	lsls	r0, r6, #25
 8004982:	d5fb      	bpl.n	800497c <_printf_i+0x1c0>
 8004984:	8019      	strh	r1, [r3, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	4615      	mov	r5, r2
 800498c:	e7bc      	b.n	8004908 <_printf_i+0x14c>
 800498e:	682b      	ldr	r3, [r5, #0]
 8004990:	1d1a      	adds	r2, r3, #4
 8004992:	602a      	str	r2, [r5, #0]
 8004994:	681d      	ldr	r5, [r3, #0]
 8004996:	6862      	ldr	r2, [r4, #4]
 8004998:	2100      	movs	r1, #0
 800499a:	4628      	mov	r0, r5
 800499c:	f7fb fc28 	bl	80001f0 <memchr>
 80049a0:	b108      	cbz	r0, 80049a6 <_printf_i+0x1ea>
 80049a2:	1b40      	subs	r0, r0, r5
 80049a4:	6060      	str	r0, [r4, #4]
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	2300      	movs	r3, #0
 80049ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b0:	e7aa      	b.n	8004908 <_printf_i+0x14c>
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	462a      	mov	r2, r5
 80049b6:	4649      	mov	r1, r9
 80049b8:	4640      	mov	r0, r8
 80049ba:	47d0      	blx	sl
 80049bc:	3001      	adds	r0, #1
 80049be:	d0ad      	beq.n	800491c <_printf_i+0x160>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	079b      	lsls	r3, r3, #30
 80049c4:	d413      	bmi.n	80049ee <_printf_i+0x232>
 80049c6:	68e0      	ldr	r0, [r4, #12]
 80049c8:	9b03      	ldr	r3, [sp, #12]
 80049ca:	4298      	cmp	r0, r3
 80049cc:	bfb8      	it	lt
 80049ce:	4618      	movlt	r0, r3
 80049d0:	e7a6      	b.n	8004920 <_printf_i+0x164>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4632      	mov	r2, r6
 80049d6:	4649      	mov	r1, r9
 80049d8:	4640      	mov	r0, r8
 80049da:	47d0      	blx	sl
 80049dc:	3001      	adds	r0, #1
 80049de:	d09d      	beq.n	800491c <_printf_i+0x160>
 80049e0:	3501      	adds	r5, #1
 80049e2:	68e3      	ldr	r3, [r4, #12]
 80049e4:	9903      	ldr	r1, [sp, #12]
 80049e6:	1a5b      	subs	r3, r3, r1
 80049e8:	42ab      	cmp	r3, r5
 80049ea:	dcf2      	bgt.n	80049d2 <_printf_i+0x216>
 80049ec:	e7eb      	b.n	80049c6 <_printf_i+0x20a>
 80049ee:	2500      	movs	r5, #0
 80049f0:	f104 0619 	add.w	r6, r4, #25
 80049f4:	e7f5      	b.n	80049e2 <_printf_i+0x226>
 80049f6:	bf00      	nop
 80049f8:	08004bc1 	.word	0x08004bc1
 80049fc:	08004bd2 	.word	0x08004bd2

08004a00 <memmove>:
 8004a00:	4288      	cmp	r0, r1
 8004a02:	b510      	push	{r4, lr}
 8004a04:	eb01 0402 	add.w	r4, r1, r2
 8004a08:	d902      	bls.n	8004a10 <memmove+0x10>
 8004a0a:	4284      	cmp	r4, r0
 8004a0c:	4623      	mov	r3, r4
 8004a0e:	d807      	bhi.n	8004a20 <memmove+0x20>
 8004a10:	1e43      	subs	r3, r0, #1
 8004a12:	42a1      	cmp	r1, r4
 8004a14:	d008      	beq.n	8004a28 <memmove+0x28>
 8004a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a1e:	e7f8      	b.n	8004a12 <memmove+0x12>
 8004a20:	4402      	add	r2, r0
 8004a22:	4601      	mov	r1, r0
 8004a24:	428a      	cmp	r2, r1
 8004a26:	d100      	bne.n	8004a2a <memmove+0x2a>
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a32:	e7f7      	b.n	8004a24 <memmove+0x24>

08004a34 <_sbrk_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d06      	ldr	r5, [pc, #24]	; (8004a50 <_sbrk_r+0x1c>)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	f7fd f8e4 	bl	8001c0c <_sbrk>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_sbrk_r+0x1a>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_sbrk_r+0x1a>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	20000268 	.word	0x20000268

08004a54 <memcpy>:
 8004a54:	440a      	add	r2, r1
 8004a56:	4291      	cmp	r1, r2
 8004a58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a5c:	d100      	bne.n	8004a60 <memcpy+0xc>
 8004a5e:	4770      	bx	lr
 8004a60:	b510      	push	{r4, lr}
 8004a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	d1f9      	bne.n	8004a62 <memcpy+0xe>
 8004a6e:	bd10      	pop	{r4, pc}

08004a70 <_realloc_r>:
 8004a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a74:	4680      	mov	r8, r0
 8004a76:	4614      	mov	r4, r2
 8004a78:	460e      	mov	r6, r1
 8004a7a:	b921      	cbnz	r1, 8004a86 <_realloc_r+0x16>
 8004a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a80:	4611      	mov	r1, r2
 8004a82:	f7ff bc49 	b.w	8004318 <_malloc_r>
 8004a86:	b92a      	cbnz	r2, 8004a94 <_realloc_r+0x24>
 8004a88:	f7ff fbda 	bl	8004240 <_free_r>
 8004a8c:	4625      	mov	r5, r4
 8004a8e:	4628      	mov	r0, r5
 8004a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a94:	f000 f81b 	bl	8004ace <_malloc_usable_size_r>
 8004a98:	4284      	cmp	r4, r0
 8004a9a:	4607      	mov	r7, r0
 8004a9c:	d802      	bhi.n	8004aa4 <_realloc_r+0x34>
 8004a9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004aa2:	d812      	bhi.n	8004aca <_realloc_r+0x5a>
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f7ff fc36 	bl	8004318 <_malloc_r>
 8004aac:	4605      	mov	r5, r0
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d0ed      	beq.n	8004a8e <_realloc_r+0x1e>
 8004ab2:	42bc      	cmp	r4, r7
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	bf28      	it	cs
 8004aba:	463a      	movcs	r2, r7
 8004abc:	f7ff ffca 	bl	8004a54 <memcpy>
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	f7ff fbbc 	bl	8004240 <_free_r>
 8004ac8:	e7e1      	b.n	8004a8e <_realloc_r+0x1e>
 8004aca:	4635      	mov	r5, r6
 8004acc:	e7df      	b.n	8004a8e <_realloc_r+0x1e>

08004ace <_malloc_usable_size_r>:
 8004ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad2:	1f18      	subs	r0, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bfbc      	itt	lt
 8004ad8:	580b      	ldrlt	r3, [r1, r0]
 8004ada:	18c0      	addlt	r0, r0, r3
 8004adc:	4770      	bx	lr
	...

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
