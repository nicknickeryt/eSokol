
pas_handler_v2_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004830  08004830  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004838  08004838  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  0800489c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  0800489c  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c061  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a09  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096f  00000000  00000000  0002e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001623c  00000000  00000000  0002f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c98c  00000000  00000000  000452f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d63f  00000000  00000000  00051c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038f8  00000000  00000000  000df2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e2bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800472c 	.word	0x0800472c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800472c 	.word	0x0800472c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800090c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000910:	f000 b970 	b.w	8000bf4 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9e08      	ldr	r6, [sp, #32]
 8000932:	460d      	mov	r5, r1
 8000934:	4604      	mov	r4, r0
 8000936:	460f      	mov	r7, r1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d14a      	bne.n	80009d2 <__udivmoddi4+0xa6>
 800093c:	428a      	cmp	r2, r1
 800093e:	4694      	mov	ip, r2
 8000940:	d965      	bls.n	8000a0e <__udivmoddi4+0xe2>
 8000942:	fab2 f382 	clz	r3, r2
 8000946:	b143      	cbz	r3, 800095a <__udivmoddi4+0x2e>
 8000948:	fa02 fc03 	lsl.w	ip, r2, r3
 800094c:	f1c3 0220 	rsb	r2, r3, #32
 8000950:	409f      	lsls	r7, r3
 8000952:	fa20 f202 	lsr.w	r2, r0, r2
 8000956:	4317      	orrs	r7, r2
 8000958:	409c      	lsls	r4, r3
 800095a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800095e:	fa1f f58c 	uxth.w	r5, ip
 8000962:	fbb7 f1fe 	udiv	r1, r7, lr
 8000966:	0c22      	lsrs	r2, r4, #16
 8000968:	fb0e 7711 	mls	r7, lr, r1, r7
 800096c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000970:	fb01 f005 	mul.w	r0, r1, r5
 8000974:	4290      	cmp	r0, r2
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x62>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000980:	f080 811c 	bcs.w	8000bbc <__udivmoddi4+0x290>
 8000984:	4290      	cmp	r0, r2
 8000986:	f240 8119 	bls.w	8000bbc <__udivmoddi4+0x290>
 800098a:	3902      	subs	r1, #2
 800098c:	4462      	add	r2, ip
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	b2a4      	uxth	r4, r4
 8000992:	fbb2 f0fe 	udiv	r0, r2, lr
 8000996:	fb0e 2210 	mls	r2, lr, r0, r2
 800099a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800099e:	fb00 f505 	mul.w	r5, r0, r5
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	d90a      	bls.n	80009bc <__udivmoddi4+0x90>
 80009a6:	eb1c 0404 	adds.w	r4, ip, r4
 80009aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009ae:	f080 8107 	bcs.w	8000bc0 <__udivmoddi4+0x294>
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	f240 8104 	bls.w	8000bc0 <__udivmoddi4+0x294>
 80009b8:	4464      	add	r4, ip
 80009ba:	3802      	subs	r0, #2
 80009bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009c0:	1b64      	subs	r4, r4, r5
 80009c2:	2100      	movs	r1, #0
 80009c4:	b11e      	cbz	r6, 80009ce <__udivmoddi4+0xa2>
 80009c6:	40dc      	lsrs	r4, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	e9c6 4300 	strd	r4, r3, [r6]
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0xbc>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	f000 80ed 	beq.w	8000bb6 <__udivmoddi4+0x28a>
 80009dc:	2100      	movs	r1, #0
 80009de:	e9c6 0500 	strd	r0, r5, [r6]
 80009e2:	4608      	mov	r0, r1
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	fab3 f183 	clz	r1, r3
 80009ec:	2900      	cmp	r1, #0
 80009ee:	d149      	bne.n	8000a84 <__udivmoddi4+0x158>
 80009f0:	42ab      	cmp	r3, r5
 80009f2:	d302      	bcc.n	80009fa <__udivmoddi4+0xce>
 80009f4:	4282      	cmp	r2, r0
 80009f6:	f200 80f8 	bhi.w	8000bea <__udivmoddi4+0x2be>
 80009fa:	1a84      	subs	r4, r0, r2
 80009fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000a00:	2001      	movs	r0, #1
 8000a02:	4617      	mov	r7, r2
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d0e2      	beq.n	80009ce <__udivmoddi4+0xa2>
 8000a08:	e9c6 4700 	strd	r4, r7, [r6]
 8000a0c:	e7df      	b.n	80009ce <__udivmoddi4+0xa2>
 8000a0e:	b902      	cbnz	r2, 8000a12 <__udivmoddi4+0xe6>
 8000a10:	deff      	udf	#255	; 0xff
 8000a12:	fab2 f382 	clz	r3, r2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8090 	bne.w	8000b3c <__udivmoddi4+0x210>
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a22:	fa1f fe8c 	uxth.w	lr, ip
 8000a26:	2101      	movs	r1, #1
 8000a28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a36:	fb0e f005 	mul.w	r0, lr, r5
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x124>
 8000a3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x122>
 8000a48:	4290      	cmp	r0, r2
 8000a4a:	f200 80cb 	bhi.w	8000be4 <__udivmoddi4+0x2b8>
 8000a4e:	4645      	mov	r5, r8
 8000a50:	1a12      	subs	r2, r2, r0
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a58:	fb07 2210 	mls	r2, r7, r0, r2
 8000a5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a60:	fb0e fe00 	mul.w	lr, lr, r0
 8000a64:	45a6      	cmp	lr, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x14e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x14c>
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	f200 80bb 	bhi.w	8000bee <__udivmoddi4+0x2c2>
 8000a78:	4610      	mov	r0, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a82:	e79f      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a84:	f1c1 0720 	rsb	r7, r1, #32
 8000a88:	408b      	lsls	r3, r1
 8000a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a92:	fa05 f401 	lsl.w	r4, r5, r1
 8000a96:	fa20 f307 	lsr.w	r3, r0, r7
 8000a9a:	40fd      	lsrs	r5, r7
 8000a9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aa0:	4323      	orrs	r3, r4
 8000aa2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000aa6:	fa1f fe8c 	uxth.w	lr, ip
 8000aaa:	fb09 5518 	mls	r5, r9, r8, r5
 8000aae:	0c1c      	lsrs	r4, r3, #16
 8000ab0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ab4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ab8:	42a5      	cmp	r5, r4
 8000aba:	fa02 f201 	lsl.w	r2, r2, r1
 8000abe:	fa00 f001 	lsl.w	r0, r0, r1
 8000ac2:	d90b      	bls.n	8000adc <__udivmoddi4+0x1b0>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000acc:	f080 8088 	bcs.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad0:	42a5      	cmp	r5, r4
 8000ad2:	f240 8085 	bls.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8000ada:	4464      	add	r4, ip
 8000adc:	1b64      	subs	r4, r4, r5
 8000ade:	b29d      	uxth	r5, r3
 8000ae0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ae4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ae8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x1da>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000afc:	d26c      	bcs.n	8000bd8 <__udivmoddi4+0x2ac>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	d96a      	bls.n	8000bd8 <__udivmoddi4+0x2ac>
 8000b02:	3b02      	subs	r3, #2
 8000b04:	4464      	add	r4, ip
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b0e:	eba4 040e 	sub.w	r4, r4, lr
 8000b12:	42ac      	cmp	r4, r5
 8000b14:	46c8      	mov	r8, r9
 8000b16:	46ae      	mov	lr, r5
 8000b18:	d356      	bcc.n	8000bc8 <__udivmoddi4+0x29c>
 8000b1a:	d053      	beq.n	8000bc4 <__udivmoddi4+0x298>
 8000b1c:	b156      	cbz	r6, 8000b34 <__udivmoddi4+0x208>
 8000b1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b22:	eb64 040e 	sbc.w	r4, r4, lr
 8000b26:	fa04 f707 	lsl.w	r7, r4, r7
 8000b2a:	40ca      	lsrs	r2, r1
 8000b2c:	40cc      	lsrs	r4, r1
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	e9c6 7400 	strd	r7, r4, [r6]
 8000b34:	4618      	mov	r0, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	f1c3 0120 	rsb	r1, r3, #32
 8000b40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b44:	fa20 f201 	lsr.w	r2, r0, r1
 8000b48:	fa25 f101 	lsr.w	r1, r5, r1
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	432a      	orrs	r2, r5
 8000b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b60:	0c11      	lsrs	r1, r2, #16
 8000b62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b66:	fb00 f50e 	mul.w	r5, r0, lr
 8000b6a:	428d      	cmp	r5, r1
 8000b6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x258>
 8000b72:	eb1c 0101 	adds.w	r1, ip, r1
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b7a:	d22f      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000b7c:	428d      	cmp	r5, r1
 8000b7e:	d92d      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000b80:	3802      	subs	r0, #2
 8000b82:	4461      	add	r1, ip
 8000b84:	1b49      	subs	r1, r1, r5
 8000b86:	b292      	uxth	r2, r2
 8000b88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b94:	fb05 f10e 	mul.w	r1, r5, lr
 8000b98:	4291      	cmp	r1, r2
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x282>
 8000b9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ba4:	d216      	bcs.n	8000bd4 <__udivmoddi4+0x2a8>
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	d914      	bls.n	8000bd4 <__udivmoddi4+0x2a8>
 8000baa:	3d02      	subs	r5, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a52      	subs	r2, r2, r1
 8000bb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bb4:	e738      	b.n	8000a28 <__udivmoddi4+0xfc>
 8000bb6:	4631      	mov	r1, r6
 8000bb8:	4630      	mov	r0, r6
 8000bba:	e708      	b.n	80009ce <__udivmoddi4+0xa2>
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e6e6      	b.n	800098e <__udivmoddi4+0x62>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	e6fb      	b.n	80009bc <__udivmoddi4+0x90>
 8000bc4:	4548      	cmp	r0, r9
 8000bc6:	d2a9      	bcs.n	8000b1c <__udivmoddi4+0x1f0>
 8000bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	e7a3      	b.n	8000b1c <__udivmoddi4+0x1f0>
 8000bd4:	4645      	mov	r5, r8
 8000bd6:	e7ea      	b.n	8000bae <__udivmoddi4+0x282>
 8000bd8:	462b      	mov	r3, r5
 8000bda:	e794      	b.n	8000b06 <__udivmoddi4+0x1da>
 8000bdc:	4640      	mov	r0, r8
 8000bde:	e7d1      	b.n	8000b84 <__udivmoddi4+0x258>
 8000be0:	46d0      	mov	r8, sl
 8000be2:	e77b      	b.n	8000adc <__udivmoddi4+0x1b0>
 8000be4:	3d02      	subs	r5, #2
 8000be6:	4462      	add	r2, ip
 8000be8:	e732      	b.n	8000a50 <__udivmoddi4+0x124>
 8000bea:	4608      	mov	r0, r1
 8000bec:	e70a      	b.n	8000a04 <__udivmoddi4+0xd8>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e742      	b.n	8000a7a <__udivmoddi4+0x14e>

08000bf4 <__aeabi_idiv0>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <send_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// DEBUG UART HELPERS
void send_string(char *s) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), 1000);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff faed 	bl	80001e0 <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <send_string+0x28>)
 8000c12:	f002 fd2b 	bl	800366c <HAL_UART_Transmit>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000c0 	.word	0x200000c0

08000c24 <send_float>:
	char buffer[12];
	sprintf(buffer, "%d", num);
	send_string(buffer);
}

void send_float(float num) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	ed87 0a01 	vstr	s0, [r7, #4]
	int whole_part = (int) num; // Część całkowita
 8000c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c36:	ee17 3a90 	vmov	r3, s15
 8000c3a:	623b      	str	r3, [r7, #32]
	int fractional_part = (int) ((num - whole_part) * 100); // Część ułamkowa do 2 miejsc po przecinku
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c46:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000c8c <send_float+0x68>
 8000c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c5a:	ee17 3a90 	vmov	r3, s15
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24

	if (fractional_part < 0) {
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da02      	bge.n	8000c6c <send_float+0x48>
		fractional_part = -fractional_part; // Dla ujemnych wartości
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	425b      	negs	r3, r3
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	char buffer[20];
	sprintf(buffer, "%d.%02d", whole_part, fractional_part); // Formatowanie na część całkowitą i ułamkową
 8000c6c:	f107 000c 	add.w	r0, r7, #12
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	6a3a      	ldr	r2, [r7, #32]
 8000c74:	4906      	ldr	r1, [pc, #24]	; (8000c90 <send_float+0x6c>)
 8000c76:	f003 f8b5 	bl	8003de4 <siprintf>
	send_string(buffer); // Wywołanie send_string
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffba 	bl	8000bf8 <send_string>
}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	42c80000 	.word	0x42c80000
 8000c90:	0800474c 	.word	0x0800474c
 8000c94:	00000000 	.word	0x00000000

08000c98 <calculateDutyCycle>:
const float minDutyCycle = 16.0;
const float maxDutyCycle = 66.0;
const float warnDutyCycle = 80.0;

// x => speedKmh
void calculateDutyCycle(float x) {
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	ed87 0a01 	vstr	s0, [r7, #4]
	float dutyCycle = (-0.00000044 * (x * x * x * x * x))
 8000ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ca6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc2:	ee17 0a90 	vmov	r0, s15
 8000cc6:	f7ff fd71 	bl	80007ac <__aeabi_f2d>
 8000cca:	a362      	add	r3, pc, #392	; (adr r3, 8000e54 <calculateDutyCycle+0x1bc>)
 8000ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd0:	f7ff fade 	bl	8000290 <__aeabi_dmul>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4614      	mov	r4, r2
 8000cda:	461d      	mov	r5, r3
			- (0.000049 * (x * x * x * x)) + (0.00164 * (x * x * x))
 8000cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ce4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf4:	ee17 0a90 	vmov	r0, s15
 8000cf8:	f7ff fd58 	bl	80007ac <__aeabi_f2d>
 8000cfc:	a357      	add	r3, pc, #348	; (adr r3, 8000e5c <calculateDutyCycle+0x1c4>)
 8000cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d02:	f7ff fac5 	bl	8000290 <__aeabi_dmul>
 8000d06:	4602      	mov	r2, r0
 8000d08:	460b      	mov	r3, r1
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	4629      	mov	r1, r5
 8000d0e:	f7ff fbed 	bl	80004ec <__aeabi_dsub>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4614      	mov	r4, r2
 8000d18:	461d      	mov	r5, r3
 8000d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d1e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d2a:	ee17 0a90 	vmov	r0, s15
 8000d2e:	f7ff fd3d 	bl	80007ac <__aeabi_f2d>
 8000d32:	a34c      	add	r3, pc, #304	; (adr r3, 8000e64 <calculateDutyCycle+0x1cc>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff faaa 	bl	8000290 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4620      	mov	r0, r4
 8000d42:	4629      	mov	r1, r5
 8000d44:	f7ff fbd4 	bl	80004f0 <__adddf3>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4614      	mov	r4, r2
 8000d4e:	461d      	mov	r5, r3
			+ (0.0169 * (x * x)) + (1.1815 * x) + 18.912 + 3.5; // <- 1.5 for motor to spin 5% FASTER
 8000d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d58:	ee17 0a90 	vmov	r0, s15
 8000d5c:	f7ff fd26 	bl	80007ac <__aeabi_f2d>
 8000d60:	a342      	add	r3, pc, #264	; (adr r3, 8000e6c <calculateDutyCycle+0x1d4>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f7ff fa93 	bl	8000290 <__aeabi_dmul>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4620      	mov	r0, r4
 8000d70:	4629      	mov	r1, r5
 8000d72:	f7ff fbbd 	bl	80004f0 <__adddf3>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4614      	mov	r4, r2
 8000d7c:	461d      	mov	r5, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fd14 	bl	80007ac <__aeabi_f2d>
 8000d84:	a33b      	add	r3, pc, #236	; (adr r3, 8000e74 <calculateDutyCycle+0x1dc>)
 8000d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8a:	f7ff fa81 	bl	8000290 <__aeabi_dmul>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4620      	mov	r0, r4
 8000d94:	4629      	mov	r1, r5
 8000d96:	f7ff fbab 	bl	80004f0 <__adddf3>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	a336      	add	r3, pc, #216	; (adr r3, 8000e7c <calculateDutyCycle+0x1e4>)
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	f7ff fba2 	bl	80004f0 <__adddf3>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <calculateDutyCycle+0x1a8>)
 8000dba:	f7ff fb99 	bl	80004f0 <__adddf3>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
	float dutyCycle = (-0.00000044 * (x * x * x * x * x))
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f7ff fd49 	bl	800085c <__aeabi_d2f>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60fb      	str	r3, [r7, #12]
	if (dutyCycle <= minDutyCycle) {
 8000dce:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000dd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dde:	d804      	bhi.n	8000dea <calculateDutyCycle+0x152>
		targetDutyCycle = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <calculateDutyCycle+0x1ac>)
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
		targetDutyCycle = 0;
	} else if (dutyCycle > maxDutyCycle && dutyCycle < warnDutyCycle) {
		targetDutyCycle = maxDutyCycle;
	} else
		targetDutyCycle = dutyCycle;
}
 8000de8:	e026      	b.n	8000e38 <calculateDutyCycle+0x1a0>
	} else if (dutyCycle > warnDutyCycle) {
 8000dea:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000e48 <calculateDutyCycle+0x1b0>
 8000dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfa:	dd04      	ble.n	8000e06 <calculateDutyCycle+0x16e>
		targetDutyCycle = 0;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <calculateDutyCycle+0x1ac>)
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	e018      	b.n	8000e38 <calculateDutyCycle+0x1a0>
	} else if (dutyCycle > maxDutyCycle && dutyCycle < warnDutyCycle) {
 8000e06:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000e4c <calculateDutyCycle+0x1b4>
 8000e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e16:	dd0c      	ble.n	8000e32 <calculateDutyCycle+0x19a>
 8000e18:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000e48 <calculateDutyCycle+0x1b0>
 8000e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e28:	d503      	bpl.n	8000e32 <calculateDutyCycle+0x19a>
		targetDutyCycle = maxDutyCycle;
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <calculateDutyCycle+0x1b8>)
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <calculateDutyCycle+0x1ac>)
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	e002      	b.n	8000e38 <calculateDutyCycle+0x1a0>
		targetDutyCycle = dutyCycle;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <calculateDutyCycle+0x1ac>)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e40:	400c0000 	.word	0x400c0000
 8000e44:	20000120 	.word	0x20000120
 8000e48:	42a00000 	.word	0x42a00000
 8000e4c:	42840000 	.word	0x42840000
 8000e50:	42840000 	.word	0x42840000
 8000e54:	7702c0d0 	.word	0x7702c0d0
 8000e58:	be9d8724 	.word	0xbe9d8724
 8000e5c:	2e1693c0 	.word	0x2e1693c0
 8000e60:	3f09b0ab 	.word	0x3f09b0ab
 8000e64:	97635e74 	.word	0x97635e74
 8000e68:	3f5adea8 	.word	0x3f5adea8
 8000e6c:	cd35a858 	.word	0xcd35a858
 8000e70:	3f914e3b 	.word	0x3f914e3b
 8000e74:	8b439581 	.word	0x8b439581
 8000e78:	3ff2e76c 	.word	0x3ff2e76c
 8000e7c:	d4fdf3b6 	.word	0xd4fdf3b6
 8000e80:	4032e978 	.word	0x4032e978

08000e84 <updateDutyCycle>:

void updateDutyCycle(void) {
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	TIM1->CCR1 = targetDutyCycle;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <updateDutyCycle+0x20>)
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <updateDutyCycle+0x24>)
 8000e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e94:	ee17 2a90 	vmov	r2, s15
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000120 	.word	0x20000120
 8000ea8:	40010000 	.word	0x40010000

08000eac <resetPas>:

void resetPas(int inactive) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	lastPasResetTick = HAL_GetTick();
 8000eb4:	f000 fda8 	bl	8001a08 <HAL_GetTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <resetPas+0x50>)
 8000ebe:	601a      	str	r2, [r3, #0]

	if (inactive) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00f      	beq.n	8000ee6 <resetPas+0x3a>
		pasActive = 0;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <resetPas+0x54>)
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
		targetDutyCycle = 0.0;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <resetPas+0x58>)
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
		vWheel = 0.0;  // Reset vWheel only if the bike is inactive
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <resetPas+0x5c>)
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
		TIM1->CCR1 = 0;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <resetPas+0x60>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		pasActive = 1;
		pasCounter = 0;
	}
}
 8000ee4:	e006      	b.n	8000ef4 <resetPas+0x48>
		pasActive = 1;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <resetPas+0x54>)
 8000ee8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000eec:	601a      	str	r2, [r3, #0]
		pasCounter = 0;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <resetPas+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000010c 	.word	0x2000010c
 8000f00:	2000011c 	.word	0x2000011c
 8000f04:	20000120 	.word	0x20000120
 8000f08:	20000118 	.word	0x20000118
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	20000108 	.word	0x20000108

08000f14 <logDebugDegrees>:

void logDebugDegrees(float timeS) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	ed87 0a01 	vstr	s0, [r7, #4]
	send_string("[DEBUG]: 30 stopni!\r\nczas: ");
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <logDebugDegrees+0x28>)
 8000f20:	f7ff fe6a 	bl	8000bf8 <send_string>

	send_float(timeS);
 8000f24:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f28:	f7ff fe7c 	bl	8000c24 <send_float>
	send_string("sekund\r\n");
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <logDebugDegrees+0x2c>)
 8000f2e:	f7ff fe63 	bl	8000bf8 <send_string>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	08004754 	.word	0x08004754
 8000f40:	08004770 	.word	0x08004770
 8000f44:	00000000 	.word	0x00000000

08000f48 <logDebugVWheel>:

void logDebugVWheel() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	send_string("vWheel: ");
 8000f4c:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <logDebugVWheel+0x60>)
 8000f4e:	f7ff fe53 	bl	8000bf8 <send_string>
	send_float(vWheel);
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <logDebugVWheel+0x64>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5c:	f7ff fe62 	bl	8000c24 <send_float>
	send_string(" [m/s] ");
 8000f60:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <logDebugVWheel+0x68>)
 8000f62:	f7ff fe49 	bl	8000bf8 <send_string>
	send_float(vWheel * 3.6);
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <logDebugVWheel+0x64>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fc1e 	bl	80007ac <__aeabi_f2d>
 8000f70:	a30b      	add	r3, pc, #44	; (adr r3, 8000fa0 <logDebugVWheel+0x58>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff f98b 	bl	8000290 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fc6b 	bl	800085c <__aeabi_d2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	ee00 3a10 	vmov	s0, r3
 8000f8c:	f7ff fe4a 	bl	8000c24 <send_float>
	send_string(" [km/h] \r\n");
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <logDebugVWheel+0x6c>)
 8000f92:	f7ff fe31 	bl	8000bf8 <send_string>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	cccccccd 	.word	0xcccccccd
 8000fa4:	400ccccc 	.word	0x400ccccc
 8000fa8:	0800477c 	.word	0x0800477c
 8000fac:	20000118 	.word	0x20000118
 8000fb0:	08004788 	.word	0x08004788
 8000fb4:	08004790 	.word	0x08004790

08000fb8 <logDebugDutyCycle>:

void logDebugDutyCycle() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	send_string("dutyCycle: ");
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <logDebugDutyCycle+0x3c>)
 8000fbe:	f7ff fe1b 	bl	8000bf8 <send_string>
	send_float(targetDutyCycle);
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <logDebugDutyCycle+0x40>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	f7ff fe2a 	bl	8000c24 <send_float>
	send_string(" [%] \r\n");
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <logDebugDutyCycle+0x44>)
 8000fd2:	f7ff fe11 	bl	8000bf8 <send_string>
	send_string("targetDutyCycle: ");
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <logDebugDutyCycle+0x48>)
 8000fd8:	f7ff fe0e 	bl	8000bf8 <send_string>
	send_float(targetDutyCycle);
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <logDebugDutyCycle+0x40>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	f7ff fe1d 	bl	8000c24 <send_float>
	send_string(" [%] \r\n");
 8000fea:	4804      	ldr	r0, [pc, #16]	; (8000ffc <logDebugDutyCycle+0x44>)
 8000fec:	f7ff fe04 	bl	8000bf8 <send_string>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0800479c 	.word	0x0800479c
 8000ff8:	20000120 	.word	0x20000120
 8000ffc:	080047a8 	.word	0x080047a8
 8001000:	080047b0 	.word	0x080047b0

08001004 <startupAnim>:

void startupAnim() {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<4; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	e014      	b.n	800103a <startupAnim+0x36>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	482d      	ldr	r0, [pc, #180]	; (80010cc <startupAnim+0xc8>)
 8001018:	f000 ffd4 	bl	8001fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800101c:	2032      	movs	r0, #50	; 0x32
 800101e:	f000 fcff 	bl	8001a20 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	4828      	ldr	r0, [pc, #160]	; (80010cc <startupAnim+0xc8>)
 800102a:	f000 ffcb 	bl	8001fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800102e:	2032      	movs	r0, #50	; 0x32
 8001030:	f000 fcf6 	bl	8001a20 <HAL_Delay>
	for(uint8_t i = 0; i<4; i++) {
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	3301      	adds	r3, #1
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d9e7      	bls.n	8001010 <startupAnim+0xc>
	}

	HAL_Delay(200);
 8001040:	20c8      	movs	r0, #200	; 0xc8
 8001042:	f000 fced 	bl	8001a20 <HAL_Delay>

	for(uint8_t i = 0; i<4; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	71bb      	strb	r3, [r7, #6]
 800104a:	e014      	b.n	8001076 <startupAnim+0x72>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	481e      	ldr	r0, [pc, #120]	; (80010cc <startupAnim+0xc8>)
 8001054:	f000 ffb6 	bl	8001fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f000 fce1 	bl	8001a20 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <startupAnim+0xc8>)
 8001066:	f000 ffad 	bl	8001fc4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800106a:	2032      	movs	r0, #50	; 0x32
 800106c:	f000 fcd8 	bl	8001a20 <HAL_Delay>
	for(uint8_t i = 0; i<4; i++) {
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	3301      	adds	r3, #1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d9e7      	bls.n	800104c <startupAnim+0x48>
	}

	HAL_Delay(200);
 800107c:	20c8      	movs	r0, #200	; 0xc8
 800107e:	f000 fccf 	bl	8001a20 <HAL_Delay>

	for(uint8_t i = 0; i<2; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	e014      	b.n	80010b2 <startupAnim+0xae>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <startupAnim+0xc8>)
 8001090:	f000 ff98 	bl	8001fc4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001094:	20c8      	movs	r0, #200	; 0xc8
 8001096:	f000 fcc3 	bl	8001a20 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <startupAnim+0xc8>)
 80010a2:	f000 ff8f 	bl	8001fc4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80010a6:	20c8      	movs	r0, #200	; 0xc8
 80010a8:	f000 fcba 	bl	8001a20 <HAL_Delay>
	for(uint8_t i = 0; i<2; i++) {
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	3301      	adds	r3, #1
 80010b0:	717b      	strb	r3, [r7, #5]
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d9e7      	bls.n	8001088 <startupAnim+0x84>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <startupAnim+0xc8>)
 80010c0:	f000 ff80 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020800 	.word	0x40020800

080010d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2b20      	cmp	r3, #32
 80010de:	d105      	bne.n	80010ec <HAL_GPIO_EXTI_Callback+0x1c>

		pasCounter++;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80010ea:	701a      	strb	r2, [r3, #0]

		// lub od razu liczymy omege, ale pamietajmy o tym, by byly co najmniej 2 cykle
		// od jakichs 5 sekund, jak w ciagu 5 sekund nie ma interrupta, resetujemy wszystki i czekamy na 2 w counterze
	}
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000108 	.word	0x20000108
 80010fc:	00000000 	.word	0x00000000

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f000 fc19 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f8e3 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 fa15 	bl	800153c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001112:	f000 f9e9 	bl	80014e8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001116:	f000 f947 	bl	80013a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// inicjalizacja milis
	lastPasResetTick = HAL_GetTick();
 800111a:	f000 fc75 	bl	8001a08 <HAL_GetTick>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <main+0x1a0>)
 8001124:	601a      	str	r2, [r3, #0]

	// inicjalizacja PWM
	TIM1->CCR1 = targetDutyCycle;
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <main+0x1a4>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <main+0x1a8>)
 800112e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001132:	ee17 2a90 	vmov	r2, s15
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001138:	2100      	movs	r1, #0
 800113a:	485c      	ldr	r0, [pc, #368]	; (80012ac <main+0x1ac>)
 800113c:	f001 fc74 	bl	8002a28 <HAL_TIM_PWM_Start>

	startupAnim();
 8001140:	f7ff ff60 	bl	8001004 <startupAnim>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2108      	movs	r1, #8
 8001148:	4859      	ldr	r0, [pc, #356]	; (80012b0 <main+0x1b0>)
 800114a:	f000 ff3b 	bl	8001fc4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1) {
 800114e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001152:	4857      	ldr	r0, [pc, #348]	; (80012b0 <main+0x1b0>)
 8001154:	f000 ff1e 	bl	8001f94 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d105      	bne.n	800116a <main+0x6a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	2108      	movs	r1, #8
 8001162:	4853      	ldr	r0, [pc, #332]	; (80012b0 <main+0x1b0>)
 8001164:	f000 ff2e 	bl	8001fc4 <HAL_GPIO_WritePin>
			continue;
 8001168:	e093      	b.n	8001292 <main+0x192>
		}
		else
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2108      	movs	r1, #8
 800116e:	4850      	ldr	r0, [pc, #320]	; (80012b0 <main+0x1b0>)
 8001170:	f000 ff28 	bl	8001fc4 <HAL_GPIO_WritePin>

		int currTick = HAL_GetTick();
 8001174:	f000 fc48 	bl	8001a08 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	607b      	str	r3, [r7, #4]
		float timeS = ((float) currTick - (float) lastPasResetTick) / 1000.0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <main+0x1a0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001196:	eddf 6a47 	vldr	s13, [pc, #284]	; 80012b4 <main+0x1b4>
 800119a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119e:	edc7 7a00 	vstr	s15, [r7]

		if (pasCounter >= 1) {
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <main+0x1b8>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d055      	beq.n	8001256 <main+0x156>

//			 If bike is stationary, wait for 5 PAS counts before updating
			if (vWheel == 0.0 && pasCounter < 5) {
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <main+0x1bc>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	d10e      	bne.n	80011d8 <main+0xd8>
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <main+0x1b8>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d80a      	bhi.n	80011d8 <main+0xd8>
				if(pasCounter < 4) lastPasResetTick = HAL_GetTick();
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <main+0x1b8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d862      	bhi.n	8001290 <main+0x190>
 80011ca:	f000 fc1d 	bl	8001a08 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <main+0x1a0>)
 80011d4:	601a      	str	r2, [r3, #0]
				continue;
 80011d6:	e05b      	b.n	8001290 <main+0x190>
			}

			logDebugDegrees(timeS);  // 30 stopni!
 80011d8:	ed97 0a00 	vldr	s0, [r7]
 80011dc:	f7ff fe9a 	bl	8000f14 <logDebugDegrees>

			omegaPedals = pasMagnetAngle / timeS;
 80011e0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80012c0 <main+0x1c0>
 80011e4:	ed97 7a00 	vldr	s14, [r7]
 80011e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <main+0x1c4>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
			omegaWheel = omegaPedals * pedalGearRatio;
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <main+0x1c4>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	eeb0 7a07 	vmov.f32	s14, #7	; 0x40380000  2.875
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <main+0x1c8>)
 8001202:	edc3 7a00 	vstr	s15, [r3]

			vWheel = omegaWheel * rWheel;
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <main+0x1c8>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <main+0x1bc>)
 8001216:	edc3 7a00 	vstr	s15, [r3]
			logDebugVWheel();
 800121a:	f7ff fe95 	bl	8000f48 <logDebugVWheel>

			// Duty cycle calc
			calculateDutyCycle(vWheel * 3.6);
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <main+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fac2 	bl	80007ac <__aeabi_f2d>
 8001228:	a31b      	add	r3, pc, #108	; (adr r3, 8001298 <main+0x198>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f82f 	bl	8000290 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fb0f 	bl	800085c <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	ee00 3a10 	vmov	s0, r3
 8001244:	f7ff fd28 	bl	8000c98 <calculateDutyCycle>
			updateDutyCycle();
 8001248:	f7ff fe1c 	bl	8000e84 <updateDutyCycle>
			logDebugDutyCycle();
 800124c:	f7ff feb4 	bl	8000fb8 <logDebugDutyCycle>

			resetPas(0);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fe2b 	bl	8000eac <resetPas>
		}
		if (timeS > 0.75 && pasActive) {
 8001256:	edd7 7a00 	vldr	s15, [r7]
 800125a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dd14      	ble.n	8001292 <main+0x192>
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <main+0x1cc>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	f43f af6a 	beq.w	800114e <main+0x4e>
			send_string("[DEBUG]: ---- INACTIVE ----\r\n");
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <main+0x1d0>)
 800127c:	f7ff fcbc 	bl	8000bf8 <send_string>
			vWheel = 0.0;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <main+0x1bc>)
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
			resetPas(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fe0f 	bl	8000eac <resetPas>
 800128e:	e75e      	b.n	800114e <main+0x4e>
				continue;
 8001290:	bf00      	nop
	while (1) {
 8001292:	e75c      	b.n	800114e <main+0x4e>
 8001294:	f3af 8000 	nop.w
 8001298:	cccccccd 	.word	0xcccccccd
 800129c:	400ccccc 	.word	0x400ccccc
 80012a0:	2000010c 	.word	0x2000010c
 80012a4:	20000120 	.word	0x20000120
 80012a8:	40010000 	.word	0x40010000
 80012ac:	20000078 	.word	0x20000078
 80012b0:	40020400 	.word	0x40020400
 80012b4:	447a0000 	.word	0x447a0000
 80012b8:	20000108 	.word	0x20000108
 80012bc:	20000118 	.word	0x20000118
 80012c0:	3f060a90 	.word	0x3f060a90
 80012c4:	20000110 	.word	0x20000110
 80012c8:	20000114 	.word	0x20000114
 80012cc:	2000011c 	.word	0x2000011c
 80012d0:	080047c4 	.word	0x080047c4

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	; 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2230      	movs	r2, #48	; 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fd9e 	bl	8003e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <SystemClock_Config+0xcc>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <SystemClock_Config+0xcc>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <SystemClock_Config+0xd0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <SystemClock_Config+0xd0>)
 8001322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001334:	2302      	movs	r3, #2
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	2302      	movs	r3, #2
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001348:	2308      	movs	r3, #8
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800134c:	2348      	movs	r3, #72	; 0x48
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001354:	2304      	movs	r3, #4
 8001356:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fe63 	bl	8002028 <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001368:	f000 f972 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136c:	230f      	movs	r3, #15
 800136e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001370:	2302      	movs	r3, #2
 8001372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2102      	movs	r1, #2
 8001388:	4618      	mov	r0, r3
 800138a:	f001 f8c5 	bl	8002518 <HAL_RCC_ClockConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001394:	f000 f95c 	bl	8001650 <Error_Handler>
  }
}
 8001398:	bf00      	nop
 800139a:	3750      	adds	r7, #80	; 0x50
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b096      	sub	sp, #88	; 0x58
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2220      	movs	r2, #32
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fd1f 	bl	8003e24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013e8:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <MX_TIM1_Init+0x13c>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80013ec:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013ee:	2247      	movs	r2, #71	; 0x47
 80013f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013fa:	2263      	movs	r2, #99	; 0x63
 80013fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <MX_TIM1_Init+0x138>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001410:	4833      	ldr	r0, [pc, #204]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001412:	f001 fa61 	bl	80028d8 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800141c:	f000 f918 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142a:	4619      	mov	r1, r3
 800142c:	482c      	ldr	r0, [pc, #176]	; (80014e0 <MX_TIM1_Init+0x138>)
 800142e:	f001 fc6d 	bl	8002d0c <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001438:	f000 f90a 	bl	8001650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143c:	4828      	ldr	r0, [pc, #160]	; (80014e0 <MX_TIM1_Init+0x138>)
 800143e:	f001 fa9a 	bl	8002976 <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001448:	f000 f902 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001458:	4619      	mov	r1, r3
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <MX_TIM1_Init+0x138>)
 800145c:	f001 fff6 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001466:	f000 f8f3 	bl	8001650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	; 0x60
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001490:	f001 fb7a 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800149a:	f000 f8d9 	bl	8001650 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <MX_TIM1_Init+0x138>)
 80014c2:	f002 f831 	bl	8003528 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014cc:	f000 f8c0 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MX_TIM1_Init+0x138>)
 80014d2:	f000 f90d 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3758      	adds	r7, #88	; 0x58
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000078 	.word	0x20000078
 80014e4:	40010000 	.word	0x40010000

080014e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_USART1_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001520:	f002 f854 	bl	80035cc <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f891 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000c0 	.word	0x200000c0
 8001538:	40011000 	.word	0x40011000

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <MX_GPIO_Init+0x108>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <MX_GPIO_Init+0x108>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <MX_GPIO_Init+0x108>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <MX_GPIO_Init+0x108>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <MX_GPIO_Init+0x108>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_GPIO_Init+0x108>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <MX_GPIO_Init+0x108>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <MX_GPIO_Init+0x108>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_GPIO_Init+0x108>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REAR_FRONT_LEDS_GPIO_Port, REAR_FRONT_LEDS_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ac:	4826      	ldr	r0, [pc, #152]	; (8001648 <MX_GPIO_Init+0x10c>)
 80015ae:	f000 fd09 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(THR_DIS_GPIO_Port, THR_DIS_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2108      	movs	r1, #8
 80015b6:	4825      	ldr	r0, [pc, #148]	; (800164c <MX_GPIO_Init+0x110>)
 80015b8:	f000 fd04 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REAR_FRONT_LEDS_Pin */
  GPIO_InitStruct.Pin = REAR_FRONT_LEDS_Pin;
 80015bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REAR_FRONT_LEDS_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	481c      	ldr	r0, [pc, #112]	; (8001648 <MX_GPIO_Init+0x10c>)
 80015d6:	f000 fb59 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : THR_SWITCH_Pin */
  GPIO_InitStruct.Pin = THR_SWITCH_Pin;
 80015da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(THR_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	4817      	ldr	r0, [pc, #92]	; (800164c <MX_GPIO_Init+0x110>)
 80015f0:	f000 fb4c 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : THR_DIS_Pin */
  GPIO_InitStruct.Pin = THR_DIS_Pin;
 80015f4:	2308      	movs	r3, #8
 80015f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(THR_DIS_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <MX_GPIO_Init+0x110>)
 800160c:	f000 fb3e 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PAS_SIGNAL_Pin */
  GPIO_InitStruct.Pin = PAS_SIGNAL_Pin;
 8001610:	2320      	movs	r3, #32
 8001612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001614:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800161a:	2302      	movs	r3, #2
 800161c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PAS_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <MX_GPIO_Init+0x110>)
 8001626:	f000 fb31 	bl	8001c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2017      	movs	r0, #23
 8001630:	f000 faf5 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001634:	2017      	movs	r0, #23
 8001636:	f000 fb0e 	bl	8001c56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40020800 	.word	0x40020800
 800164c:	40020400 	.word	0x40020400

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_MspInit+0x4c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_TIM_Base_MspInit+0x3c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10d      	bne.n	80016da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_TIM_Base_MspInit+0x40>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_TIM_Base_MspInit+0x40>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_TIM_Base_MspInit+0x40>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <HAL_TIM_MspPostInit+0x68>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d11e      	bne.n	8001750 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_TIM_MspPostInit+0x6c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_TIM_MspPostInit+0x6c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_TIM_MspPostInit+0x6c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = OUT_PWM_Pin;
 800172e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001732:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001738:	2302      	movs	r3, #2
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001740:	2301      	movs	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_TIM_MspPostInit+0x70>)
 800174c:	f000 fa9e 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40010000 	.word	0x40010000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0x84>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12c      	bne.n	80017e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_UART_MspInit+0x88>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_UART_MspInit+0x88>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_UART_MspInit+0x88>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d0:	2307      	movs	r3, #7
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_UART_MspInit+0x8c>)
 80017dc:	f000 fa56 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 f8ce 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PAS_SIGNAL_Pin);
 800184c:	2020      	movs	r0, #32
 800184e:	f000 fbd3 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f002 fad4 	bl	8003e34 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20010000 	.word	0x20010000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000124 	.word	0x20000124
 80018c0:	20000278 	.word	0x20000278

080018c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018ec:	f7ff ffea 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	; (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f002 fa93 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fbf1 	bl	8001100 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800192c:	08004840 	.word	0x08004840
  ldr r2, =_sbss
 8001930:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001934:	20000274 	.word	0x20000274

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f94f 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fe74 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f967 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019bc:	f000 f92f 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000128 	.word	0x20000128

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000128 	.word	0x20000128

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e159      	b.n	8001f5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8148 	bne.w	8001f56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d005      	beq.n	8001cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d130      	bne.n	8001d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0201 	and.w	r2, r3, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d017      	beq.n	8001d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80a2 	beq.w	8001f56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_GPIO_Init+0x2e8>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <HAL_GPIO_Init+0x2e8>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <HAL_GPIO_Init+0x2e8>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_GPIO_Init+0x2ec>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a49      	ldr	r2, [pc, #292]	; (8001f7c <HAL_GPIO_Init+0x2f0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x202>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a48      	ldr	r2, [pc, #288]	; (8001f80 <HAL_GPIO_Init+0x2f4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x1fe>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a47      	ldr	r2, [pc, #284]	; (8001f84 <HAL_GPIO_Init+0x2f8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x1fa>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a46      	ldr	r2, [pc, #280]	; (8001f88 <HAL_GPIO_Init+0x2fc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x1f6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a45      	ldr	r2, [pc, #276]	; (8001f8c <HAL_GPIO_Init+0x300>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x1f2>
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x204>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea0:	4935      	ldr	r1, [pc, #212]	; (8001f78 <HAL_GPIO_Init+0x2ec>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f02:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f26:	4a1a      	ldr	r2, [pc, #104]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f67f aea2 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e001      	b.n	8001fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f85a 	bl	80010d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e267      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00c      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b85      	ldr	r3, [pc, #532]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800205a:	2b08      	cmp	r3, #8
 800205c:	d112      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b82      	ldr	r3, [pc, #520]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b7e      	ldr	r3, [pc, #504]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d157      	bne.n	8002130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e242      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6f      	ldr	r2, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6c      	ldr	r2, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b69      	ldr	r3, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fc92 	bl	8001a08 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fc8e 	bl	8001a08 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e207      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc7e 	bl	8001a08 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fc7a 	bl	8001a08 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1f3      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0xe8>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b44      	ldr	r3, [pc, #272]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x244>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7ff fc33 	bl	8001a08 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a6:	f7ff fc2f 	bl	8001a08 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1a8      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4925      	ldr	r1, [pc, #148]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x244>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff fc12 	bl	8001a08 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7ff fc0e 	bl	8001a08 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e187      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d036      	beq.n	8002280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff fbf2 	bl	8001a08 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fbee 	bl	8001a08 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e167      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7ff fbdb 	bl	8001a08 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	e00e      	b.n	8002274 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7ff fbd7 	bl	8001a08 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d907      	bls.n	8002274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e150      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ea      	bne.n	8002256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8097 	beq.w	80023bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b81      	ldr	r3, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b77      	ldr	r3, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b74      	ldr	r3, [pc, #464]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7ff fb97 	bl	8001a08 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7ff fb93 	bl	8001a08 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e10c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x2ea>
 8002304:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x30c>
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7ff fb58 	bl	8001a08 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7ff fb54 	bl	8001a08 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0cb      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <HAL_RCC_OscConfig+0x334>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff fb42 	bl	8001a08 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7ff fb3e 	bl	8001a08 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0b5      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a1 	beq.w	8002508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d05c      	beq.n	800248c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d141      	bne.n	800245e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fb12 	bl	8001a08 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fb0e 	bl	8001a08 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e087      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7ff fae7 	bl	8001a08 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff fae3 	bl	8001a08 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e05c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x416>
 800245c:	e054      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fad0 	bl	8001a08 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff facc 	bl	8001a08 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e038      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x4ec>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d121      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7ff f9fe 	bl	8001a08 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7ff f9fa 	bl	8001a08 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f95e 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	080047e4 	.word	0x080047e4
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e8:	b090      	sub	sp, #64	; 0x40
 80026ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d00d      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x40>
 8002708:	2b08      	cmp	r3, #8
 800270a:	f200 80a1 	bhi.w	8002850 <HAL_RCC_GetSysClockFreq+0x16c>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x34>
 8002712:	2b04      	cmp	r3, #4
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x3a>
 8002716:	e09b      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_GetSysClockFreq+0x184>)
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800271c:	e09b      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271e:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002722:	e098      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272e:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	627a      	str	r2, [r7, #36]	; 0x24
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800274c:	2100      	movs	r1, #0
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 8002750:	fb03 f201 	mul.w	r2, r3, r1
 8002754:	2300      	movs	r3, #0
 8002756:	fb00 f303 	mul.w	r3, r0, r3
 800275a:	4413      	add	r3, r2
 800275c:	4a43      	ldr	r2, [pc, #268]	; (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 800275e:	fba0 1202 	umull	r1, r2, r0, r2
 8002762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002764:	460a      	mov	r2, r1
 8002766:	62ba      	str	r2, [r7, #40]	; 0x28
 8002768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276a:	4413      	add	r3, r2
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	2200      	movs	r2, #0
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	61fa      	str	r2, [r7, #28]
 8002776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800277e:	f7fe f8bd 	bl	80008fc <__aeabi_uldivmod>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4613      	mov	r3, r2
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278a:	e053      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	2200      	movs	r2, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	617a      	str	r2, [r7, #20]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800279e:	f04f 0b00 	mov.w	fp, #0
 80027a2:	4652      	mov	r2, sl
 80027a4:	465b      	mov	r3, fp
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	0159      	lsls	r1, r3, #5
 80027b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b4:	0150      	lsls	r0, r2, #5
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ebb2 080a 	subs.w	r8, r2, sl
 80027be:	eb63 090b 	sbc.w	r9, r3, fp
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027d6:	ebb2 0408 	subs.w	r4, r2, r8
 80027da:	eb63 0509 	sbc.w	r5, r3, r9
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	00eb      	lsls	r3, r5, #3
 80027e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ec:	00e2      	lsls	r2, r4, #3
 80027ee:	4614      	mov	r4, r2
 80027f0:	461d      	mov	r5, r3
 80027f2:	eb14 030a 	adds.w	r3, r4, sl
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	eb45 030b 	adc.w	r3, r5, fp
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280a:	4629      	mov	r1, r5
 800280c:	028b      	lsls	r3, r1, #10
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002814:	4621      	mov	r1, r4
 8002816:	028a      	lsls	r2, r1, #10
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	2200      	movs	r2, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	60fa      	str	r2, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	f7fe f868 	bl	80008fc <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetSysClockFreq+0x184>)
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002858:	4618      	mov	r0, r3
 800285a:	3740      	adds	r7, #64	; 0x40
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400
 800286c:	017d7840 	.word	0x017d7840

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_GetHCLKFreq+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800288c:	f7ff fff0 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	080047f4 	.word	0x080047f4

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b4:	f7ff ffdc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0b5b      	lsrs	r3, r3, #13
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	080047f4 	.word	0x080047f4

080028d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e041      	b.n	800296e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fed4 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f000 fac0 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e041      	b.n	8002a0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f839 	bl	8002a14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f000 fa71 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <HAL_TIM_PWM_Start+0x24>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e022      	b.n	8002a92 <HAL_TIM_PWM_Start+0x6a>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d109      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x3e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	bf14      	ite	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	2300      	moveq	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	e015      	b.n	8002a92 <HAL_TIM_PWM_Start+0x6a>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d109      	bne.n	8002a80 <HAL_TIM_PWM_Start+0x58>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e008      	b.n	8002a92 <HAL_TIM_PWM_Start+0x6a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e068      	b.n	8002b6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x82>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa8:	e013      	b.n	8002ad2 <HAL_TIM_PWM_Start+0xaa>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0x92>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	e00b      	b.n	8002ad2 <HAL_TIM_PWM_Start+0xaa>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Start+0xa2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac8:	e003      	b.n	8002ad2 <HAL_TIM_PWM_Start+0xaa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fc90 	bl	8003400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	; (8002b74 <HAL_TIM_PWM_Start+0x14c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d107      	bne.n	8002afa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_TIM_PWM_Start+0x14c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d018      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x10e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d013      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x10e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_TIM_PWM_Start+0x150>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x10e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_TIM_PWM_Start+0x154>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x10e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_TIM_PWM_Start+0x158>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x10e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <HAL_TIM_PWM_Start+0x15c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d111      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d010      	beq.n	8002b6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b58:	e007      	b.n	8002b6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	40000c00 	.word	0x40000c00
 8002b84:	40014000 	.word	0x40014000

08002b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0ae      	b.n	8002d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	f200 809f 	bhi.w	8002cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bf1 	.word	0x08002bf1
 8002bc0:	08002cf5 	.word	0x08002cf5
 8002bc4:	08002cf5 	.word	0x08002cf5
 8002bc8:	08002cf5 	.word	0x08002cf5
 8002bcc:	08002c31 	.word	0x08002c31
 8002bd0:	08002cf5 	.word	0x08002cf5
 8002bd4:	08002cf5 	.word	0x08002cf5
 8002bd8:	08002cf5 	.word	0x08002cf5
 8002bdc:	08002c73 	.word	0x08002c73
 8002be0:	08002cf5 	.word	0x08002cf5
 8002be4:	08002cf5 	.word	0x08002cf5
 8002be8:	08002cf5 	.word	0x08002cf5
 8002bec:	08002cb3 	.word	0x08002cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f9dc 	bl	8002fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0208 	orr.w	r2, r2, #8
 8002c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0204 	bic.w	r2, r2, #4
 8002c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6999      	ldr	r1, [r3, #24]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	619a      	str	r2, [r3, #24]
      break;
 8002c2e:	e064      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fa22 	bl	8003080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6999      	ldr	r1, [r3, #24]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	021a      	lsls	r2, r3, #8
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]
      break;
 8002c70:	e043      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fa6d 	bl	8003158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0208 	orr.w	r2, r2, #8
 8002c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0204 	bic.w	r2, r2, #4
 8002c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69d9      	ldr	r1, [r3, #28]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	61da      	str	r2, [r3, #28]
      break;
 8002cb0:	e023      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fab7 	bl	800322c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69d9      	ldr	r1, [r3, #28]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	021a      	lsls	r2, r3, #8
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	61da      	str	r2, [r3, #28]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_TIM_ConfigClockSource+0x1c>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e0b4      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x186>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d60:	d03e      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0xd4>
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	f200 8087 	bhi.w	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6e:	f000 8086 	beq.w	8002e7e <HAL_TIM_ConfigClockSource+0x172>
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	d87f      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b70      	cmp	r3, #112	; 0x70
 8002d7a:	d01a      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0xa6>
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d87b      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b60      	cmp	r3, #96	; 0x60
 8002d82:	d050      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x11a>
 8002d84:	2b60      	cmp	r3, #96	; 0x60
 8002d86:	d877      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b50      	cmp	r3, #80	; 0x50
 8002d8a:	d03c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0xfa>
 8002d8c:	2b50      	cmp	r3, #80	; 0x50
 8002d8e:	d873      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d058      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x13a>
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d86f      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b30      	cmp	r3, #48	; 0x30
 8002d9a:	d064      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	2b30      	cmp	r3, #48	; 0x30
 8002d9e:	d86b      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d060      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x15a>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d867      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05c      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x15a>
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d05a      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	e062      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc2:	f000 fafd 	bl	80033c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	609a      	str	r2, [r3, #8]
      break;
 8002dde:	e04f      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002df0:	f000 fae6 	bl	80033c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e02:	609a      	str	r2, [r3, #8]
      break;
 8002e04:	e03c      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 fa5a 	bl	80032cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2150      	movs	r1, #80	; 0x50
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fab3 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002e24:	e02c      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 fa79 	bl	800332a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2160      	movs	r1, #96	; 0x60
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 faa3 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002e44:	e01c      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 fa3a 	bl	80032cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2140      	movs	r1, #64	; 0x40
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fa93 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002e64:	e00c      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f000 fa8a 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8002e76:	e003      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e000      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3a      	ldr	r2, [pc, #232]	; (8002f98 <TIM_Base_SetConfig+0xfc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00f      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d00b      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a37      	ldr	r2, [pc, #220]	; (8002f9c <TIM_Base_SetConfig+0x100>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d007      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <TIM_Base_SetConfig+0x104>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_Base_SetConfig+0x38>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <TIM_Base_SetConfig+0x108>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d108      	bne.n	8002ee6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	; (8002f98 <TIM_Base_SetConfig+0xfc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01b      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d017      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <TIM_Base_SetConfig+0x100>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <TIM_Base_SetConfig+0x104>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00f      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <TIM_Base_SetConfig+0x108>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <TIM_Base_SetConfig+0x10c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a24      	ldr	r2, [pc, #144]	; (8002fac <TIM_Base_SetConfig+0x110>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0x8a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <TIM_Base_SetConfig+0x114>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <TIM_Base_SetConfig+0xfc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	611a      	str	r2, [r3, #16]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800

08002fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 0201 	bic.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f023 0302 	bic.w	r3, r3, #2
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <TIM_OC1_SetConfig+0xc8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10c      	bne.n	800302a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f023 0308 	bic.w	r3, r3, #8
 8003016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a13      	ldr	r2, [pc, #76]	; (800307c <TIM_OC1_SetConfig+0xc8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d111      	bne.n	8003056 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	621a      	str	r2, [r3, #32]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40010000 	.word	0x40010000

08003080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f023 0210 	bic.w	r2, r3, #16
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0320 	bic.w	r3, r3, #32
 80030ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <TIM_OC2_SetConfig+0xd4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10d      	bne.n	80030fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a15      	ldr	r2, [pc, #84]	; (8003154 <TIM_OC2_SetConfig+0xd4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d113      	bne.n	800312c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800310a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40010000 	.word	0x40010000

08003158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <TIM_OC3_SetConfig+0xd0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10d      	bne.n	80031d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <TIM_OC3_SetConfig+0xd0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d113      	bne.n	8003202 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40010000 	.word	0x40010000

0800322c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	031b      	lsls	r3, r3, #12
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <TIM_OC4_SetConfig+0x9c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d109      	bne.n	80032a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000

080032cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f023 0201 	bic.w	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f023 030a 	bic.w	r3, r3, #10
 8003308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332a:	b480      	push	{r7}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f023 0210 	bic.w	r2, r3, #16
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	031b      	lsls	r3, r3, #12
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003366:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f043 0307 	orr.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	609a      	str	r2, [r3, #8]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2201      	movs	r2, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e050      	b.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d013      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10c      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40000c00 	.word	0x40000c00
 8003524:	40014000 	.word	0x40014000

08003528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003540:	2302      	movs	r3, #2
 8003542:	e03d      	b.n	80035c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e042      	b.n	8003664 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe f8b6 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800360e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f973 	bl	80038fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b20      	cmp	r3, #32
 800368a:	d175      	bne.n	8003778 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_UART_Transmit+0x2c>
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e06e      	b.n	800377a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036aa:	f7fe f9ad 	bl	8001a08 <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d108      	bne.n	80036d8 <HAL_UART_Transmit+0x6c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e003      	b.n	80036e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036e0:	e02e      	b.n	8003740 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f848 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e03a      	b.n	800377a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	3302      	adds	r3, #2
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e007      	b.n	8003732 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3301      	adds	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1cb      	bne.n	80036e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f814 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e006      	b.n	800377a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	e03b      	b.n	800380c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379a:	d037      	beq.n	800380c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379c:	f7fe f934 	bl	8001a08 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	6a3a      	ldr	r2, [r7, #32]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d302      	bcc.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e03a      	b.n	800382c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d023      	beq.n	800380c <UART_WaitOnFlagUntilTimeout+0x8a>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d020      	beq.n	800380c <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d01d      	beq.n	800380c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d116      	bne.n	800380c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f81d 	bl	8003834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2208      	movs	r2, #8
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e00f      	b.n	800382c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	429a      	cmp	r2, r3
 8003828:	d0b4      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b095      	sub	sp, #84	; 0x54
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800385c:	643a      	str	r2, [r7, #64]	; 0x40
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e5      	bne.n	800383c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d119      	bne.n	80038e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f023 0310 	bic.w	r3, r3, #16
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038cc:	61ba      	str	r2, [r7, #24]
 80038ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	613b      	str	r3, [r7, #16]
   return(result);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038ee:	bf00      	nop
 80038f0:	3754      	adds	r7, #84	; 0x54
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b0c0      	sub	sp, #256	; 0x100
 8003902:	af00      	add	r7, sp, #0
 8003904:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	ea40 0301 	orr.w	r3, r0, r1
 8003924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	431a      	orrs	r2, r3
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003954:	f021 010c 	bic.w	r1, r1, #12
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003962:	430b      	orrs	r3, r1
 8003964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	6999      	ldr	r1, [r3, #24]
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	ea40 0301 	orr.w	r3, r0, r1
 8003982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <UART_SetConfig+0x2cc>)
 800398c:	429a      	cmp	r2, r3
 800398e:	d005      	beq.n	800399c <UART_SetConfig+0xa0>
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b8d      	ldr	r3, [pc, #564]	; (8003bcc <UART_SetConfig+0x2d0>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d104      	bne.n	80039a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe ff88 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 80039a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039a4:	e003      	b.n	80039ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039a6:	f7fe ff6f 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 80039aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	f040 810c 	bne.w	8003bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039ce:	4622      	mov	r2, r4
 80039d0:	462b      	mov	r3, r5
 80039d2:	1891      	adds	r1, r2, r2
 80039d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039d6:	415b      	adcs	r3, r3
 80039d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039de:	4621      	mov	r1, r4
 80039e0:	eb12 0801 	adds.w	r8, r2, r1
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb43 0901 	adc.w	r9, r3, r1
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039fe:	4690      	mov	r8, r2
 8003a00:	4699      	mov	r9, r3
 8003a02:	4623      	mov	r3, r4
 8003a04:	eb18 0303 	adds.w	r3, r8, r3
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	eb49 0303 	adc.w	r3, r9, r3
 8003a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	18db      	adds	r3, r3, r3
 8003a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a30:	4613      	mov	r3, r2
 8003a32:	eb42 0303 	adc.w	r3, r2, r3
 8003a36:	657b      	str	r3, [r7, #84]	; 0x54
 8003a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a40:	f7fc ff5c 	bl	80008fc <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	011c      	lsls	r4, r3, #4
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a74:	4641      	mov	r1, r8
 8003a76:	eb12 0a01 	adds.w	sl, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	4692      	mov	sl, r2
 8003a96:	469b      	mov	fp, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8003aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ad6:	f7fc ff11 	bl	80008fc <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2264      	movs	r2, #100	; 0x64
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	1acb      	subs	r3, r1, r3
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003af6:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003af8:	fba3 2302 	umull	r2, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b04:	441c      	add	r4, r3
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b20:	415b      	adcs	r3, r3
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	460a      	mov	r2, r1
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b92:	f7fc feb3 	bl	80008fc <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	2164      	movs	r1, #100	; 0x64
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3332      	adds	r3, #50	; 0x32
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <UART_SetConfig+0x2d4>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	f003 0207 	and.w	r2, r3, #7
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4422      	add	r2, r4
 8003bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bc4:	e106      	b.n	8003dd4 <UART_SetConfig+0x4d8>
 8003bc6:	bf00      	nop
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	1891      	adds	r1, r2, r2
 8003bec:	6239      	str	r1, [r7, #32]
 8003bee:	415b      	adcs	r3, r3
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	1854      	adds	r4, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb43 0501 	adc.w	r5, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	00eb      	lsls	r3, r5, #3
 8003c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0e:	00e2      	lsls	r2, r4, #3
 8003c10:	4614      	mov	r4, r2
 8003c12:	461d      	mov	r5, r3
 8003c14:	4643      	mov	r3, r8
 8003c16:	18e3      	adds	r3, r4, r3
 8003c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	eb45 0303 	adc.w	r3, r5, r3
 8003c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c42:	4629      	mov	r1, r5
 8003c44:	008b      	lsls	r3, r1, #2
 8003c46:	4621      	mov	r1, r4
 8003c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	008a      	lsls	r2, r1, #2
 8003c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c54:	f7fc fe52 	bl	80008fc <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	011c      	lsls	r4, r3, #4
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	61b9      	str	r1, [r7, #24]
 8003c80:	415b      	adcs	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c88:	4641      	mov	r1, r8
 8003c8a:	1851      	adds	r1, r2, r1
 8003c8c:	6139      	str	r1, [r7, #16]
 8003c8e:	4649      	mov	r1, r9
 8003c90:	414b      	adcs	r3, r1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4651      	mov	r1, sl
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	008b      	lsls	r3, r1, #2
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cea:	4641      	mov	r1, r8
 8003cec:	008a      	lsls	r2, r1, #2
 8003cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cf2:	f7fc fe03 	bl	80008fc <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	; 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	; 0x32
 8003d10:	4a33      	ldr	r2, [pc, #204]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	441c      	add	r4, r3
 8003d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d22:	2200      	movs	r2, #0
 8003d24:	673b      	str	r3, [r7, #112]	; 0x70
 8003d26:	677a      	str	r2, [r7, #116]	; 0x74
 8003d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	415b      	adcs	r3, r3
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	1851      	adds	r1, r2, r1
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	4649      	mov	r1, r9
 8003d44:	414b      	adcs	r3, r1
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d54:	4659      	mov	r1, fp
 8003d56:	00cb      	lsls	r3, r1, #3
 8003d58:	4651      	mov	r1, sl
 8003d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5e:	4651      	mov	r1, sl
 8003d60:	00ca      	lsls	r2, r1, #3
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	4642      	mov	r2, r8
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d6e:	464b      	mov	r3, r9
 8003d70:	460a      	mov	r2, r1
 8003d72:	eb42 0303 	adc.w	r3, r2, r3
 8003d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	663b      	str	r3, [r7, #96]	; 0x60
 8003d82:	667a      	str	r2, [r7, #100]	; 0x64
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d90:	4649      	mov	r1, r9
 8003d92:	008b      	lsls	r3, r1, #2
 8003d94:	4641      	mov	r1, r8
 8003d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	008a      	lsls	r2, r1, #2
 8003d9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003da2:	f7fc fdab 	bl	80008fc <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003dac:	fba3 1302 	umull	r1, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	2164      	movs	r1, #100	; 0x64
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	3332      	adds	r3, #50	; 0x32
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <UART_SetConfig+0x4e4>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4422      	add	r2, r4
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de0:	51eb851f 	.word	0x51eb851f

08003de4 <siprintf>:
 8003de4:	b40e      	push	{r1, r2, r3}
 8003de6:	b500      	push	{lr}
 8003de8:	b09c      	sub	sp, #112	; 0x70
 8003dea:	ab1d      	add	r3, sp, #116	; 0x74
 8003dec:	9002      	str	r0, [sp, #8]
 8003dee:	9006      	str	r0, [sp, #24]
 8003df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003df4:	4809      	ldr	r0, [pc, #36]	; (8003e1c <siprintf+0x38>)
 8003df6:	9107      	str	r1, [sp, #28]
 8003df8:	9104      	str	r1, [sp, #16]
 8003dfa:	4909      	ldr	r1, [pc, #36]	; (8003e20 <siprintf+0x3c>)
 8003dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e00:	9105      	str	r1, [sp, #20]
 8003e02:	6800      	ldr	r0, [r0, #0]
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	a902      	add	r1, sp, #8
 8003e08:	f000 f992 	bl	8004130 <_svfiprintf_r>
 8003e0c:	9b02      	ldr	r3, [sp, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	b01c      	add	sp, #112	; 0x70
 8003e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e18:	b003      	add	sp, #12
 8003e1a:	4770      	bx	lr
 8003e1c:	20000058 	.word	0x20000058
 8003e20:	ffff0208 	.word	0xffff0208

08003e24 <memset>:
 8003e24:	4402      	add	r2, r0
 8003e26:	4603      	mov	r3, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <__errno>:
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <__errno+0x8>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000058 	.word	0x20000058

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4d0d      	ldr	r5, [pc, #52]	; (8003e78 <__libc_init_array+0x38>)
 8003e44:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <__libc_init_array+0x3c>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	42a6      	cmp	r6, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	4d0b      	ldr	r5, [pc, #44]	; (8003e80 <__libc_init_array+0x40>)
 8003e52:	4c0c      	ldr	r4, [pc, #48]	; (8003e84 <__libc_init_array+0x44>)
 8003e54:	f000 fc6a 	bl	800472c <_init>
 8003e58:	1b64      	subs	r4, r4, r5
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	42a6      	cmp	r6, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e68:	4798      	blx	r3
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e72:	4798      	blx	r3
 8003e74:	3601      	adds	r6, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08004838 	.word	0x08004838
 8003e7c:	08004838 	.word	0x08004838
 8003e80:	08004838 	.word	0x08004838
 8003e84:	0800483c 	.word	0x0800483c

08003e88 <__retarget_lock_acquire_recursive>:
 8003e88:	4770      	bx	lr

08003e8a <__retarget_lock_release_recursive>:
 8003e8a:	4770      	bx	lr

08003e8c <_free_r>:
 8003e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d044      	beq.n	8003f1c <_free_r+0x90>
 8003e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e96:	9001      	str	r0, [sp, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e9e:	bfb8      	it	lt
 8003ea0:	18e4      	addlt	r4, r4, r3
 8003ea2:	f000 f8df 	bl	8004064 <__malloc_lock>
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <_free_r+0x94>)
 8003ea8:	9801      	ldr	r0, [sp, #4]
 8003eaa:	6813      	ldr	r3, [r2, #0]
 8003eac:	b933      	cbnz	r3, 8003ebc <_free_r+0x30>
 8003eae:	6063      	str	r3, [r4, #4]
 8003eb0:	6014      	str	r4, [r2, #0]
 8003eb2:	b003      	add	sp, #12
 8003eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb8:	f000 b8da 	b.w	8004070 <__malloc_unlock>
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	d908      	bls.n	8003ed2 <_free_r+0x46>
 8003ec0:	6825      	ldr	r5, [r4, #0]
 8003ec2:	1961      	adds	r1, r4, r5
 8003ec4:	428b      	cmp	r3, r1
 8003ec6:	bf01      	itttt	eq
 8003ec8:	6819      	ldreq	r1, [r3, #0]
 8003eca:	685b      	ldreq	r3, [r3, #4]
 8003ecc:	1949      	addeq	r1, r1, r5
 8003ece:	6021      	streq	r1, [r4, #0]
 8003ed0:	e7ed      	b.n	8003eae <_free_r+0x22>
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b10b      	cbz	r3, 8003edc <_free_r+0x50>
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d9fa      	bls.n	8003ed2 <_free_r+0x46>
 8003edc:	6811      	ldr	r1, [r2, #0]
 8003ede:	1855      	adds	r5, r2, r1
 8003ee0:	42a5      	cmp	r5, r4
 8003ee2:	d10b      	bne.n	8003efc <_free_r+0x70>
 8003ee4:	6824      	ldr	r4, [r4, #0]
 8003ee6:	4421      	add	r1, r4
 8003ee8:	1854      	adds	r4, r2, r1
 8003eea:	42a3      	cmp	r3, r4
 8003eec:	6011      	str	r1, [r2, #0]
 8003eee:	d1e0      	bne.n	8003eb2 <_free_r+0x26>
 8003ef0:	681c      	ldr	r4, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	6053      	str	r3, [r2, #4]
 8003ef6:	440c      	add	r4, r1
 8003ef8:	6014      	str	r4, [r2, #0]
 8003efa:	e7da      	b.n	8003eb2 <_free_r+0x26>
 8003efc:	d902      	bls.n	8003f04 <_free_r+0x78>
 8003efe:	230c      	movs	r3, #12
 8003f00:	6003      	str	r3, [r0, #0]
 8003f02:	e7d6      	b.n	8003eb2 <_free_r+0x26>
 8003f04:	6825      	ldr	r5, [r4, #0]
 8003f06:	1961      	adds	r1, r4, r5
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	bf04      	itt	eq
 8003f0c:	6819      	ldreq	r1, [r3, #0]
 8003f0e:	685b      	ldreq	r3, [r3, #4]
 8003f10:	6063      	str	r3, [r4, #4]
 8003f12:	bf04      	itt	eq
 8003f14:	1949      	addeq	r1, r1, r5
 8003f16:	6021      	streq	r1, [r4, #0]
 8003f18:	6054      	str	r4, [r2, #4]
 8003f1a:	e7ca      	b.n	8003eb2 <_free_r+0x26>
 8003f1c:	b003      	add	sp, #12
 8003f1e:	bd30      	pop	{r4, r5, pc}
 8003f20:	2000026c 	.word	0x2000026c

08003f24 <sbrk_aligned>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	4e0e      	ldr	r6, [pc, #56]	; (8003f60 <sbrk_aligned+0x3c>)
 8003f28:	460c      	mov	r4, r1
 8003f2a:	6831      	ldr	r1, [r6, #0]
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	b911      	cbnz	r1, 8003f36 <sbrk_aligned+0x12>
 8003f30:	f000 fba6 	bl	8004680 <_sbrk_r>
 8003f34:	6030      	str	r0, [r6, #0]
 8003f36:	4621      	mov	r1, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 fba1 	bl	8004680 <_sbrk_r>
 8003f3e:	1c43      	adds	r3, r0, #1
 8003f40:	d00a      	beq.n	8003f58 <sbrk_aligned+0x34>
 8003f42:	1cc4      	adds	r4, r0, #3
 8003f44:	f024 0403 	bic.w	r4, r4, #3
 8003f48:	42a0      	cmp	r0, r4
 8003f4a:	d007      	beq.n	8003f5c <sbrk_aligned+0x38>
 8003f4c:	1a21      	subs	r1, r4, r0
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f000 fb96 	bl	8004680 <_sbrk_r>
 8003f54:	3001      	adds	r0, #1
 8003f56:	d101      	bne.n	8003f5c <sbrk_aligned+0x38>
 8003f58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	20000270 	.word	0x20000270

08003f64 <_malloc_r>:
 8003f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f68:	1ccd      	adds	r5, r1, #3
 8003f6a:	f025 0503 	bic.w	r5, r5, #3
 8003f6e:	3508      	adds	r5, #8
 8003f70:	2d0c      	cmp	r5, #12
 8003f72:	bf38      	it	cc
 8003f74:	250c      	movcc	r5, #12
 8003f76:	2d00      	cmp	r5, #0
 8003f78:	4607      	mov	r7, r0
 8003f7a:	db01      	blt.n	8003f80 <_malloc_r+0x1c>
 8003f7c:	42a9      	cmp	r1, r5
 8003f7e:	d905      	bls.n	8003f8c <_malloc_r+0x28>
 8003f80:	230c      	movs	r3, #12
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	2600      	movs	r6, #0
 8003f86:	4630      	mov	r0, r6
 8003f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004060 <_malloc_r+0xfc>
 8003f90:	f000 f868 	bl	8004064 <__malloc_lock>
 8003f94:	f8d8 3000 	ldr.w	r3, [r8]
 8003f98:	461c      	mov	r4, r3
 8003f9a:	bb5c      	cbnz	r4, 8003ff4 <_malloc_r+0x90>
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	f7ff ffc0 	bl	8003f24 <sbrk_aligned>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	d155      	bne.n	8004056 <_malloc_r+0xf2>
 8003faa:	f8d8 4000 	ldr.w	r4, [r8]
 8003fae:	4626      	mov	r6, r4
 8003fb0:	2e00      	cmp	r6, #0
 8003fb2:	d145      	bne.n	8004040 <_malloc_r+0xdc>
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	d048      	beq.n	800404a <_malloc_r+0xe6>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	4631      	mov	r1, r6
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	eb04 0903 	add.w	r9, r4, r3
 8003fc2:	f000 fb5d 	bl	8004680 <_sbrk_r>
 8003fc6:	4581      	cmp	r9, r0
 8003fc8:	d13f      	bne.n	800404a <_malloc_r+0xe6>
 8003fca:	6821      	ldr	r1, [r4, #0]
 8003fcc:	1a6d      	subs	r5, r5, r1
 8003fce:	4629      	mov	r1, r5
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	f7ff ffa7 	bl	8003f24 <sbrk_aligned>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d037      	beq.n	800404a <_malloc_r+0xe6>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	442b      	add	r3, r5
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d038      	beq.n	800405a <_malloc_r+0xf6>
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	42a2      	cmp	r2, r4
 8003fec:	d12b      	bne.n	8004046 <_malloc_r+0xe2>
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	e00f      	b.n	8004014 <_malloc_r+0xb0>
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	1b52      	subs	r2, r2, r5
 8003ff8:	d41f      	bmi.n	800403a <_malloc_r+0xd6>
 8003ffa:	2a0b      	cmp	r2, #11
 8003ffc:	d917      	bls.n	800402e <_malloc_r+0xca>
 8003ffe:	1961      	adds	r1, r4, r5
 8004000:	42a3      	cmp	r3, r4
 8004002:	6025      	str	r5, [r4, #0]
 8004004:	bf18      	it	ne
 8004006:	6059      	strne	r1, [r3, #4]
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	bf08      	it	eq
 800400c:	f8c8 1000 	streq.w	r1, [r8]
 8004010:	5162      	str	r2, [r4, r5]
 8004012:	604b      	str	r3, [r1, #4]
 8004014:	4638      	mov	r0, r7
 8004016:	f104 060b 	add.w	r6, r4, #11
 800401a:	f000 f829 	bl	8004070 <__malloc_unlock>
 800401e:	f026 0607 	bic.w	r6, r6, #7
 8004022:	1d23      	adds	r3, r4, #4
 8004024:	1af2      	subs	r2, r6, r3
 8004026:	d0ae      	beq.n	8003f86 <_malloc_r+0x22>
 8004028:	1b9b      	subs	r3, r3, r6
 800402a:	50a3      	str	r3, [r4, r2]
 800402c:	e7ab      	b.n	8003f86 <_malloc_r+0x22>
 800402e:	42a3      	cmp	r3, r4
 8004030:	6862      	ldr	r2, [r4, #4]
 8004032:	d1dd      	bne.n	8003ff0 <_malloc_r+0x8c>
 8004034:	f8c8 2000 	str.w	r2, [r8]
 8004038:	e7ec      	b.n	8004014 <_malloc_r+0xb0>
 800403a:	4623      	mov	r3, r4
 800403c:	6864      	ldr	r4, [r4, #4]
 800403e:	e7ac      	b.n	8003f9a <_malloc_r+0x36>
 8004040:	4634      	mov	r4, r6
 8004042:	6876      	ldr	r6, [r6, #4]
 8004044:	e7b4      	b.n	8003fb0 <_malloc_r+0x4c>
 8004046:	4613      	mov	r3, r2
 8004048:	e7cc      	b.n	8003fe4 <_malloc_r+0x80>
 800404a:	230c      	movs	r3, #12
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4638      	mov	r0, r7
 8004050:	f000 f80e 	bl	8004070 <__malloc_unlock>
 8004054:	e797      	b.n	8003f86 <_malloc_r+0x22>
 8004056:	6025      	str	r5, [r4, #0]
 8004058:	e7dc      	b.n	8004014 <_malloc_r+0xb0>
 800405a:	605b      	str	r3, [r3, #4]
 800405c:	deff      	udf	#255	; 0xff
 800405e:	bf00      	nop
 8004060:	2000026c 	.word	0x2000026c

08004064 <__malloc_lock>:
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <__malloc_lock+0x8>)
 8004066:	f7ff bf0f 	b.w	8003e88 <__retarget_lock_acquire_recursive>
 800406a:	bf00      	nop
 800406c:	20000268 	.word	0x20000268

08004070 <__malloc_unlock>:
 8004070:	4801      	ldr	r0, [pc, #4]	; (8004078 <__malloc_unlock+0x8>)
 8004072:	f7ff bf0a 	b.w	8003e8a <__retarget_lock_release_recursive>
 8004076:	bf00      	nop
 8004078:	20000268 	.word	0x20000268

0800407c <__ssputs_r>:
 800407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	688e      	ldr	r6, [r1, #8]
 8004082:	461f      	mov	r7, r3
 8004084:	42be      	cmp	r6, r7
 8004086:	680b      	ldr	r3, [r1, #0]
 8004088:	4682      	mov	sl, r0
 800408a:	460c      	mov	r4, r1
 800408c:	4690      	mov	r8, r2
 800408e:	d82c      	bhi.n	80040ea <__ssputs_r+0x6e>
 8004090:	898a      	ldrh	r2, [r1, #12]
 8004092:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004096:	d026      	beq.n	80040e6 <__ssputs_r+0x6a>
 8004098:	6965      	ldr	r5, [r4, #20]
 800409a:	6909      	ldr	r1, [r1, #16]
 800409c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040a0:	eba3 0901 	sub.w	r9, r3, r1
 80040a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040a8:	1c7b      	adds	r3, r7, #1
 80040aa:	444b      	add	r3, r9
 80040ac:	106d      	asrs	r5, r5, #1
 80040ae:	429d      	cmp	r5, r3
 80040b0:	bf38      	it	cc
 80040b2:	461d      	movcc	r5, r3
 80040b4:	0553      	lsls	r3, r2, #21
 80040b6:	d527      	bpl.n	8004108 <__ssputs_r+0x8c>
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7ff ff53 	bl	8003f64 <_malloc_r>
 80040be:	4606      	mov	r6, r0
 80040c0:	b360      	cbz	r0, 800411c <__ssputs_r+0xa0>
 80040c2:	6921      	ldr	r1, [r4, #16]
 80040c4:	464a      	mov	r2, r9
 80040c6:	f000 faeb 	bl	80046a0 <memcpy>
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	6126      	str	r6, [r4, #16]
 80040d8:	6165      	str	r5, [r4, #20]
 80040da:	444e      	add	r6, r9
 80040dc:	eba5 0509 	sub.w	r5, r5, r9
 80040e0:	6026      	str	r6, [r4, #0]
 80040e2:	60a5      	str	r5, [r4, #8]
 80040e4:	463e      	mov	r6, r7
 80040e6:	42be      	cmp	r6, r7
 80040e8:	d900      	bls.n	80040ec <__ssputs_r+0x70>
 80040ea:	463e      	mov	r6, r7
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	4632      	mov	r2, r6
 80040f0:	4641      	mov	r1, r8
 80040f2:	f000 faab 	bl	800464c <memmove>
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	1b9b      	subs	r3, r3, r6
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	4433      	add	r3, r6
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	2000      	movs	r0, #0
 8004104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004108:	462a      	mov	r2, r5
 800410a:	f000 fad7 	bl	80046bc <_realloc_r>
 800410e:	4606      	mov	r6, r0
 8004110:	2800      	cmp	r0, #0
 8004112:	d1e0      	bne.n	80040d6 <__ssputs_r+0x5a>
 8004114:	6921      	ldr	r1, [r4, #16]
 8004116:	4650      	mov	r0, sl
 8004118:	f7ff feb8 	bl	8003e8c <_free_r>
 800411c:	230c      	movs	r3, #12
 800411e:	f8ca 3000 	str.w	r3, [sl]
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800412e:	e7e9      	b.n	8004104 <__ssputs_r+0x88>

08004130 <_svfiprintf_r>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	4698      	mov	r8, r3
 8004136:	898b      	ldrh	r3, [r1, #12]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	b09d      	sub	sp, #116	; 0x74
 800413c:	4607      	mov	r7, r0
 800413e:	460d      	mov	r5, r1
 8004140:	4614      	mov	r4, r2
 8004142:	d50e      	bpl.n	8004162 <_svfiprintf_r+0x32>
 8004144:	690b      	ldr	r3, [r1, #16]
 8004146:	b963      	cbnz	r3, 8004162 <_svfiprintf_r+0x32>
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	f7ff ff0b 	bl	8003f64 <_malloc_r>
 800414e:	6028      	str	r0, [r5, #0]
 8004150:	6128      	str	r0, [r5, #16]
 8004152:	b920      	cbnz	r0, 800415e <_svfiprintf_r+0x2e>
 8004154:	230c      	movs	r3, #12
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800415c:	e0d0      	b.n	8004300 <_svfiprintf_r+0x1d0>
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	616b      	str	r3, [r5, #20]
 8004162:	2300      	movs	r3, #0
 8004164:	9309      	str	r3, [sp, #36]	; 0x24
 8004166:	2320      	movs	r3, #32
 8004168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800416c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004170:	2330      	movs	r3, #48	; 0x30
 8004172:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004318 <_svfiprintf_r+0x1e8>
 8004176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800417a:	f04f 0901 	mov.w	r9, #1
 800417e:	4623      	mov	r3, r4
 8004180:	469a      	mov	sl, r3
 8004182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004186:	b10a      	cbz	r2, 800418c <_svfiprintf_r+0x5c>
 8004188:	2a25      	cmp	r2, #37	; 0x25
 800418a:	d1f9      	bne.n	8004180 <_svfiprintf_r+0x50>
 800418c:	ebba 0b04 	subs.w	fp, sl, r4
 8004190:	d00b      	beq.n	80041aa <_svfiprintf_r+0x7a>
 8004192:	465b      	mov	r3, fp
 8004194:	4622      	mov	r2, r4
 8004196:	4629      	mov	r1, r5
 8004198:	4638      	mov	r0, r7
 800419a:	f7ff ff6f 	bl	800407c <__ssputs_r>
 800419e:	3001      	adds	r0, #1
 80041a0:	f000 80a9 	beq.w	80042f6 <_svfiprintf_r+0x1c6>
 80041a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a6:	445a      	add	r2, fp
 80041a8:	9209      	str	r2, [sp, #36]	; 0x24
 80041aa:	f89a 3000 	ldrb.w	r3, [sl]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80a1 	beq.w	80042f6 <_svfiprintf_r+0x1c6>
 80041b4:	2300      	movs	r3, #0
 80041b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041be:	f10a 0a01 	add.w	sl, sl, #1
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	9307      	str	r3, [sp, #28]
 80041c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041ca:	931a      	str	r3, [sp, #104]	; 0x68
 80041cc:	4654      	mov	r4, sl
 80041ce:	2205      	movs	r2, #5
 80041d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d4:	4850      	ldr	r0, [pc, #320]	; (8004318 <_svfiprintf_r+0x1e8>)
 80041d6:	f7fc f80b 	bl	80001f0 <memchr>
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	b9d8      	cbnz	r0, 8004216 <_svfiprintf_r+0xe6>
 80041de:	06d0      	lsls	r0, r2, #27
 80041e0:	bf44      	itt	mi
 80041e2:	2320      	movmi	r3, #32
 80041e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e8:	0711      	lsls	r1, r2, #28
 80041ea:	bf44      	itt	mi
 80041ec:	232b      	movmi	r3, #43	; 0x2b
 80041ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041f2:	f89a 3000 	ldrb.w	r3, [sl]
 80041f6:	2b2a      	cmp	r3, #42	; 0x2a
 80041f8:	d015      	beq.n	8004226 <_svfiprintf_r+0xf6>
 80041fa:	9a07      	ldr	r2, [sp, #28]
 80041fc:	4654      	mov	r4, sl
 80041fe:	2000      	movs	r0, #0
 8004200:	f04f 0c0a 	mov.w	ip, #10
 8004204:	4621      	mov	r1, r4
 8004206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420a:	3b30      	subs	r3, #48	; 0x30
 800420c:	2b09      	cmp	r3, #9
 800420e:	d94d      	bls.n	80042ac <_svfiprintf_r+0x17c>
 8004210:	b1b0      	cbz	r0, 8004240 <_svfiprintf_r+0x110>
 8004212:	9207      	str	r2, [sp, #28]
 8004214:	e014      	b.n	8004240 <_svfiprintf_r+0x110>
 8004216:	eba0 0308 	sub.w	r3, r0, r8
 800421a:	fa09 f303 	lsl.w	r3, r9, r3
 800421e:	4313      	orrs	r3, r2
 8004220:	9304      	str	r3, [sp, #16]
 8004222:	46a2      	mov	sl, r4
 8004224:	e7d2      	b.n	80041cc <_svfiprintf_r+0x9c>
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	1d19      	adds	r1, r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	9103      	str	r1, [sp, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfbb      	ittet	lt
 8004232:	425b      	neglt	r3, r3
 8004234:	f042 0202 	orrlt.w	r2, r2, #2
 8004238:	9307      	strge	r3, [sp, #28]
 800423a:	9307      	strlt	r3, [sp, #28]
 800423c:	bfb8      	it	lt
 800423e:	9204      	strlt	r2, [sp, #16]
 8004240:	7823      	ldrb	r3, [r4, #0]
 8004242:	2b2e      	cmp	r3, #46	; 0x2e
 8004244:	d10c      	bne.n	8004260 <_svfiprintf_r+0x130>
 8004246:	7863      	ldrb	r3, [r4, #1]
 8004248:	2b2a      	cmp	r3, #42	; 0x2a
 800424a:	d134      	bne.n	80042b6 <_svfiprintf_r+0x186>
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	1d1a      	adds	r2, r3, #4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	9203      	str	r2, [sp, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	bfb8      	it	lt
 8004258:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800425c:	3402      	adds	r4, #2
 800425e:	9305      	str	r3, [sp, #20]
 8004260:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004328 <_svfiprintf_r+0x1f8>
 8004264:	7821      	ldrb	r1, [r4, #0]
 8004266:	2203      	movs	r2, #3
 8004268:	4650      	mov	r0, sl
 800426a:	f7fb ffc1 	bl	80001f0 <memchr>
 800426e:	b138      	cbz	r0, 8004280 <_svfiprintf_r+0x150>
 8004270:	9b04      	ldr	r3, [sp, #16]
 8004272:	eba0 000a 	sub.w	r0, r0, sl
 8004276:	2240      	movs	r2, #64	; 0x40
 8004278:	4082      	lsls	r2, r0
 800427a:	4313      	orrs	r3, r2
 800427c:	3401      	adds	r4, #1
 800427e:	9304      	str	r3, [sp, #16]
 8004280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004284:	4825      	ldr	r0, [pc, #148]	; (800431c <_svfiprintf_r+0x1ec>)
 8004286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800428a:	2206      	movs	r2, #6
 800428c:	f7fb ffb0 	bl	80001f0 <memchr>
 8004290:	2800      	cmp	r0, #0
 8004292:	d038      	beq.n	8004306 <_svfiprintf_r+0x1d6>
 8004294:	4b22      	ldr	r3, [pc, #136]	; (8004320 <_svfiprintf_r+0x1f0>)
 8004296:	bb1b      	cbnz	r3, 80042e0 <_svfiprintf_r+0x1b0>
 8004298:	9b03      	ldr	r3, [sp, #12]
 800429a:	3307      	adds	r3, #7
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	3308      	adds	r3, #8
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a6:	4433      	add	r3, r6
 80042a8:	9309      	str	r3, [sp, #36]	; 0x24
 80042aa:	e768      	b.n	800417e <_svfiprintf_r+0x4e>
 80042ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80042b0:	460c      	mov	r4, r1
 80042b2:	2001      	movs	r0, #1
 80042b4:	e7a6      	b.n	8004204 <_svfiprintf_r+0xd4>
 80042b6:	2300      	movs	r3, #0
 80042b8:	3401      	adds	r4, #1
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	4619      	mov	r1, r3
 80042be:	f04f 0c0a 	mov.w	ip, #10
 80042c2:	4620      	mov	r0, r4
 80042c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c8:	3a30      	subs	r2, #48	; 0x30
 80042ca:	2a09      	cmp	r2, #9
 80042cc:	d903      	bls.n	80042d6 <_svfiprintf_r+0x1a6>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0c6      	beq.n	8004260 <_svfiprintf_r+0x130>
 80042d2:	9105      	str	r1, [sp, #20]
 80042d4:	e7c4      	b.n	8004260 <_svfiprintf_r+0x130>
 80042d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042da:	4604      	mov	r4, r0
 80042dc:	2301      	movs	r3, #1
 80042de:	e7f0      	b.n	80042c2 <_svfiprintf_r+0x192>
 80042e0:	ab03      	add	r3, sp, #12
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	462a      	mov	r2, r5
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <_svfiprintf_r+0x1f4>)
 80042e8:	a904      	add	r1, sp, #16
 80042ea:	4638      	mov	r0, r7
 80042ec:	f3af 8000 	nop.w
 80042f0:	1c42      	adds	r2, r0, #1
 80042f2:	4606      	mov	r6, r0
 80042f4:	d1d6      	bne.n	80042a4 <_svfiprintf_r+0x174>
 80042f6:	89ab      	ldrh	r3, [r5, #12]
 80042f8:	065b      	lsls	r3, r3, #25
 80042fa:	f53f af2d 	bmi.w	8004158 <_svfiprintf_r+0x28>
 80042fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004300:	b01d      	add	sp, #116	; 0x74
 8004302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004306:	ab03      	add	r3, sp, #12
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	462a      	mov	r2, r5
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <_svfiprintf_r+0x1f4>)
 800430e:	a904      	add	r1, sp, #16
 8004310:	4638      	mov	r0, r7
 8004312:	f000 f879 	bl	8004408 <_printf_i>
 8004316:	e7eb      	b.n	80042f0 <_svfiprintf_r+0x1c0>
 8004318:	080047fc 	.word	0x080047fc
 800431c:	08004806 	.word	0x08004806
 8004320:	00000000 	.word	0x00000000
 8004324:	0800407d 	.word	0x0800407d
 8004328:	08004802 	.word	0x08004802

0800432c <_printf_common>:
 800432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	4616      	mov	r6, r2
 8004332:	4699      	mov	r9, r3
 8004334:	688a      	ldr	r2, [r1, #8]
 8004336:	690b      	ldr	r3, [r1, #16]
 8004338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800433c:	4293      	cmp	r3, r2
 800433e:	bfb8      	it	lt
 8004340:	4613      	movlt	r3, r2
 8004342:	6033      	str	r3, [r6, #0]
 8004344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004348:	4607      	mov	r7, r0
 800434a:	460c      	mov	r4, r1
 800434c:	b10a      	cbz	r2, 8004352 <_printf_common+0x26>
 800434e:	3301      	adds	r3, #1
 8004350:	6033      	str	r3, [r6, #0]
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	0699      	lsls	r1, r3, #26
 8004356:	bf42      	ittt	mi
 8004358:	6833      	ldrmi	r3, [r6, #0]
 800435a:	3302      	addmi	r3, #2
 800435c:	6033      	strmi	r3, [r6, #0]
 800435e:	6825      	ldr	r5, [r4, #0]
 8004360:	f015 0506 	ands.w	r5, r5, #6
 8004364:	d106      	bne.n	8004374 <_printf_common+0x48>
 8004366:	f104 0a19 	add.w	sl, r4, #25
 800436a:	68e3      	ldr	r3, [r4, #12]
 800436c:	6832      	ldr	r2, [r6, #0]
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	42ab      	cmp	r3, r5
 8004372:	dc26      	bgt.n	80043c2 <_printf_common+0x96>
 8004374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004378:	1e13      	subs	r3, r2, #0
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	bf18      	it	ne
 800437e:	2301      	movne	r3, #1
 8004380:	0692      	lsls	r2, r2, #26
 8004382:	d42b      	bmi.n	80043dc <_printf_common+0xb0>
 8004384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004388:	4649      	mov	r1, r9
 800438a:	4638      	mov	r0, r7
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d01e      	beq.n	80043d0 <_printf_common+0xa4>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	6922      	ldr	r2, [r4, #16]
 8004396:	f003 0306 	and.w	r3, r3, #6
 800439a:	2b04      	cmp	r3, #4
 800439c:	bf02      	ittt	eq
 800439e:	68e5      	ldreq	r5, [r4, #12]
 80043a0:	6833      	ldreq	r3, [r6, #0]
 80043a2:	1aed      	subeq	r5, r5, r3
 80043a4:	68a3      	ldr	r3, [r4, #8]
 80043a6:	bf0c      	ite	eq
 80043a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043ac:	2500      	movne	r5, #0
 80043ae:	4293      	cmp	r3, r2
 80043b0:	bfc4      	itt	gt
 80043b2:	1a9b      	subgt	r3, r3, r2
 80043b4:	18ed      	addgt	r5, r5, r3
 80043b6:	2600      	movs	r6, #0
 80043b8:	341a      	adds	r4, #26
 80043ba:	42b5      	cmp	r5, r6
 80043bc:	d11a      	bne.n	80043f4 <_printf_common+0xc8>
 80043be:	2000      	movs	r0, #0
 80043c0:	e008      	b.n	80043d4 <_printf_common+0xa8>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4652      	mov	r2, sl
 80043c6:	4649      	mov	r1, r9
 80043c8:	4638      	mov	r0, r7
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d103      	bne.n	80043d8 <_printf_common+0xac>
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d8:	3501      	adds	r5, #1
 80043da:	e7c6      	b.n	800436a <_printf_common+0x3e>
 80043dc:	18e1      	adds	r1, r4, r3
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	2030      	movs	r0, #48	; 0x30
 80043e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e6:	4422      	add	r2, r4
 80043e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f0:	3302      	adds	r3, #2
 80043f2:	e7c7      	b.n	8004384 <_printf_common+0x58>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4622      	mov	r2, r4
 80043f8:	4649      	mov	r1, r9
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d0e6      	beq.n	80043d0 <_printf_common+0xa4>
 8004402:	3601      	adds	r6, #1
 8004404:	e7d9      	b.n	80043ba <_printf_common+0x8e>
	...

08004408 <_printf_i>:
 8004408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	7e0f      	ldrb	r7, [r1, #24]
 800440e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004410:	2f78      	cmp	r7, #120	; 0x78
 8004412:	4691      	mov	r9, r2
 8004414:	4680      	mov	r8, r0
 8004416:	460c      	mov	r4, r1
 8004418:	469a      	mov	sl, r3
 800441a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800441e:	d807      	bhi.n	8004430 <_printf_i+0x28>
 8004420:	2f62      	cmp	r7, #98	; 0x62
 8004422:	d80a      	bhi.n	800443a <_printf_i+0x32>
 8004424:	2f00      	cmp	r7, #0
 8004426:	f000 80d4 	beq.w	80045d2 <_printf_i+0x1ca>
 800442a:	2f58      	cmp	r7, #88	; 0x58
 800442c:	f000 80c0 	beq.w	80045b0 <_printf_i+0x1a8>
 8004430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004438:	e03a      	b.n	80044b0 <_printf_i+0xa8>
 800443a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800443e:	2b15      	cmp	r3, #21
 8004440:	d8f6      	bhi.n	8004430 <_printf_i+0x28>
 8004442:	a101      	add	r1, pc, #4	; (adr r1, 8004448 <_printf_i+0x40>)
 8004444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044b5 	.word	0x080044b5
 8004450:	08004431 	.word	0x08004431
 8004454:	08004431 	.word	0x08004431
 8004458:	08004431 	.word	0x08004431
 800445c:	08004431 	.word	0x08004431
 8004460:	080044b5 	.word	0x080044b5
 8004464:	08004431 	.word	0x08004431
 8004468:	08004431 	.word	0x08004431
 800446c:	08004431 	.word	0x08004431
 8004470:	08004431 	.word	0x08004431
 8004474:	080045b9 	.word	0x080045b9
 8004478:	080044e1 	.word	0x080044e1
 800447c:	08004573 	.word	0x08004573
 8004480:	08004431 	.word	0x08004431
 8004484:	08004431 	.word	0x08004431
 8004488:	080045db 	.word	0x080045db
 800448c:	08004431 	.word	0x08004431
 8004490:	080044e1 	.word	0x080044e1
 8004494:	08004431 	.word	0x08004431
 8004498:	08004431 	.word	0x08004431
 800449c:	0800457b 	.word	0x0800457b
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	602a      	str	r2, [r5, #0]
 80044a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b0:	2301      	movs	r3, #1
 80044b2:	e09f      	b.n	80045f4 <_printf_i+0x1ec>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	0607      	lsls	r7, r0, #24
 80044ba:	f103 0104 	add.w	r1, r3, #4
 80044be:	6029      	str	r1, [r5, #0]
 80044c0:	d501      	bpl.n	80044c6 <_printf_i+0xbe>
 80044c2:	681e      	ldr	r6, [r3, #0]
 80044c4:	e003      	b.n	80044ce <_printf_i+0xc6>
 80044c6:	0646      	lsls	r6, r0, #25
 80044c8:	d5fb      	bpl.n	80044c2 <_printf_i+0xba>
 80044ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	da03      	bge.n	80044da <_printf_i+0xd2>
 80044d2:	232d      	movs	r3, #45	; 0x2d
 80044d4:	4276      	negs	r6, r6
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	485a      	ldr	r0, [pc, #360]	; (8004644 <_printf_i+0x23c>)
 80044dc:	230a      	movs	r3, #10
 80044de:	e012      	b.n	8004506 <_printf_i+0xfe>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6029      	str	r1, [r5, #0]
 80044e8:	0605      	lsls	r5, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xe8>
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0xee>
 80044f0:	0641      	lsls	r1, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xe4>
 80044f4:	881e      	ldrh	r6, [r3, #0]
 80044f6:	4853      	ldr	r0, [pc, #332]	; (8004644 <_printf_i+0x23c>)
 80044f8:	2f6f      	cmp	r7, #111	; 0x6f
 80044fa:	bf0c      	ite	eq
 80044fc:	2308      	moveq	r3, #8
 80044fe:	230a      	movne	r3, #10
 8004500:	2100      	movs	r1, #0
 8004502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004506:	6865      	ldr	r5, [r4, #4]
 8004508:	60a5      	str	r5, [r4, #8]
 800450a:	2d00      	cmp	r5, #0
 800450c:	bfa2      	ittt	ge
 800450e:	6821      	ldrge	r1, [r4, #0]
 8004510:	f021 0104 	bicge.w	r1, r1, #4
 8004514:	6021      	strge	r1, [r4, #0]
 8004516:	b90e      	cbnz	r6, 800451c <_printf_i+0x114>
 8004518:	2d00      	cmp	r5, #0
 800451a:	d04b      	beq.n	80045b4 <_printf_i+0x1ac>
 800451c:	4615      	mov	r5, r2
 800451e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004522:	fb03 6711 	mls	r7, r3, r1, r6
 8004526:	5dc7      	ldrb	r7, [r0, r7]
 8004528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452c:	4637      	mov	r7, r6
 800452e:	42bb      	cmp	r3, r7
 8004530:	460e      	mov	r6, r1
 8004532:	d9f4      	bls.n	800451e <_printf_i+0x116>
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10b      	bne.n	8004550 <_printf_i+0x148>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07de      	lsls	r6, r3, #31
 800453c:	d508      	bpl.n	8004550 <_printf_i+0x148>
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	6861      	ldr	r1, [r4, #4]
 8004542:	4299      	cmp	r1, r3
 8004544:	bfde      	ittt	le
 8004546:	2330      	movle	r3, #48	; 0x30
 8004548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004550:	1b52      	subs	r2, r2, r5
 8004552:	6122      	str	r2, [r4, #16]
 8004554:	f8cd a000 	str.w	sl, [sp]
 8004558:	464b      	mov	r3, r9
 800455a:	aa03      	add	r2, sp, #12
 800455c:	4621      	mov	r1, r4
 800455e:	4640      	mov	r0, r8
 8004560:	f7ff fee4 	bl	800432c <_printf_common>
 8004564:	3001      	adds	r0, #1
 8004566:	d14a      	bne.n	80045fe <_printf_i+0x1f6>
 8004568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800456c:	b004      	add	sp, #16
 800456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f043 0320 	orr.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	4833      	ldr	r0, [pc, #204]	; (8004648 <_printf_i+0x240>)
 800457c:	2778      	movs	r7, #120	; 0x78
 800457e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	6829      	ldr	r1, [r5, #0]
 8004586:	061f      	lsls	r7, r3, #24
 8004588:	f851 6b04 	ldr.w	r6, [r1], #4
 800458c:	d402      	bmi.n	8004594 <_printf_i+0x18c>
 800458e:	065f      	lsls	r7, r3, #25
 8004590:	bf48      	it	mi
 8004592:	b2b6      	uxthmi	r6, r6
 8004594:	07df      	lsls	r7, r3, #31
 8004596:	bf48      	it	mi
 8004598:	f043 0320 	orrmi.w	r3, r3, #32
 800459c:	6029      	str	r1, [r5, #0]
 800459e:	bf48      	it	mi
 80045a0:	6023      	strmi	r3, [r4, #0]
 80045a2:	b91e      	cbnz	r6, 80045ac <_printf_i+0x1a4>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	2310      	movs	r3, #16
 80045ae:	e7a7      	b.n	8004500 <_printf_i+0xf8>
 80045b0:	4824      	ldr	r0, [pc, #144]	; (8004644 <_printf_i+0x23c>)
 80045b2:	e7e4      	b.n	800457e <_printf_i+0x176>
 80045b4:	4615      	mov	r5, r2
 80045b6:	e7bd      	b.n	8004534 <_printf_i+0x12c>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	6826      	ldr	r6, [r4, #0]
 80045bc:	6961      	ldr	r1, [r4, #20]
 80045be:	1d18      	adds	r0, r3, #4
 80045c0:	6028      	str	r0, [r5, #0]
 80045c2:	0635      	lsls	r5, r6, #24
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	d501      	bpl.n	80045cc <_printf_i+0x1c4>
 80045c8:	6019      	str	r1, [r3, #0]
 80045ca:	e002      	b.n	80045d2 <_printf_i+0x1ca>
 80045cc:	0670      	lsls	r0, r6, #25
 80045ce:	d5fb      	bpl.n	80045c8 <_printf_i+0x1c0>
 80045d0:	8019      	strh	r1, [r3, #0]
 80045d2:	2300      	movs	r3, #0
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	4615      	mov	r5, r2
 80045d8:	e7bc      	b.n	8004554 <_printf_i+0x14c>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	1d1a      	adds	r2, r3, #4
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	2100      	movs	r1, #0
 80045e6:	4628      	mov	r0, r5
 80045e8:	f7fb fe02 	bl	80001f0 <memchr>
 80045ec:	b108      	cbz	r0, 80045f2 <_printf_i+0x1ea>
 80045ee:	1b40      	subs	r0, r0, r5
 80045f0:	6060      	str	r0, [r4, #4]
 80045f2:	6863      	ldr	r3, [r4, #4]
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	2300      	movs	r3, #0
 80045f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fc:	e7aa      	b.n	8004554 <_printf_i+0x14c>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	462a      	mov	r2, r5
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	47d0      	blx	sl
 8004608:	3001      	adds	r0, #1
 800460a:	d0ad      	beq.n	8004568 <_printf_i+0x160>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	079b      	lsls	r3, r3, #30
 8004610:	d413      	bmi.n	800463a <_printf_i+0x232>
 8004612:	68e0      	ldr	r0, [r4, #12]
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	4298      	cmp	r0, r3
 8004618:	bfb8      	it	lt
 800461a:	4618      	movlt	r0, r3
 800461c:	e7a6      	b.n	800456c <_printf_i+0x164>
 800461e:	2301      	movs	r3, #1
 8004620:	4632      	mov	r2, r6
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	47d0      	blx	sl
 8004628:	3001      	adds	r0, #1
 800462a:	d09d      	beq.n	8004568 <_printf_i+0x160>
 800462c:	3501      	adds	r5, #1
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	9903      	ldr	r1, [sp, #12]
 8004632:	1a5b      	subs	r3, r3, r1
 8004634:	42ab      	cmp	r3, r5
 8004636:	dcf2      	bgt.n	800461e <_printf_i+0x216>
 8004638:	e7eb      	b.n	8004612 <_printf_i+0x20a>
 800463a:	2500      	movs	r5, #0
 800463c:	f104 0619 	add.w	r6, r4, #25
 8004640:	e7f5      	b.n	800462e <_printf_i+0x226>
 8004642:	bf00      	nop
 8004644:	0800480d 	.word	0x0800480d
 8004648:	0800481e 	.word	0x0800481e

0800464c <memmove>:
 800464c:	4288      	cmp	r0, r1
 800464e:	b510      	push	{r4, lr}
 8004650:	eb01 0402 	add.w	r4, r1, r2
 8004654:	d902      	bls.n	800465c <memmove+0x10>
 8004656:	4284      	cmp	r4, r0
 8004658:	4623      	mov	r3, r4
 800465a:	d807      	bhi.n	800466c <memmove+0x20>
 800465c:	1e43      	subs	r3, r0, #1
 800465e:	42a1      	cmp	r1, r4
 8004660:	d008      	beq.n	8004674 <memmove+0x28>
 8004662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800466a:	e7f8      	b.n	800465e <memmove+0x12>
 800466c:	4402      	add	r2, r0
 800466e:	4601      	mov	r1, r0
 8004670:	428a      	cmp	r2, r1
 8004672:	d100      	bne.n	8004676 <memmove+0x2a>
 8004674:	bd10      	pop	{r4, pc}
 8004676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800467a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800467e:	e7f7      	b.n	8004670 <memmove+0x24>

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d06      	ldr	r5, [pc, #24]	; (800469c <_sbrk_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fd f8e4 	bl	8001858 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	20000264 	.word	0x20000264

080046a0 <memcpy>:
 80046a0:	440a      	add	r2, r1
 80046a2:	4291      	cmp	r1, r2
 80046a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80046a8:	d100      	bne.n	80046ac <memcpy+0xc>
 80046aa:	4770      	bx	lr
 80046ac:	b510      	push	{r4, lr}
 80046ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046b6:	4291      	cmp	r1, r2
 80046b8:	d1f9      	bne.n	80046ae <memcpy+0xe>
 80046ba:	bd10      	pop	{r4, pc}

080046bc <_realloc_r>:
 80046bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c0:	4680      	mov	r8, r0
 80046c2:	4614      	mov	r4, r2
 80046c4:	460e      	mov	r6, r1
 80046c6:	b921      	cbnz	r1, 80046d2 <_realloc_r+0x16>
 80046c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	4611      	mov	r1, r2
 80046ce:	f7ff bc49 	b.w	8003f64 <_malloc_r>
 80046d2:	b92a      	cbnz	r2, 80046e0 <_realloc_r+0x24>
 80046d4:	f7ff fbda 	bl	8003e8c <_free_r>
 80046d8:	4625      	mov	r5, r4
 80046da:	4628      	mov	r0, r5
 80046dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e0:	f000 f81b 	bl	800471a <_malloc_usable_size_r>
 80046e4:	4284      	cmp	r4, r0
 80046e6:	4607      	mov	r7, r0
 80046e8:	d802      	bhi.n	80046f0 <_realloc_r+0x34>
 80046ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046ee:	d812      	bhi.n	8004716 <_realloc_r+0x5a>
 80046f0:	4621      	mov	r1, r4
 80046f2:	4640      	mov	r0, r8
 80046f4:	f7ff fc36 	bl	8003f64 <_malloc_r>
 80046f8:	4605      	mov	r5, r0
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d0ed      	beq.n	80046da <_realloc_r+0x1e>
 80046fe:	42bc      	cmp	r4, r7
 8004700:	4622      	mov	r2, r4
 8004702:	4631      	mov	r1, r6
 8004704:	bf28      	it	cs
 8004706:	463a      	movcs	r2, r7
 8004708:	f7ff ffca 	bl	80046a0 <memcpy>
 800470c:	4631      	mov	r1, r6
 800470e:	4640      	mov	r0, r8
 8004710:	f7ff fbbc 	bl	8003e8c <_free_r>
 8004714:	e7e1      	b.n	80046da <_realloc_r+0x1e>
 8004716:	4635      	mov	r5, r6
 8004718:	e7df      	b.n	80046da <_realloc_r+0x1e>

0800471a <_malloc_usable_size_r>:
 800471a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471e:	1f18      	subs	r0, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	bfbc      	itt	lt
 8004724:	580b      	ldrlt	r3, [r1, r0]
 8004726:	18c0      	addlt	r0, r0, r3
 8004728:	4770      	bx	lr
	...

0800472c <_init>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr

08004738 <_fini>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr
