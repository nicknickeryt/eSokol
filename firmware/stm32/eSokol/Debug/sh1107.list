
sh1107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007014  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000374c  080071b4  080071b4  000081b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a900  0800a900  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a900  0800a900  0000b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a908  0800a908  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a908  0800a908  0000b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a90c  0800a90c  0000b90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800a910  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000070  0800a980  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  0800a980  0000cbe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f26f  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002327  00000000  00000000  0001b30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000caa  00000000  00000000  0001e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001822e  00000000  00000000  0001f32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011be8  00000000  00000000  00037558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac7b  00000000  00000000  00049140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3dbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000e3e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e8938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800719c 	.word	0x0800719c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800719c 	.word	0x0800719c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8000db4:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <DS3231_Init+0x30>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f8a9 	bl	8000f12 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 f86d 	bl	8000ea0 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8000dc6:	f000 f8c6 	bl	8000f56 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8000dca:	f000 f88c 	bl	8000ee6 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 f846 	bl	8000e60 <DS3231_SetInterruptMode>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000008c 	.word	0x2000008c

08000de0 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	733b      	strb	r3, [r7, #12]
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <DS3231_SetRegByte+0x38>)
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	f107 020c 	add.w	r2, r7, #12
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2302      	movs	r3, #2
 8000e08:	21d0      	movs	r1, #208	@ 0xd0
 8000e0a:	f003 f8dd 	bl	8003fc8 <HAL_I2C_Master_Transmit>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000008c 	.word	0x2000008c

08000e1c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <DS3231_GetRegByte+0x40>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2301      	movs	r3, #1
 8000e34:	21d0      	movs	r1, #208	@ 0xd0
 8000e36:	f003 f8c7 	bl	8003fc8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <DS3231_GetRegByte+0x40>)
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	f107 020f 	add.w	r2, r7, #15
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	21d0      	movs	r1, #208	@ 0xd0
 8000e4c:	f003 f9ba 	bl	80041c4 <HAL_I2C_Master_Receive>
	return val;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000008c 	.word	0x2000008c

08000e60 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000e6a:	200e      	movs	r0, #14
 8000e6c:	f7ff ffd6 	bl	8000e1c <DS3231_GetRegByte>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	f023 0304 	bic.w	r3, r3, #4
 8000e7c:	b25a      	sxtb	r2, r3
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	200e      	movs	r0, #14
 8000e94:	f7ff ffa4 	bl	8000de0 <DS3231_SetRegByte>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000eaa:	200e      	movs	r0, #14
 8000eac:	f7ff ffb6 	bl	8000e1c <DS3231_GetRegByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	f023 0302 	bic.w	r3, r3, #2
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	200e      	movs	r0, #14
 8000ed4:	f7ff ff84 	bl	8000de0 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ffc1 	bl	8000e60 <DS3231_SetInterruptMode>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8000eec:	200f      	movs	r0, #15
 8000eee:	f7ff ff95 	bl	8000e1c <DS3231_GetRegByte>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f023 0302 	bic.w	r3, r3, #2
 8000ef8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f023 0302 	bic.w	r3, r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	200f      	movs	r0, #15
 8000f06:	f7ff ff6b 	bl	8000de0 <DS3231_SetRegByte>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000f1c:	200e      	movs	r0, #14
 8000f1e:	f7ff ff7d 	bl	8000e1c <DS3231_GetRegByte>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	b25a      	sxtb	r2, r3
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	200e      	movs	r0, #14
 8000f44:	f7ff ff4c 	bl	8000de0 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff ff89 	bl	8000e60 <DS3231_SetInterruptMode>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f7ff ff5d 	bl	8000e1c <DS3231_GetRegByte>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	200f      	movs	r0, #15
 8000f76:	f7ff ff33 	bl	8000de0 <DS3231_SetRegByte>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8000f86:	2002      	movs	r0, #2
 8000f88:	f7ff ff48 	bl	8000e1c <DS3231_GetRegByte>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f80f 	bl	8000fb2 <DS3231_DecodeBCD>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff ff3c 	bl	8000e1c <DS3231_GetRegByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f803 	bl	8000fb2 <DS3231_DecodeBCD>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2db      	uxtb	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <stopBeep>:
uint8_t nth_raw = 0;
uint16_t raw[10] = {0};
float voltage = 0;


void stopBeep(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <stopBeep+0x10>)
 8000fec:	f004 fdce 	bl	8005b8c <HAL_TIM_PWM_Stop>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200001c8 	.word	0x200001c8

08000ff8 <beep>:

void beep(int tone) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (!sound)
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <beep+0x94>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d13a      	bne.n	8001084 <beep+0x8c>
		return;

	beepTime = HAL_GetTick();
 800100e:	f001 ffa5 	bl	8002f5c <HAL_GetTick>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <beep+0x98>)
 8001018:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800101a:	2104      	movs	r1, #4
 800101c:	481d      	ldr	r0, [pc, #116]	@ (8001094 <beep+0x9c>)
 800101e:	f004 fd05 	bl	8005a2c <HAL_TIM_PWM_Start>

	switch (tone) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d021      	beq.n	800106c <beep+0x74>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	dc2b      	bgt.n	8001086 <beep+0x8e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <beep+0x44>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d00c      	beq.n	8001054 <beep+0x5c>
 800103a:	e024      	b.n	8001086 <beep+0x8e>
	case 0:
		__HAL_TIM_SET_AUTORELOAD(&htim2, 30);
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <beep+0x9c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	221e      	movs	r2, #30
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <beep+0x9c>)
 8001046:	221e      	movs	r2, #30
 8001048:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 15);
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <beep+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	220f      	movs	r2, #15
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001052:	e018      	b.n	8001086 <beep+0x8e>
	case 1:
		__HAL_TIM_SET_AUTORELOAD(&htim2, 45);
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <beep+0x9c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	222d      	movs	r2, #45	@ 0x2d
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <beep+0x9c>)
 800105e:	222d      	movs	r2, #45	@ 0x2d
 8001060:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 22);
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <beep+0x9c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2216      	movs	r2, #22
 8001068:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800106a:	e00c      	b.n	8001086 <beep+0x8e>
	case 2:
		__HAL_TIM_SET_AUTORELOAD(&htim2, 50);
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <beep+0x9c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2232      	movs	r2, #50	@ 0x32
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <beep+0x9c>)
 8001076:	2232      	movs	r2, #50	@ 0x32
 8001078:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 25);
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <beep+0x9c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2219      	movs	r2, #25
 8001080:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001082:	e000      	b.n	8001086 <beep+0x8e>
		return;
 8001084:	bf00      	nop
	}
}
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000000c 	.word	0x2000000c
 8001090:	20000264 	.word	0x20000264
 8001094:	200001c8 	.word	0x200001c8

08001098 <formatTime>:



void formatTime(uint8_t hour, uint8_t minute, char *output) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	603a      	str	r2, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	460b      	mov	r3, r1
 80010a6:	71bb      	strb	r3, [r7, #6]
    // Sprawdzenie czy godzina jest jednocyfrowa
    if (hour < 10) {
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b09      	cmp	r3, #9
 80010ac:	d806      	bhi.n	80010bc <formatTime+0x24>
        // Jeśli godzina jest jednocyfrowa, dodaj '0' przed nią
        sprintf(output, "0%d:", hour);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4910      	ldr	r1, [pc, #64]	@ (80010f4 <formatTime+0x5c>)
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f005 fbd1 	bl	800685c <siprintf>
 80010ba:	e005      	b.n	80010c8 <formatTime+0x30>
    } else {
        // W przeciwnym razie, zapisz godzinę normalnie
        sprintf(output, "%d:", hour);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	461a      	mov	r2, r3
 80010c0:	490d      	ldr	r1, [pc, #52]	@ (80010f8 <formatTime+0x60>)
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f005 fbca 	bl	800685c <siprintf>
    }

    // Sprawdzenie czy minuta jest jednocyfrowa
    if (minute < 10) {
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	d807      	bhi.n	80010de <formatTime+0x46>
        // Jeśli minuta jest jednocyfrowa, dodaj '0' przed nią
        sprintf(output + 3, "0%d", minute); // +3 bo wtedy zaczynamy od trzeciego znaku
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3303      	adds	r3, #3
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	4909      	ldr	r1, [pc, #36]	@ (80010fc <formatTime+0x64>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 fbc0 	bl	800685c <siprintf>
    } else {
        // W przeciwnym razie, zapisz minutę normalnie
        sprintf(output + 3, "%d", minute); // +3 bo wtedy zaczynamy od trzeciego znaku
    }
}
 80010dc:	e006      	b.n	80010ec <formatTime+0x54>
        sprintf(output + 3, "%d", minute); // +3 bo wtedy zaczynamy od trzeciego znaku
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3303      	adds	r3, #3
 80010e2:	79ba      	ldrb	r2, [r7, #6]
 80010e4:	4906      	ldr	r1, [pc, #24]	@ (8001100 <formatTime+0x68>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fbb8 	bl	800685c <siprintf>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	080071b4 	.word	0x080071b4
 80010f8:	080071bc 	.word	0x080071bc
 80010fc:	080071c0 	.word	0x080071c0
 8001100:	080071c4 	.word	0x080071c4

08001104 <splitFloat>:

void splitFloat(float num, int *beforeDecimal, int *afterDecimal) {
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	ed87 0a03 	vstr	s0, [r7, #12]
 800110e:	60b8      	str	r0, [r7, #8]
 8001110:	6079      	str	r1, [r7, #4]
	*beforeDecimal = (int) num; // Część całkowita
 8001112:	edd7 7a03 	vldr	s15, [r7, #12]
 8001116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111a:	ee17 2a90 	vmov	r2, s15
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	601a      	str	r2, [r3, #0]
	*afterDecimal = (int) ((num - *beforeDecimal) * 100); // Część ułamkowa
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001136:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001158 <splitFloat+0x54>
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001142:	ee17 2a90 	vmov	r2, s15
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	42c80000 	.word	0x42c80000
 800115c:	00000000 	.word	0x00000000

08001160 <addHeader>:

void addHeader() {
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af02      	add	r7, sp, #8
	if(!isHeaderEnabled) return;
 8001166:	4b5e      	ldr	r3, [pc, #376]	@ (80012e0 <addHeader+0x180>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	f040 80ad 	bne.w	80012d0 <addHeader+0x170>


	for (int i=0; i<10; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e02d      	b.n	80011d8 <addHeader+0x78>
		voltage = voltage +  (2 * 3.3 * ((float)raw[i]/4095));
 800117c:	4b59      	ldr	r3, [pc, #356]	@ (80012e4 <addHeader+0x184>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9e1 	bl	8000548 <__aeabi_f2d>
 8001186:	4604      	mov	r4, r0
 8001188:	460d      	mov	r5, r1
 800118a:	4a57      	ldr	r2, [pc, #348]	@ (80012e8 <addHeader+0x188>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80012ec <addHeader+0x18c>
 800119e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a2:	ee16 0a90 	vmov	r0, s13
 80011a6:	f7ff f9cf 	bl	8000548 <__aeabi_f2d>
 80011aa:	a34b      	add	r3, pc, #300	@ (adr r3, 80012d8 <addHeader+0x178>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff fa22 	bl	80005f8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4620      	mov	r0, r4
 80011ba:	4629      	mov	r1, r5
 80011bc:	f7ff f866 	bl	800028c <__adddf3>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fc28 	bl	8000a1c <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a45      	ldr	r2, [pc, #276]	@ (80012e4 <addHeader+0x184>)
 80011d0:	6013      	str	r3, [r2, #0]
	for (int i=0; i<10; i++) {
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b09      	cmp	r3, #9
 80011dc:	ddce      	ble.n	800117c <addHeader+0x1c>
	}
	voltage = voltage/10;
 80011de:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <addHeader+0x184>)
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80011e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ec:	4b3d      	ldr	r3, [pc, #244]	@ (80012e4 <addHeader+0x184>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]


	uint8_t hour = DS3231_GetHour();
 80011f2:	f7ff fec6 	bl	8000f82 <DS3231_GetHour>
 80011f6:	4603      	mov	r3, r0
 80011f8:	76fb      	strb	r3, [r7, #27]
	uint8_t minute = DS3231_GetMinute();
 80011fa:	f7ff fece 	bl	8000f9a <DS3231_GetMinute>
 80011fe:	4603      	mov	r3, r0
 8001200:	76bb      	strb	r3, [r7, #26]

	ssd1306_SetCursor(0, 0);
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f001 fa5f 	bl	80026c8 <ssd1306_SetCursor>
	ssd1306_WriteString("ROMET", Font_6x8, White);
 800120a:	4b39      	ldr	r3, [pc, #228]	@ (80012f0 <addHeader+0x190>)
 800120c:	2201      	movs	r2, #1
 800120e:	9200      	str	r2, [sp, #0]
 8001210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001212:	4838      	ldr	r0, [pc, #224]	@ (80012f4 <addHeader+0x194>)
 8001214:	f001 fa32 	bl	800267c <ssd1306_WriteString>

	ssd1306_SetCursor(51, 0);
 8001218:	2100      	movs	r1, #0
 800121a:	2033      	movs	r0, #51	@ 0x33
 800121c:	f001 fa54 	bl	80026c8 <ssd1306_SetCursor>

	char buf[5];
	formatTime(hour, minute, buf);
 8001220:	f107 0214 	add.w	r2, r7, #20
 8001224:	7eb9      	ldrb	r1, [r7, #26]
 8001226:	7efb      	ldrb	r3, [r7, #27]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff35 	bl	8001098 <formatTime>


	ssd1306_WriteString(buf, Font_6x8, White);
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <addHeader+0x190>)
 8001230:	f107 0014 	add.w	r0, r7, #20
 8001234:	2201      	movs	r2, #1
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123a:	f001 fa1f 	bl	800267c <ssd1306_WriteString>

	// bottom line
	ssd1306_Line(0, 9, 128, 9, White);
 800123e:	2301      	movs	r3, #1
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2309      	movs	r3, #9
 8001244:	2280      	movs	r2, #128	@ 0x80
 8001246:	2109      	movs	r1, #9
 8001248:	2000      	movs	r0, #0
 800124a:	f001 fa55 	bl	80026f8 <ssd1306_Line>

	int beforeDecimal = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
	int afterDecimal = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
	splitFloat(voltage, &beforeDecimal, &afterDecimal);
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <addHeader+0x184>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	f7ff ff4a 	bl	8001104 <splitFloat>

	char buf1[2];
	sprintf(buf1,"%d", beforeDecimal);
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4920      	ldr	r1, [pc, #128]	@ (80012f8 <addHeader+0x198>)
 8001278:	4618      	mov	r0, r3
 800127a:	f005 faef 	bl	800685c <siprintf>

	char buf2[4];
	sprintf(buf2,"%d", afterDecimal);
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	491d      	ldr	r1, [pc, #116]	@ (80012f8 <addHeader+0x198>)
 8001284:	4618      	mov	r0, r3
 8001286:	f005 fae9 	bl	800685c <siprintf>


	ssd1306_SetCursor(101, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2065      	movs	r0, #101	@ 0x65
 800128e:	f001 fa1b 	bl	80026c8 <ssd1306_SetCursor>
	ssd1306_WriteString(buf1, Font_6x8, White);
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <addHeader+0x190>)
 8001294:	f107 0008 	add.w	r0, r7, #8
 8001298:	2201      	movs	r2, #1
 800129a:	9200      	str	r2, [sp, #0]
 800129c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129e:	f001 f9ed 	bl	800267c <ssd1306_WriteString>
	ssd1306_SetCursor(106, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	206a      	movs	r0, #106	@ 0x6a
 80012a6:	f001 fa0f 	bl	80026c8 <ssd1306_SetCursor>
	ssd1306_WriteString(".", Font_6x8, White);
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <addHeader+0x190>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b2:	4812      	ldr	r0, [pc, #72]	@ (80012fc <addHeader+0x19c>)
 80012b4:	f001 f9e2 	bl	800267c <ssd1306_WriteString>
	ssd1306_SetCursor(111, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	206f      	movs	r0, #111	@ 0x6f
 80012bc:	f001 fa04 	bl	80026c8 <ssd1306_SetCursor>
	ssd1306_WriteString(buf2, Font_6x8, White);
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <addHeader+0x190>)
 80012c2:	1d38      	adds	r0, r7, #4
 80012c4:	2201      	movs	r2, #1
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ca:	f001 f9d7 	bl	800267c <ssd1306_WriteString>
 80012ce:	e000      	b.n	80012d2 <addHeader+0x172>
	if(!isHeaderEnabled) return;
 80012d0:	bf00      	nop

}
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdb0      	pop	{r4, r5, r7, pc}
 80012d8:	66666666 	.word	0x66666666
 80012dc:	401a6666 	.word	0x401a6666
 80012e0:	2000000e 	.word	0x2000000e
 80012e4:	20000288 	.word	0x20000288
 80012e8:	20000274 	.word	0x20000274
 80012ec:	457ff000 	.word	0x457ff000
 80012f0:	0800a884 	.word	0x0800a884
 80012f4:	080071c8 	.word	0x080071c8
 80012f8:	080071c4 	.word	0x080071c4
 80012fc:	080071d0 	.word	0x080071d0

08001300 <showSettingsPage>:

void showSettingsPage(int page, int sel, bool blink) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af02      	add	r7, sp, #8
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	4613      	mov	r3, r2
 800130c:	71fb      	strb	r3, [r7, #7]
	beep(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff fe72 	bl	8000ff8 <beep>
	currPage = page;
 8001314:	4aa4      	ldr	r2, [pc, #656]	@ (80015a8 <showSettingsPage+0x2a8>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6013      	str	r3, [r2, #0]
	int offset = 13;
 800131a:	230d      	movs	r3, #13
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
	ssd1306_Fill(Black);
 800131e:	2000      	movs	r0, #0
 8001320:	f001 f888 	bl	8002434 <ssd1306_Fill>
	addHeader();
 8001324:	f7ff ff1c 	bl	8001160 <addHeader>
	ssd1306_SetCursor(5, offset);
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4619      	mov	r1, r3
 800132e:	2005      	movs	r0, #5
 8001330:	f001 f9ca 	bl	80026c8 <ssd1306_SetCursor>

	int y = 21 + offset + sel * 15;
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	f103 0115 	add.w	r1, r3, #21
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	4613      	mov	r3, r2
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	440b      	add	r3, r1
 8001344:	623b      	str	r3, [r7, #32]
	int y1 = 36 + offset + sel * 15;
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	4613      	mov	r3, r2
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	440b      	add	r3, r1
 8001356:	61fb      	str	r3, [r7, #28]

	SSD1306_COLOR colors[5] = { 1, 1, 1, 1, 1 };
 8001358:	4a94      	ldr	r2, [pc, #592]	@ (80015ac <showSettingsPage+0x2ac>)
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001362:	6018      	str	r0, [r3, #0]
 8001364:	3304      	adds	r3, #4
 8001366:	7019      	strb	r1, [r3, #0]

	if (!blink)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <showSettingsPage+0x80>
		colors[sel] = 0;
 8001374:	f107 0214 	add.w	r2, r7, #20
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]

	switch (page) {
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d004      	beq.n	8001390 <showSettingsPage+0x90>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b02      	cmp	r3, #2
 800138a:	f000 8092 	beq.w	80014b2 <showSettingsPage+0x1b2>
 800138e:	e104      	b.n	800159a <showSettingsPage+0x29a>
	case 1:
		ssd1306_WriteString("Ustawienia", Font_11x18, White);
 8001390:	4b87      	ldr	r3, [pc, #540]	@ (80015b0 <showSettingsPage+0x2b0>)
 8001392:	2201      	movs	r2, #1
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001398:	4886      	ldr	r0, [pc, #536]	@ (80015b4 <showSettingsPage+0x2b4>)
 800139a:	f001 f96f 	bl	800267c <ssd1306_WriteString>

		ssd1306_Line(0, 21 + offset, 128, 21 + offset, White);
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3315      	adds	r3, #21
 80013a4:	b2d9      	uxtb	r1, r3
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3315      	adds	r3, #21
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2201      	movs	r2, #1
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	2000      	movs	r0, #0
 80013b6:	f001 f99f 	bl	80026f8 <ssd1306_Line>

		ssd1306_SetCursor(5, 25 + offset);
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3319      	adds	r3, #25
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	2005      	movs	r0, #5
 80013c6:	f001 f97f 	bl	80026c8 <ssd1306_SetCursor>

		ssd1306_FillRectangle(0, y, 128, y1, !blink);
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	b2d9      	uxtb	r1, r3
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f083 0301 	eor.w	r3, r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4613      	mov	r3, r2
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	2000      	movs	r0, #0
 80013e2:	f001 f9f5 	bl	80027d0 <ssd1306_FillRectangle>
		ssd1306_WriteString("Swiatla", Font_7x10, colors[0]);
 80013e6:	7d3a      	ldrb	r2, [r7, #20]
 80013e8:	4b73      	ldr	r3, [pc, #460]	@ (80015b8 <showSettingsPage+0x2b8>)
 80013ea:	9200      	str	r2, [sp, #0]
 80013ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ee:	4873      	ldr	r0, [pc, #460]	@ (80015bc <showSettingsPage+0x2bc>)
 80013f0:	f001 f944 	bl	800267c <ssd1306_WriteString>
		ssd1306_Line(0, 36 + offset, 128, 36 + offset, White);
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3324      	adds	r3, #36	@ 0x24
 80013fa:	b2d9      	uxtb	r1, r3
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	3324      	adds	r3, #36	@ 0x24
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2201      	movs	r2, #1
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	2000      	movs	r0, #0
 800140c:	f001 f974 	bl	80026f8 <ssd1306_Line>

		ssd1306_SetCursor(5, 38 + offset);
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	b2db      	uxtb	r3, r3
 8001414:	3326      	adds	r3, #38	@ 0x26
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4619      	mov	r1, r3
 800141a:	2005      	movs	r0, #5
 800141c:	f001 f954 	bl	80026c8 <ssd1306_SetCursor>

		ssd1306_WriteString("Hamulce", Font_7x10, colors[1]);
 8001420:	7d7a      	ldrb	r2, [r7, #21]
 8001422:	4b65      	ldr	r3, [pc, #404]	@ (80015b8 <showSettingsPage+0x2b8>)
 8001424:	9200      	str	r2, [sp, #0]
 8001426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001428:	4865      	ldr	r0, [pc, #404]	@ (80015c0 <showSettingsPage+0x2c0>)
 800142a:	f001 f927 	bl	800267c <ssd1306_WriteString>
		ssd1306_Line(0, 51 + offset, 128, 51 + offset, White);
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3333      	adds	r3, #51	@ 0x33
 8001434:	b2d9      	uxtb	r1, r3
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3333      	adds	r3, #51	@ 0x33
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2201      	movs	r2, #1
 8001440:	9200      	str	r2, [sp, #0]
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	2000      	movs	r0, #0
 8001446:	f001 f957 	bl	80026f8 <ssd1306_Line>

		ssd1306_SetCursor(5, 53 + offset);
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3335      	adds	r3, #53	@ 0x35
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	2005      	movs	r0, #5
 8001456:	f001 f937 	bl	80026c8 <ssd1306_SetCursor>

		ssd1306_WriteString("Dzwiek", Font_7x10, colors[2]);
 800145a:	7dba      	ldrb	r2, [r7, #22]
 800145c:	4b56      	ldr	r3, [pc, #344]	@ (80015b8 <showSettingsPage+0x2b8>)
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001462:	4858      	ldr	r0, [pc, #352]	@ (80015c4 <showSettingsPage+0x2c4>)
 8001464:	f001 f90a 	bl	800267c <ssd1306_WriteString>
		ssd1306_Line(0, 66 + offset, 128, 66 + offset, White);
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	b2db      	uxtb	r3, r3
 800146c:	3342      	adds	r3, #66	@ 0x42
 800146e:	b2d9      	uxtb	r1, r3
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3342      	adds	r3, #66	@ 0x42
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2201      	movs	r2, #1
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	2000      	movs	r0, #0
 8001480:	f001 f93a 	bl	80026f8 <ssd1306_Line>

		ssd1306_SetCursor(5, 120);
 8001484:	2178      	movs	r1, #120	@ 0x78
 8001486:	2005      	movs	r0, #5
 8001488:	f001 f91e 	bl	80026c8 <ssd1306_SetCursor>

		ssd1306_WriteString("OK", Font_6x8, White);
 800148c:	4b4e      	ldr	r3, [pc, #312]	@ (80015c8 <showSettingsPage+0x2c8>)
 800148e:	2201      	movs	r2, #1
 8001490:	9200      	str	r2, [sp, #0]
 8001492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001494:	484d      	ldr	r0, [pc, #308]	@ (80015cc <showSettingsPage+0x2cc>)
 8001496:	f001 f8f1 	bl	800267c <ssd1306_WriteString>

		ssd1306_SetCursor(87, 120);
 800149a:	2178      	movs	r1, #120	@ 0x78
 800149c:	2057      	movs	r0, #87	@ 0x57
 800149e:	f001 f913 	bl	80026c8 <ssd1306_SetCursor>
		ssd1306_WriteString("Wstecz", Font_6x8, White);
 80014a2:	4b49      	ldr	r3, [pc, #292]	@ (80015c8 <showSettingsPage+0x2c8>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014aa:	4849      	ldr	r0, [pc, #292]	@ (80015d0 <showSettingsPage+0x2d0>)
 80014ac:	f001 f8e6 	bl	800267c <ssd1306_WriteString>
		break;
 80014b0:	e073      	b.n	800159a <showSettingsPage+0x29a>
	case 2:
		ssd1306_WriteString("Swiatla", Font_11x18, White);
 80014b2:	4b3f      	ldr	r3, [pc, #252]	@ (80015b0 <showSettingsPage+0x2b0>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ba:	4840      	ldr	r0, [pc, #256]	@ (80015bc <showSettingsPage+0x2bc>)
 80014bc:	f001 f8de 	bl	800267c <ssd1306_WriteString>

		ssd1306_Line(0, 21 + offset, 128, 21 + offset, White);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3315      	adds	r3, #21
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3315      	adds	r3, #21
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2201      	movs	r2, #1
 80014d2:	9200      	str	r2, [sp, #0]
 80014d4:	2280      	movs	r2, #128	@ 0x80
 80014d6:	2000      	movs	r0, #0
 80014d8:	f001 f90e 	bl	80026f8 <ssd1306_Line>

		ssd1306_SetCursor(5, 25 + offset);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3319      	adds	r3, #25
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	2005      	movs	r0, #5
 80014e8:	f001 f8ee 	bl	80026c8 <ssd1306_SetCursor>

		ssd1306_FillRectangle(0, y, 128, y1, !blink);
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	b2d9      	uxtb	r1, r3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f083 0301 	eor.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4613      	mov	r3, r2
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	2000      	movs	r0, #0
 8001504:	f001 f964 	bl	80027d0 <ssd1306_FillRectangle>
		ssd1306_WriteString("Wlacz/wylacz", Font_7x10, colors[0]);
 8001508:	7d3a      	ldrb	r2, [r7, #20]
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <showSettingsPage+0x2b8>)
 800150c:	9200      	str	r2, [sp, #0]
 800150e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001510:	4830      	ldr	r0, [pc, #192]	@ (80015d4 <showSettingsPage+0x2d4>)
 8001512:	f001 f8b3 	bl	800267c <ssd1306_WriteString>
		ssd1306_Line(0, 36 + offset, 128, 36 + offset, White);
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3324      	adds	r3, #36	@ 0x24
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3324      	adds	r3, #36	@ 0x24
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2201      	movs	r2, #1
 8001528:	9200      	str	r2, [sp, #0]
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	2000      	movs	r0, #0
 800152e:	f001 f8e3 	bl	80026f8 <ssd1306_Line>

		ssd1306_SetCursor(5, 38 + offset);
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	b2db      	uxtb	r3, r3
 8001536:	3326      	adds	r3, #38	@ 0x26
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	2005      	movs	r0, #5
 800153e:	f001 f8c3 	bl	80026c8 <ssd1306_SetCursor>

		ssd1306_WriteString("Animacje", Font_7x10, colors[1]);
 8001542:	7d7a      	ldrb	r2, [r7, #21]
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <showSettingsPage+0x2b8>)
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154a:	4823      	ldr	r0, [pc, #140]	@ (80015d8 <showSettingsPage+0x2d8>)
 800154c:	f001 f896 	bl	800267c <ssd1306_WriteString>
		ssd1306_Line(0, 51 + offset, 128, 51 + offset, White);
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3333      	adds	r3, #51	@ 0x33
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3333      	adds	r3, #51	@ 0x33
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2201      	movs	r2, #1
 8001562:	9200      	str	r2, [sp, #0]
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	2000      	movs	r0, #0
 8001568:	f001 f8c6 	bl	80026f8 <ssd1306_Line>

		ssd1306_SetCursor(5, 120);
 800156c:	2178      	movs	r1, #120	@ 0x78
 800156e:	2005      	movs	r0, #5
 8001570:	f001 f8aa 	bl	80026c8 <ssd1306_SetCursor>

		ssd1306_WriteString("OK", Font_6x8, White);
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <showSettingsPage+0x2c8>)
 8001576:	2201      	movs	r2, #1
 8001578:	9200      	str	r2, [sp, #0]
 800157a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157c:	4813      	ldr	r0, [pc, #76]	@ (80015cc <showSettingsPage+0x2cc>)
 800157e:	f001 f87d 	bl	800267c <ssd1306_WriteString>

		ssd1306_SetCursor(87, 120);
 8001582:	2178      	movs	r1, #120	@ 0x78
 8001584:	2057      	movs	r0, #87	@ 0x57
 8001586:	f001 f89f 	bl	80026c8 <ssd1306_SetCursor>
		ssd1306_WriteString("Wstecz", Font_6x8, White);
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <showSettingsPage+0x2c8>)
 800158c:	2201      	movs	r2, #1
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001592:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <showSettingsPage+0x2d0>)
 8001594:	f001 f872 	bl	800267c <ssd1306_WriteString>
		break;
 8001598:	bf00      	nop
	}
	ssd1306_UpdateScreen();
 800159a:	f000 ff63 	bl	8002464 <ssd1306_UpdateScreen>
}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000
 80015ac:	08007220 	.word	0x08007220
 80015b0:	0800a89c 	.word	0x0800a89c
 80015b4:	080071d4 	.word	0x080071d4
 80015b8:	0800a890 	.word	0x0800a890
 80015bc:	080071e0 	.word	0x080071e0
 80015c0:	080071e8 	.word	0x080071e8
 80015c4:	080071f0 	.word	0x080071f0
 80015c8:	0800a884 	.word	0x0800a884
 80015cc:	080071f8 	.word	0x080071f8
 80015d0:	080071fc 	.word	0x080071fc
 80015d4:	08007204 	.word	0x08007204
 80015d8:	08007214 	.word	0x08007214

080015dc <addHomeIcons>:

void addHomeIcons() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af02      	add	r7, sp, #8
	if (headlights) ssd1306_DrawBitmap(5, 15, swiatla, 16, 16, White);
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <addHomeIcons+0x4c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <addHomeIcons+0x22>
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2310      	movs	r3, #16
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2310      	movs	r3, #16
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <addHomeIcons+0x50>)
 80015f6:	210f      	movs	r1, #15
 80015f8:	2005      	movs	r0, #5
 80015fa:	f001 f938 	bl	800286e <ssd1306_DrawBitmap>
	if (!sound) 	ssd1306_DrawBitmap(26, 15, muted, 16, 16, White);
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <addHomeIcons+0x54>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <addHomeIcons+0x44>
 800160c:	2301      	movs	r3, #1
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2310      	movs	r3, #16
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2310      	movs	r3, #16
 8001616:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <addHomeIcons+0x58>)
 8001618:	210f      	movs	r1, #15
 800161a:	201a      	movs	r0, #26
 800161c:	f001 f927 	bl	800286e <ssd1306_DrawBitmap>
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000025b 	.word	0x2000025b
 800162c:	08007a40 	.word	0x08007a40
 8001630:	2000000c 	.word	0x2000000c
 8001634:	08007a60 	.word	0x08007a60

08001638 <showHomescreen>:

void showHomescreen(int splash) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
	currPage = 0;
 8001640:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <showHomescreen+0xdc>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
	ssd1306_Init();
 8001646:	f000 fe8b 	bl	8002360 <ssd1306_Init>

	if (splash) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d019      	beq.n	8001684 <showHomescreen+0x4c>
		ssd1306_Fill(White);
 8001650:	2001      	movs	r0, #1
 8001652:	f000 feef 	bl	8002434 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001656:	f000 ff05 	bl	8002464 <ssd1306_UpdateScreen>
		ssd1306_Fill(Black);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 feea 	bl	8002434 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001660:	f000 ff00 	bl	8002464 <ssd1306_UpdateScreen>

		ssd1306_DrawBitmap(0, 0, logo_romet128_inv, 128, 128, White);
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	4a2a      	ldr	r2, [pc, #168]	@ (8001718 <showHomescreen+0xe0>)
 8001670:	2100      	movs	r1, #0
 8001672:	2000      	movs	r0, #0
 8001674:	f001 f8fb 	bl	800286e <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8001678:	f000 fef4 	bl	8002464 <ssd1306_UpdateScreen>

		HAL_Delay(500);
 800167c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001680:	f001 fc78 	bl	8002f74 <HAL_Delay>
	}

	ssd1306_Fill(Black);
 8001684:	2000      	movs	r0, #0
 8001686:	f000 fed5 	bl	8002434 <ssd1306_Fill>

	ssd1306_SetCursor(30, 50);
 800168a:	2132      	movs	r1, #50	@ 0x32
 800168c:	201e      	movs	r0, #30
 800168e:	f001 f81b 	bl	80026c8 <ssd1306_SetCursor>
	ssd1306_WriteString("12.5", Font_16x26, White);
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <showHomescreen+0xe4>)
 8001694:	2201      	movs	r2, #1
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800169a:	4821      	ldr	r0, [pc, #132]	@ (8001720 <showHomescreen+0xe8>)
 800169c:	f000 ffee 	bl	800267c <ssd1306_WriteString>

	ssd1306_SetCursor(50, 78);
 80016a0:	214e      	movs	r1, #78	@ 0x4e
 80016a2:	2032      	movs	r0, #50	@ 0x32
 80016a4:	f001 f810 	bl	80026c8 <ssd1306_SetCursor>
	ssd1306_WriteString("km/h", Font_7x10, White);
 80016a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <showHomescreen+0xec>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	9200      	str	r2, [sp, #0]
 80016ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b0:	481d      	ldr	r0, [pc, #116]	@ (8001728 <showHomescreen+0xf0>)
 80016b2:	f000 ffe3 	bl	800267c <ssd1306_WriteString>

	ssd1306_SetCursor(5, 120);
 80016b6:	2178      	movs	r1, #120	@ 0x78
 80016b8:	2005      	movs	r0, #5
 80016ba:	f001 f805 	bl	80026c8 <ssd1306_SetCursor>

	ssd1306_WriteString("Menu", Font_6x8, White);
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <showHomescreen+0xf4>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	9200      	str	r2, [sp, #0]
 80016c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c6:	481a      	ldr	r0, [pc, #104]	@ (8001730 <showHomescreen+0xf8>)
 80016c8:	f000 ffd8 	bl	800267c <ssd1306_WriteString>

	ssd1306_SetCursor(80, 120);
 80016cc:	2178      	movs	r1, #120	@ 0x78
 80016ce:	2050      	movs	r0, #80	@ 0x50
 80016d0:	f000 fffa 	bl	80026c8 <ssd1306_SetCursor>
	ssd1306_WriteString("Swiatla", Font_6x8, White);
 80016d4:	4b15      	ldr	r3, [pc, #84]	@ (800172c <showHomescreen+0xf4>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <showHomescreen+0xfc>)
 80016de:	f000 ffcd 	bl	800267c <ssd1306_WriteString>

	addHeader();
 80016e2:	f7ff fd3d 	bl	8001160 <addHeader>

	addHomeIcons();
 80016e6:	f7ff ff79 	bl	80015dc <addHomeIcons>

	ssd1306_UpdateScreen();
 80016ea:	f000 febb 	bl	8002464 <ssd1306_UpdateScreen>

	if(!splash) {
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10a      	bne.n	800170a <showHomescreen+0xd2>
		beep(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fc7f 	bl	8000ff8 <beep>
		HAL_Delay(50);
 80016fa:	2032      	movs	r0, #50	@ 0x32
 80016fc:	f001 fc3a 	bl	8002f74 <HAL_Delay>
		stopBeep();
 8001700:	f7ff fc70 	bl	8000fe4 <stopBeep>
		beep(2);
 8001704:	2002      	movs	r0, #2
 8001706:	f7ff fc77 	bl	8000ff8 <beep>
	}
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000
 8001718:	08007240 	.word	0x08007240
 800171c:	0800a8a8 	.word	0x0800a8a8
 8001720:	08007228 	.word	0x08007228
 8001724:	0800a890 	.word	0x0800a890
 8001728:	08007230 	.word	0x08007230
 800172c:	0800a884 	.word	0x0800a884
 8001730:	08007238 	.word	0x08007238
 8001734:	080071e0 	.word	0x080071e0

08001738 <jumpSel>:

void jumpSel(int button) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

	if (currPage == 0)
 8001740:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <jumpSel+0xa0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d108      	bne.n	800175a <jumpSel+0x22>
		nextPage = button == 0 ? 1 : 2;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <jumpSel+0x1a>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <jumpSel+0x1c>
 8001752:	2302      	movs	r3, #2
 8001754:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <jumpSel+0xa4>)
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e039      	b.n	80017ce <jumpSel+0x96>

	else if (currPage == 1) { // settings
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <jumpSel+0xa0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d118      	bne.n	8001794 <jumpSel+0x5c>
		if (button == 1) {
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d103      	bne.n	8001770 <jumpSel+0x38>
			nextPage = 0;
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <jumpSel+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
			return;
 800176e:	e02e      	b.n	80017ce <jumpSel+0x96>
		} else if (button == 0) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d12b      	bne.n	80017ce <jumpSel+0x96>
			switch(nextSel) {
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <jumpSel+0xa8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <jumpSel+0x4c>
 800177e:	2b02      	cmp	r3, #2
 8001780:	d004      	beq.n	800178c <jumpSel+0x54>
 8001782:	e024      	b.n	80017ce <jumpSel+0x96>
				case 0:
					nextPage = 2;
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <jumpSel+0xa4>)
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
					break;
 800178a:	e020      	b.n	80017ce <jumpSel+0x96>
				case 2:
					nextAction = 1;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <jumpSel+0xac>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]
					break;
 8001792:	e01c      	b.n	80017ce <jumpSel+0x96>
			}
		}


	} else if (currPage == 2) { // lights
 8001794:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <jumpSel+0xa0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d118      	bne.n	80017ce <jumpSel+0x96>
		if (button == 1) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d103      	bne.n	80017aa <jumpSel+0x72>
			nextPage = 0;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <jumpSel+0xa4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
			return;
 80017a8:	e011      	b.n	80017ce <jumpSel+0x96>
		} else if (button == 0) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10e      	bne.n	80017ce <jumpSel+0x96>

			switch(nextSel) {
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <jumpSel+0xa8>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <jumpSel+0x86>
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d004      	beq.n	80017c6 <jumpSel+0x8e>
 80017bc:	e007      	b.n	80017ce <jumpSel+0x96>
				case 0:
					nextAction = 0;
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <jumpSel+0xac>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
					break;
 80017c4:	e003      	b.n	80017ce <jumpSel+0x96>
				case 1:
					nextAction = 2;
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <jumpSel+0xac>)
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
					break;
 80017cc:	bf00      	nop
			}
		}
	}

}
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004
 80017e0:	20000258 	.word	0x20000258
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1 && ((HAL_GetTick() - timeMs) > 150)
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d118      	bne.n	800182a <HAL_GPIO_EXTI_Callback+0x42>
 80017f8:	f001 fbb0 	bl	8002f5c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <HAL_GPIO_EXTI_Callback+0x80>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b96      	cmp	r3, #150	@ 0x96
 8001806:	d910      	bls.n	800182a <HAL_GPIO_EXTI_Callback+0x42>
			&& HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == 0) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	4619      	mov	r1, r3
 800180c:	4817      	ldr	r0, [pc, #92]	@ (800186c <HAL_GPIO_EXTI_Callback+0x84>)
 800180e:	f002 fa4d 	bl	8003cac <HAL_GPIO_ReadPin>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <HAL_GPIO_EXTI_Callback+0x42>
					{
		jumpSel(0);
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff ff8d 	bl	8001738 <jumpSel>
		timeMs = HAL_GetTick();
 800181e:	f001 fb9d 	bl	8002f5c <HAL_GetTick>
 8001822:	4603      	mov	r3, r0
 8001824:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <HAL_GPIO_EXTI_Callback+0x80>)
 8001826:	6013      	str	r3, [r2, #0]
			&& HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == 0) // If The INT Source Is EXTI Line9 (A9 Pin)
					{
		jumpSel(1);
		timeMs = HAL_GetTick();
	}
}
 8001828:	e01a      	b.n	8001860 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_0 && ((HAL_GetTick() - timeMs) > 150)
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d117      	bne.n	8001860 <HAL_GPIO_EXTI_Callback+0x78>
 8001830:	f001 fb94 	bl	8002f5c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_GPIO_EXTI_Callback+0x80>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b96      	cmp	r3, #150	@ 0x96
 800183e:	d90f      	bls.n	8001860 <HAL_GPIO_EXTI_Callback+0x78>
			&& HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == 0) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4619      	mov	r1, r3
 8001844:	4809      	ldr	r0, [pc, #36]	@ (800186c <HAL_GPIO_EXTI_Callback+0x84>)
 8001846:	f002 fa31 	bl	8003cac <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_GPIO_EXTI_Callback+0x78>
		jumpSel(1);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff ff71 	bl	8001738 <jumpSel>
		timeMs = HAL_GetTick();
 8001856:	f001 fb81 	bl	8002f5c <HAL_GetTick>
 800185a:	4603      	mov	r3, r0
 800185c:	4a02      	ldr	r2, [pc, #8]	@ (8001868 <HAL_GPIO_EXTI_Callback+0x80>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000025c 	.word	0x2000025c
 800186c:	40020400 	.word	0x40020400

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001876:	f001 fb0b 	bl	8002e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187a:	f000 fa73 	bl	8001d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187e:	f000 fccb 	bl	8002218 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001882:	f000 fb59 	bl	8001f38 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001886:	f000 fb87 	bl	8001f98 <MX_TIM1_Init>
  MX_TIM2_Init();
 800188a:	f000 fbdb 	bl	8002044 <MX_TIM2_Init>
  MX_TIM3_Init();
 800188e:	f000 fc4d 	bl	800212c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001892:	f000 fb23 	bl	8001edc <MX_I2C1_Init>
  MX_ADC1_Init();
 8001896:	f000 facf 	bl	8001e38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  	DS3231_Init(&hi2c1);
 800189a:	48a5      	ldr	r0, [pc, #660]	@ (8001b30 <main+0x2c0>)
 800189c:	f7ff fa86 	bl	8000dac <DS3231_Init>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80018a0:	213c      	movs	r1, #60	@ 0x3c
 80018a2:	48a4      	ldr	r0, [pc, #656]	@ (8001b34 <main+0x2c4>)
 80018a4:	f004 fa7c 	bl	8005da0 <HAL_TIM_Encoder_Start>

	beep(0);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff fba5 	bl	8000ff8 <beep>

	showHomescreen(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fec2 	bl	8001638 <showHomescreen>

	ssd1306_SetContrast(255);
 80018b4:	20ff      	movs	r0, #255	@ 0xff
 80018b6:	f001 f836 	bl	8002926 <ssd1306_SetContrast>

	beep(1);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff fb9c 	bl	8000ff8 <beep>
	HAL_Delay(25);
 80018c0:	2019      	movs	r0, #25
 80018c2:	f001 fb57 	bl	8002f74 <HAL_Delay>
	stopBeep();
 80018c6:	f7ff fb8d 	bl	8000fe4 <stopBeep>
	HAL_Delay(25);
 80018ca:	2019      	movs	r0, #25
 80018cc:	f001 fb52 	bl	8002f74 <HAL_Delay>
	beep(1);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fb91 	bl	8000ff8 <beep>

	animTimeMs = timeUpdTime = HAL_GetTick();
 80018d6:	f001 fb41 	bl	8002f5c <HAL_GetTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b96      	ldr	r3, [pc, #600]	@ (8001b38 <main+0x2c8>)
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	4b95      	ldr	r3, [pc, #596]	@ (8001b38 <main+0x2c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a95      	ldr	r2, [pc, #596]	@ (8001b3c <main+0x2cc>)
 80018e8:	6013      	str	r3, [r2, #0]
	adcMs = -5001;
 80018ea:	4b95      	ldr	r3, [pc, #596]	@ (8001b40 <main+0x2d0>)
 80018ec:	4a95      	ldr	r2, [pc, #596]	@ (8001b44 <main+0x2d4>)
 80018ee:	601a      	str	r2, [r3, #0]
	/*
	 showSettings();

	 HAL_Delay(1500);*/

	bool bylo = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// periodical voltage check
		if (HAL_GetTick() - adcMs > 800 && !bylo) {
 80018f4:	f001 fb32 	bl	8002f5c <HAL_GetTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a91      	ldr	r2, [pc, #580]	@ (8001b40 <main+0x2d0>)
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001904:	d90d      	bls.n	8001922 <main+0xb2>
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f083 0301 	eor.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <main+0xb2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001918:	488b      	ldr	r0, [pc, #556]	@ (8001b48 <main+0x2d8>)
 800191a:	f002 f9df 	bl	8003cdc <HAL_GPIO_WritePin>
			bylo = 1;
 800191e:	2301      	movs	r3, #1
 8001920:	71fb      	strb	r3, [r7, #7]
		}
		if( HAL_GetTick() - adcMs > 1000) {
 8001922:	f001 fb1b 	bl	8002f5c <HAL_GetTick>
 8001926:	4603      	mov	r3, r0
 8001928:	4a85      	ldr	r2, [pc, #532]	@ (8001b40 <main+0x2d0>)
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001932:	d92b      	bls.n	800198c <main+0x11c>
			nth_raw=nth_raw == 10 ? 0 : nth_raw + 1;
 8001934:	4b85      	ldr	r3, [pc, #532]	@ (8001b4c <main+0x2dc>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b0a      	cmp	r3, #10
 800193a:	d004      	beq.n	8001946 <main+0xd6>
 800193c:	4b83      	ldr	r3, [pc, #524]	@ (8001b4c <main+0x2dc>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	e000      	b.n	8001948 <main+0xd8>
 8001946:	2300      	movs	r3, #0
 8001948:	4a80      	ldr	r2, [pc, #512]	@ (8001b4c <main+0x2dc>)
 800194a:	7013      	strb	r3, [r2, #0]
			HAL_ADC_Start(&hadc1);
 800194c:	4880      	ldr	r0, [pc, #512]	@ (8001b50 <main+0x2e0>)
 800194e:	f001 fb79 	bl	8003044 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001952:	210a      	movs	r1, #10
 8001954:	487e      	ldr	r0, [pc, #504]	@ (8001b50 <main+0x2e0>)
 8001956:	f001 fc5c 	bl	8003212 <HAL_ADC_PollForConversion>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10a      	bne.n	8001976 <main+0x106>
				raw[nth_raw] = HAL_ADC_GetValue(&hadc1);
 8001960:	487b      	ldr	r0, [pc, #492]	@ (8001b50 <main+0x2e0>)
 8001962:	f001 fce1 	bl	8003328 <HAL_ADC_GetValue>
 8001966:	4601      	mov	r1, r0
 8001968:	4b78      	ldr	r3, [pc, #480]	@ (8001b4c <main+0x2dc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	b289      	uxth	r1, r1
 8001970:	4b78      	ldr	r3, [pc, #480]	@ (8001b54 <main+0x2e4>)
 8001972:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			HAL_ADC_Stop(&hadc1);
 8001976:	4876      	ldr	r0, [pc, #472]	@ (8001b50 <main+0x2e0>)
 8001978:	f001 fc18 	bl	80031ac <HAL_ADC_Stop>
			adcMs=HAL_GetTick();
 800197c:	f001 faee 	bl	8002f5c <HAL_GetTick>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b6e      	ldr	r3, [pc, #440]	@ (8001b40 <main+0x2d0>)
 8001986:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
			bylo=0;
 8001988:	2300      	movs	r3, #0
 800198a:	71fb      	strb	r3, [r7, #7]
		}



		if(HAL_GetTick() - beepTime > 50 ) stopBeep();
 800198c:	f001 fae6 	bl	8002f5c <HAL_GetTick>
 8001990:	4603      	mov	r3, r0
 8001992:	4a71      	ldr	r2, [pc, #452]	@ (8001b58 <main+0x2e8>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	2b32      	cmp	r3, #50	@ 0x32
 800199a:	d901      	bls.n	80019a0 <main+0x130>
 800199c:	f7ff fb22 	bl	8000fe4 <stopBeep>

		if(HAL_GetTick() - timeUpdTime > timeUpdInt ) {
 80019a0:	f001 fadc 	bl	8002f5c <HAL_GetTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a64      	ldr	r2, [pc, #400]	@ (8001b38 <main+0x2c8>)
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	4a6b      	ldr	r2, [pc, #428]	@ (8001b5c <main+0x2ec>)
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d903      	bls.n	80019bc <main+0x14c>
			addHeader();
 80019b4:	f7ff fbd4 	bl	8001160 <addHeader>
			ssd1306_UpdateScreen();
 80019b8:	f000 fd54 	bl	8002464 <ssd1306_UpdateScreen>
		}


		encCurPos = TIM1->CNT;
 80019bc:	4b68      	ldr	r3, [pc, #416]	@ (8001b60 <main+0x2f0>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b68      	ldr	r3, [pc, #416]	@ (8001b64 <main+0x2f4>)
 80019c4:	701a      	strb	r2, [r3, #0]
		if ((encCurPos != encPos) && (currPage != 0)) {
 80019c6:	4b67      	ldr	r3, [pc, #412]	@ (8001b64 <main+0x2f4>)
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	4b67      	ldr	r3, [pc, #412]	@ (8001b68 <main+0x2f8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d01d      	beq.n	8001a0e <main+0x19e>
 80019d2:	4b66      	ldr	r3, [pc, #408]	@ (8001b6c <main+0x2fc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d019      	beq.n	8001a0e <main+0x19e>
			nextSel = encCurPos % 5;
 80019da:	4b62      	ldr	r3, [pc, #392]	@ (8001b64 <main+0x2f4>)
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b64      	ldr	r3, [pc, #400]	@ (8001b70 <main+0x300>)
 80019e0:	fba3 1302 	umull	r1, r3, r3, r2
 80019e4:	0899      	lsrs	r1, r3, #2
 80019e6:	460b      	mov	r3, r1
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b60      	ldr	r3, [pc, #384]	@ (8001b74 <main+0x304>)
 80019f2:	701a      	strb	r2, [r3, #0]
			showSettingsPage(currPage, nextSel, 0);
 80019f4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <main+0x2fc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a5e      	ldr	r2, [pc, #376]	@ (8001b74 <main+0x304>)
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	4611      	mov	r1, r2
 80019fe:	2200      	movs	r2, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fc7d 	bl	8001300 <showSettingsPage>
			encPos = encCurPos;
 8001a06:	4b57      	ldr	r3, [pc, #348]	@ (8001b64 <main+0x2f4>)
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <main+0x2f8>)
 8001a0c:	701a      	strb	r2, [r3, #0]
		}

		if (nextPage != -1) {
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b78 <main+0x308>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a16:	d035      	beq.n	8001a84 <main+0x214>
			switch (nextPage) {
 8001a18:	4b57      	ldr	r3, [pc, #348]	@ (8001b78 <main+0x308>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d023      	beq.n	8001a68 <main+0x1f8>
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	dc2b      	bgt.n	8001a7c <main+0x20c>
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <main+0x1be>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d013      	beq.n	8001a54 <main+0x1e4>
 8001a2c:	e026      	b.n	8001a7c <main+0x20c>
			case 0:
				showHomescreen(0);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fe02 	bl	8001638 <showHomescreen>
				TIM1->CNT = nextSel = encCurPos = encPos = 0;
 8001a34:	4b4c      	ldr	r3, [pc, #304]	@ (8001b68 <main+0x2f8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <main+0x2f8>)
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <main+0x2f4>)
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	4b48      	ldr	r3, [pc, #288]	@ (8001b64 <main+0x2f4>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b4b      	ldr	r3, [pc, #300]	@ (8001b74 <main+0x304>)
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <main+0x304>)
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b44      	ldr	r3, [pc, #272]	@ (8001b60 <main+0x2f0>)
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24
				break;
 8001a52:	e013      	b.n	8001a7c <main+0x20c>
			case 1:
				showSettingsPage(nextPage, nextSel, 0);
 8001a54:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <main+0x308>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a46      	ldr	r2, [pc, #280]	@ (8001b74 <main+0x304>)
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc4d 	bl	8001300 <showSettingsPage>
				break;
 8001a66:	e009      	b.n	8001a7c <main+0x20c>
			case 2:
				showSettingsPage(nextPage, nextSel, 0);
 8001a68:	4b43      	ldr	r3, [pc, #268]	@ (8001b78 <main+0x308>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a41      	ldr	r2, [pc, #260]	@ (8001b74 <main+0x304>)
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	4611      	mov	r1, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc43 	bl	8001300 <showSettingsPage>
				break;
 8001a7a:	bf00      	nop
			}
			nextPage = -1;
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b78 <main+0x308>)
 8001a7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a82:	601a      	str	r2, [r3, #0]
		}

		if (nextAction != -1) {
 8001a84:	4b3d      	ldr	r3, [pc, #244]	@ (8001b7c <main+0x30c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a8c:	f000 80a0 	beq.w	8001bd0 <main+0x360>
			switch (nextAction) {
 8001a90:	4b3a      	ldr	r3, [pc, #232]	@ (8001b7c <main+0x30c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d079      	beq.n	8001b8c <main+0x31c>
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f300 8095 	bgt.w	8001bc8 <main+0x358>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <main+0x238>
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d02a      	beq.n	8001afc <main+0x28c>
 8001aa6:	e08f      	b.n	8001bc8 <main+0x358>
			case 0:
				if (headlights) {
 8001aa8:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <main+0x310>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <main+0x250>
					headlights = false;
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <main+0x310>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4832      	ldr	r0, [pc, #200]	@ (8001b84 <main+0x314>)
 8001aba:	f004 f867 	bl	8005b8c <HAL_TIM_PWM_Stop>
 8001abe:	e00a      	b.n	8001ad6 <main+0x266>
				} else {
					headlights = true;
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <main+0x310>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	482e      	ldr	r0, [pc, #184]	@ (8001b84 <main+0x314>)
 8001aca:	f003 ffaf 	bl	8005a2c <HAL_TIM_PWM_Start>
					htim3.Instance->CCR1 = 255;
 8001ace:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <main+0x314>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	22ff      	movs	r2, #255	@ 0xff
 8001ad4:	635a      	str	r2, [r3, #52]	@ 0x34
				}
				showSettingsPage(currPage, nextSel, 1);
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <main+0x2fc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a26      	ldr	r2, [pc, #152]	@ (8001b74 <main+0x304>)
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fc0c 	bl	8001300 <showSettingsPage>
				showSettingsPage(currPage, nextSel, 0);
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <main+0x2fc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <main+0x304>)
 8001aee:	7812      	ldrb	r2, [r2, #0]
 8001af0:	4611      	mov	r1, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fc03 	bl	8001300 <showSettingsPage>
				break;
 8001afa:	e065      	b.n	8001bc8 <main+0x358>

			case 1:
				showSettingsPage(currPage, nextSel, 1);
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <main+0x2fc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1c      	ldr	r2, [pc, #112]	@ (8001b74 <main+0x304>)
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	4611      	mov	r1, r2
 8001b06:	2201      	movs	r2, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fbf9 	bl	8001300 <showSettingsPage>
				showSettingsPage(currPage, nextSel, 0);
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <main+0x2fc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a18      	ldr	r2, [pc, #96]	@ (8001b74 <main+0x304>)
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	4611      	mov	r1, r2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fbf0 	bl	8001300 <showSettingsPage>
				sound = sound == true ? false: true;
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <main+0x318>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <main+0x318>)
 8001b2c:	701a      	strb	r2, [r3, #0]
				break;
 8001b2e:	e04b      	b.n	8001bc8 <main+0x358>
 8001b30:	200000d8 	.word	0x200000d8
 8001b34:	20000180 	.word	0x20000180
 8001b38:	2000026c 	.word	0x2000026c
 8001b3c:	20000260 	.word	0x20000260
 8001b40:	20000268 	.word	0x20000268
 8001b44:	ffffec77 	.word	0xffffec77
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	20000270 	.word	0x20000270
 8001b50:	20000090 	.word	0x20000090
 8001b54:	20000274 	.word	0x20000274
 8001b58:	20000264 	.word	0x20000264
 8001b5c:	20000010 	.word	0x20000010
 8001b60:	40010000 	.word	0x40010000
 8001b64:	2000025a 	.word	0x2000025a
 8001b68:	20000259 	.word	0x20000259
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	cccccccd 	.word	0xcccccccd
 8001b74:	20000258 	.word	0x20000258
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	2000025b 	.word	0x2000025b
 8001b84:	20000210 	.word	0x20000210
 8001b88:	2000000c 	.word	0x2000000c
			case 2:
				showSettingsPage(currPage, nextSel, 1);
 8001b8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001d48 <main+0x4d8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6e      	ldr	r2, [pc, #440]	@ (8001d4c <main+0x4dc>)
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	4611      	mov	r1, r2
 8001b96:	2201      	movs	r2, #1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fbb1 	bl	8001300 <showSettingsPage>
				showSettingsPage(currPage, nextSel, 0);
 8001b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d48 <main+0x4d8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6a      	ldr	r2, [pc, #424]	@ (8001d4c <main+0x4dc>)
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fba8 	bl	8001300 <showSettingsPage>
				anim = anim == true ? false: true;
 8001bb0:	4b67      	ldr	r3, [pc, #412]	@ (8001d50 <main+0x4e0>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	f083 0301 	eor.w	r3, r3, #1
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b65      	ldr	r3, [pc, #404]	@ (8001d50 <main+0x4e0>)
 8001bbc:	701a      	strb	r2, [r3, #0]
				htim3.Instance->CCR1 = 255;
 8001bbe:	4b65      	ldr	r3, [pc, #404]	@ (8001d54 <main+0x4e4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	22ff      	movs	r2, #255	@ 0xff
 8001bc4:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 8001bc6:	bf00      	nop
			}
			nextAction = -1;
 8001bc8:	4b63      	ldr	r3, [pc, #396]	@ (8001d58 <main+0x4e8>)
 8001bca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bce:	601a      	str	r2, [r3, #0]
		}

		// todo zmienic na switch zeby bylo szybciej
		if(headlights && anim) {
 8001bd0:	4b62      	ldr	r3, [pc, #392]	@ (8001d5c <main+0x4ec>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f43f ae8d 	beq.w	80018f4 <main+0x84>
 8001bda:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <main+0x4e0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f43f ae88 	beq.w	80018f4 <main+0x84>
			if(HAL_GetTick() - animTimeMs > 1200) {
 8001be4:	f001 f9ba 	bl	8002f5c <HAL_GetTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a5d      	ldr	r2, [pc, #372]	@ (8001d60 <main+0x4f0>)
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001bf4:	d90a      	bls.n	8001c0c <main+0x39c>
				htim3.Instance->CCR1 = 255;
 8001bf6:	4b57      	ldr	r3, [pc, #348]	@ (8001d54 <main+0x4e4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	22ff      	movs	r2, #255	@ 0xff
 8001bfc:	635a      	str	r2, [r3, #52]	@ 0x34
				animTimeMs = HAL_GetTick();
 8001bfe:	f001 f9ad 	bl	8002f5c <HAL_GetTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b56      	ldr	r3, [pc, #344]	@ (8001d60 <main+0x4f0>)
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e673      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 1100) {
 8001c0c:	f001 f9a6 	bl	8002f5c <HAL_GetTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a53      	ldr	r2, [pc, #332]	@ (8001d60 <main+0x4f0>)
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d904      	bls.n	8001c2a <main+0x3ba>
				htim3.Instance->CCR1 = 220;
 8001c20:	4b4c      	ldr	r3, [pc, #304]	@ (8001d54 <main+0x4e4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	22dc      	movs	r2, #220	@ 0xdc
 8001c26:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c28:	e664      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 1000) {
 8001c2a:	f001 f997 	bl	8002f5c <HAL_GetTick>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a4b      	ldr	r2, [pc, #300]	@ (8001d60 <main+0x4f0>)
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c3a:	d904      	bls.n	8001c46 <main+0x3d6>
				htim3.Instance->CCR1 = 200;
 8001c3c:	4b45      	ldr	r3, [pc, #276]	@ (8001d54 <main+0x4e4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	22c8      	movs	r2, #200	@ 0xc8
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c44:	e656      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 900) {
 8001c46:	f001 f989 	bl	8002f5c <HAL_GetTick>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a44      	ldr	r2, [pc, #272]	@ (8001d60 <main+0x4f0>)
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001c56:	d904      	bls.n	8001c62 <main+0x3f2>
				htim3.Instance->CCR1 = 180;
 8001c58:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <main+0x4e4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	22b4      	movs	r2, #180	@ 0xb4
 8001c5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c60:	e648      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 800) {
 8001c62:	f001 f97b 	bl	8002f5c <HAL_GetTick>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a3d      	ldr	r2, [pc, #244]	@ (8001d60 <main+0x4f0>)
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001c72:	d904      	bls.n	8001c7e <main+0x40e>
				htim3.Instance->CCR1 = 160;
 8001c74:	4b37      	ldr	r3, [pc, #220]	@ (8001d54 <main+0x4e4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	22a0      	movs	r2, #160	@ 0xa0
 8001c7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c7c:	e63a      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 700) {
 8001c7e:	f001 f96d 	bl	8002f5c <HAL_GetTick>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a36      	ldr	r2, [pc, #216]	@ (8001d60 <main+0x4f0>)
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001c8e:	d904      	bls.n	8001c9a <main+0x42a>
				htim3.Instance->CCR1 = 140;
 8001c90:	4b30      	ldr	r3, [pc, #192]	@ (8001d54 <main+0x4e4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	228c      	movs	r2, #140	@ 0x8c
 8001c96:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c98:	e62c      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 600) {
 8001c9a:	f001 f95f 	bl	8002f5c <HAL_GetTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <main+0x4f0>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001caa:	d904      	bls.n	8001cb6 <main+0x446>
				htim3.Instance->CCR1 = 120;
 8001cac:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <main+0x4e4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2278      	movs	r2, #120	@ 0x78
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cb4:	e61e      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 500) {
 8001cb6:	f001 f951 	bl	8002f5c <HAL_GetTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <main+0x4f0>)
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cc6:	d904      	bls.n	8001cd2 <main+0x462>
				htim3.Instance->CCR1 = 100;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <main+0x4e4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2264      	movs	r2, #100	@ 0x64
 8001cce:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cd0:	e610      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 400) {
 8001cd2:	f001 f943 	bl	8002f5c <HAL_GetTick>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a21      	ldr	r2, [pc, #132]	@ (8001d60 <main+0x4f0>)
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001ce2:	d904      	bls.n	8001cee <main+0x47e>
				htim3.Instance->CCR1 = 80;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <main+0x4e4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2250      	movs	r2, #80	@ 0x50
 8001cea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cec:	e602      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 300) {
 8001cee:	f001 f935 	bl	8002f5c <HAL_GetTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <main+0x4f0>)
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001cfe:	d904      	bls.n	8001d0a <main+0x49a>
				htim3.Instance->CCR1 = 60;
 8001d00:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <main+0x4e4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	223c      	movs	r2, #60	@ 0x3c
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d08:	e5f4      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 200) {
 8001d0a:	f001 f927 	bl	8002f5c <HAL_GetTick>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <main+0x4f0>)
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	2bc8      	cmp	r3, #200	@ 0xc8
 8001d18:	d904      	bls.n	8001d24 <main+0x4b4>
				htim3.Instance->CCR1 = 40;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <main+0x4e4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2228      	movs	r2, #40	@ 0x28
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d22:	e5e7      	b.n	80018f4 <main+0x84>
			}
			else if(HAL_GetTick() - animTimeMs > 100) {
 8001d24:	f001 f91a 	bl	8002f5c <HAL_GetTick>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <main+0x4f0>)
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	2b64      	cmp	r3, #100	@ 0x64
 8001d32:	d904      	bls.n	8001d3e <main+0x4ce>
				htim3.Instance->CCR1 = 20;
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <main+0x4e4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2214      	movs	r2, #20
 8001d3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d3c:	e5da      	b.n	80018f4 <main+0x84>
			}
			else {
				htim3.Instance->CCR1 = 0;
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <main+0x4e4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_GetTick() - adcMs > 800 && !bylo) {
 8001d46:	e5d5      	b.n	80018f4 <main+0x84>
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000258 	.word	0x20000258
 8001d50:	2000000d 	.word	0x2000000d
 8001d54:	20000210 	.word	0x20000210
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	2000025b 	.word	0x2000025b
 8001d60:	20000260 	.word	0x20000260

08001d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b094      	sub	sp, #80	@ 0x50
 8001d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	2230      	movs	r2, #48	@ 0x30
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fdac 	bl	80068d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <SystemClock_Config+0xcc>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	4a27      	ldr	r2, [pc, #156]	@ (8001e30 <SystemClock_Config+0xcc>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <SystemClock_Config+0xcc>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <SystemClock_Config+0xd0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001db0:	4a20      	ldr	r2, [pc, #128]	@ (8001e34 <SystemClock_Config+0xd0>)
 8001db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <SystemClock_Config+0xd0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dcc:	2310      	movs	r3, #16
 8001dce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001ddc:	2340      	movs	r3, #64	@ 0x40
 8001dde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001de4:	2304      	movs	r3, #4
 8001de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 f931 	bl	8005054 <HAL_RCC_OscConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001df8:	f000 fa72 	bl	80022e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001e04:	2390      	movs	r3, #144	@ 0x90
 8001e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fb93 	bl	8005544 <HAL_RCC_ClockConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e24:	f000 fa5c 	bl	80022e0 <Error_Handler>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3750      	adds	r7, #80	@ 0x50
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40007000 	.word	0x40007000

08001e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <MX_ADC1_Init+0x9c>)
 8001e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e68:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <MX_ADC1_Init+0xa0>)
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e96:	480e      	ldr	r0, [pc, #56]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001e98:	f001 f890 	bl	8002fbc <HAL_ADC_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ea2:	f000 fa1d 	bl	80022e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	@ (8001ed0 <MX_ADC1_Init+0x98>)
 8001eb8:	f001 fa44 	bl	8003344 <HAL_ADC_ConfigChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ec2:	f000 fa0d 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000090 	.word	0x20000090
 8001ed4:	40012000 	.word	0x40012000
 8001ed8:	0f000001 	.word	0x0f000001

08001edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001ee2:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <MX_I2C1_Init+0x54>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001ee8:	4a12      	ldr	r2, [pc, #72]	@ (8001f34 <MX_I2C1_Init+0x58>)
 8001eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001efa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	@ (8001f2c <MX_I2C1_Init+0x50>)
 8001f1a:	f001 ff11 	bl	8003d40 <HAL_I2C_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f24:	f000 f9dc 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200000d8 	.word	0x200000d8
 8001f30:	40005400 	.word	0x40005400
 8001f34:	000186a0 	.word	0x000186a0

08001f38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f3e:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <MX_I2C2_Init+0x58>)
 8001f40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f44:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <MX_I2C2_Init+0x5c>)
 8001f46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f4e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_I2C2_Init+0x54>)
 8001f78:	f001 fee2 	bl	8003d40 <HAL_I2C_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001f82:	f000 f9ad 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000012c 	.word	0x2000012c
 8001f90:	40005800 	.word	0x40005800
 8001f94:	00061a80 	.word	0x00061a80

08001f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2224      	movs	r2, #36	@ 0x24
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fc92 	bl	80068d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	@ (800203c <MX_TIM1_Init+0xa4>)
 8001fb6:	4a22      	ldr	r2, [pc, #136]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <MX_TIM1_Init+0xa4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <MX_TIM1_Init+0xa4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <MX_TIM1_Init+0xa4>)
 8001fc8:	2210      	movs	r2, #16
 8001fca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <MX_TIM1_Init+0xa4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <MX_TIM1_Init+0xa4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	@ (800203c <MX_TIM1_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4619      	mov	r1, r3
 8002008:	480c      	ldr	r0, [pc, #48]	@ (800203c <MX_TIM1_Init+0xa4>)
 800200a:	f003 fe23 	bl	8005c54 <HAL_TIM_Encoder_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002014:	f000 f964 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_TIM1_Init+0xa4>)
 8002026:	f004 fbab 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002030:	f000 f956 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	3730      	adds	r7, #48	@ 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000180 	.word	0x20000180
 8002040:	40010000 	.word	0x40010000

08002044 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	@ 0x38
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002074:	4b2c      	ldr	r3, [pc, #176]	@ (8002128 <MX_TIM2_Init+0xe4>)
 8002076:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800207a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800207c:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <MX_TIM2_Init+0xe4>)
 800207e:	227f      	movs	r2, #127	@ 0x7f
 8002080:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <MX_TIM2_Init+0xe4>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <MX_TIM2_Init+0xe4>)
 800208a:	2214      	movs	r2, #20
 800208c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <MX_TIM2_Init+0xe4>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <MX_TIM2_Init+0xe4>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800209a:	4823      	ldr	r0, [pc, #140]	@ (8002128 <MX_TIM2_Init+0xe4>)
 800209c:	f003 fc1e 	bl	80058dc <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80020a6:	f000 f91b 	bl	80022e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020b4:	4619      	mov	r1, r3
 80020b6:	481c      	ldr	r0, [pc, #112]	@ (8002128 <MX_TIM2_Init+0xe4>)
 80020b8:	f003 ffc2 	bl	8006040 <HAL_TIM_ConfigClockSource>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80020c2:	f000 f90d 	bl	80022e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020c6:	4818      	ldr	r0, [pc, #96]	@ (8002128 <MX_TIM2_Init+0xe4>)
 80020c8:	f003 fc57 	bl	800597a <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80020d2:	f000 f905 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020de:	f107 0320 	add.w	r3, r7, #32
 80020e2:	4619      	mov	r1, r3
 80020e4:	4810      	ldr	r0, [pc, #64]	@ (8002128 <MX_TIM2_Init+0xe4>)
 80020e6:	f004 fb4b 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80020f0:	f000 f8f6 	bl	80022e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f4:	2360      	movs	r3, #96	@ 0x60
 80020f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2204      	movs	r2, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4807      	ldr	r0, [pc, #28]	@ (8002128 <MX_TIM2_Init+0xe4>)
 800210c:	f003 fed6 	bl	8005ebc <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002116:	f000 f8e3 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800211a:	4803      	ldr	r0, [pc, #12]	@ (8002128 <MX_TIM2_Init+0xe4>)
 800211c:	f000 fdaa 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 8002120:	bf00      	nop
 8002122:	3738      	adds	r7, #56	@ 0x38
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200001c8 	.word	0x200001c8

0800212c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	@ 0x38
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 0320 	add.w	r3, r7, #32
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
 8002158:	615a      	str	r2, [r3, #20]
 800215a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800215c:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <MX_TIM3_Init+0xe4>)
 800215e:	4a2d      	ldr	r2, [pc, #180]	@ (8002214 <MX_TIM3_Init+0xe8>)
 8002160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002162:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <MX_TIM3_Init+0xe4>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002168:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <MX_TIM3_Init+0xe4>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800216e:	4b28      	ldr	r3, [pc, #160]	@ (8002210 <MX_TIM3_Init+0xe4>)
 8002170:	22ff      	movs	r2, #255	@ 0xff
 8002172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <MX_TIM3_Init+0xe4>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <MX_TIM3_Init+0xe4>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002180:	4823      	ldr	r0, [pc, #140]	@ (8002210 <MX_TIM3_Init+0xe4>)
 8002182:	f003 fbab 	bl	80058dc <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800218c:	f000 f8a8 	bl	80022e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800219a:	4619      	mov	r1, r3
 800219c:	481c      	ldr	r0, [pc, #112]	@ (8002210 <MX_TIM3_Init+0xe4>)
 800219e:	f003 ff4f 	bl	8006040 <HAL_TIM_ConfigClockSource>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80021a8:	f000 f89a 	bl	80022e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021ac:	4818      	ldr	r0, [pc, #96]	@ (8002210 <MX_TIM3_Init+0xe4>)
 80021ae:	f003 fbe4 	bl	800597a <HAL_TIM_PWM_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80021b8:	f000 f892 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	4619      	mov	r1, r3
 80021ca:	4811      	ldr	r0, [pc, #68]	@ (8002210 <MX_TIM3_Init+0xe4>)
 80021cc:	f004 fad8 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80021d6:	f000 f883 	bl	80022e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021da:	2360      	movs	r3, #96	@ 0x60
 80021dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4807      	ldr	r0, [pc, #28]	@ (8002210 <MX_TIM3_Init+0xe4>)
 80021f2:	f003 fe63 	bl	8005ebc <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80021fc:	f000 f870 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002200:	4803      	ldr	r0, [pc, #12]	@ (8002210 <MX_TIM3_Init+0xe4>)
 8002202:	f000 fd37 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 8002206:	bf00      	nop
 8002208:	3738      	adds	r7, #56	@ 0x38
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000210 	.word	0x20000210
 8002214:	40000400 	.word	0x40000400

08002218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <MX_GPIO_Init+0xbc>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <MX_GPIO_Init+0xbc>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <MX_GPIO_Init+0xbc>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <MX_GPIO_Init+0xbc>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a20      	ldr	r2, [pc, #128]	@ (80022d4 <MX_GPIO_Init+0xbc>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <MX_GPIO_Init+0xbc>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BATT_SENSE_EN_GPIO_Port, BATT_SENSE_EN_Pin, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800226c:	481a      	ldr	r0, [pc, #104]	@ (80022d8 <MX_GPIO_Init+0xc0>)
 800226e:	f001 fd35 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002272:	2303      	movs	r3, #3
 8002274:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800227a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227c:	2301      	movs	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4619      	mov	r1, r3
 8002286:	4815      	ldr	r0, [pc, #84]	@ (80022dc <MX_GPIO_Init+0xc4>)
 8002288:	f001 fb8c 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_SENSE_EN_Pin */
  GPIO_InitStruct.Pin = BATT_SENSE_EN_Pin;
 800228c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BATT_SENSE_EN_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	4619      	mov	r1, r3
 80022a4:	480c      	ldr	r0, [pc, #48]	@ (80022d8 <MX_GPIO_Init+0xc0>)
 80022a6:	f001 fb7d 	bl	80039a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2006      	movs	r0, #6
 80022b0:	f001 fb41 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022b4:	2006      	movs	r0, #6
 80022b6:	f001 fb5a 	bl	800396e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2007      	movs	r0, #7
 80022c0:	f001 fb39 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022c4:	2007      	movs	r0, #7
 80022c6:	f001 fb52 	bl	800396e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ca:	bf00      	nop
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020400 	.word	0x40020400

080022e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <Error_Handler+0x8>

080022ec <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af04      	add	r7, sp, #16
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2301      	movs	r3, #1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	1dfb      	adds	r3, r7, #7
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	2200      	movs	r2, #0
 8002318:	2178      	movs	r1, #120	@ 0x78
 800231a:	4803      	ldr	r0, [pc, #12]	@ (8002328 <ssd1306_WriteCommand+0x2c>)
 800231c:	f002 f984 	bl	8004628 <HAL_I2C_Mem_Write>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000012c 	.word	0x2000012c

0800232c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af04      	add	r7, sp, #16
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800233e:	9202      	str	r2, [sp, #8]
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	2240      	movs	r2, #64	@ 0x40
 800234a:	2178      	movs	r1, #120	@ 0x78
 800234c:	4803      	ldr	r0, [pc, #12]	@ (800235c <ssd1306_WriteData+0x30>)
 800234e:	f002 f96b 	bl	8004628 <HAL_I2C_Mem_Write>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000012c 	.word	0x2000012c

08002360 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002364:	f7ff ffc2 	bl	80022ec <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002368:	2064      	movs	r0, #100	@ 0x64
 800236a:	f000 fe03 	bl	8002f74 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800236e:	2000      	movs	r0, #0
 8002370:	f000 faec 	bl	800294c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002374:	2020      	movs	r0, #32
 8002376:	f7ff ffc1 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff ffbe 	bl	80022fc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002380:	20b0      	movs	r0, #176	@ 0xb0
 8002382:	f7ff ffbb 	bl	80022fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8002386:	20c0      	movs	r0, #192	@ 0xc0
 8002388:	f7ff ffb8 	bl	80022fc <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff ffb5 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002392:	2010      	movs	r0, #16
 8002394:	f7ff ffb2 	bl	80022fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002398:	2040      	movs	r0, #64	@ 0x40
 800239a:	f7ff ffaf 	bl	80022fc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800239e:	20ff      	movs	r0, #255	@ 0xff
 80023a0:	f000 fac1 	bl	8002926 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80023a4:	20a0      	movs	r0, #160	@ 0xa0
 80023a6:	f7ff ffa9 	bl	80022fc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80023aa:	20a6      	movs	r0, #166	@ 0xa6
 80023ac:	f7ff ffa6 	bl	80022fc <ssd1306_WriteCommand>
#endif

// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
 80023b0:	20ff      	movs	r0, #255	@ 0xff
 80023b2:	f7ff ffa3 	bl	80022fc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
 80023b6:	203f      	movs	r0, #63	@ 0x3f
 80023b8:	f7ff ffa0 	bl	80022fc <ssd1306_WriteCommand>
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023bc:	20a4      	movs	r0, #164	@ 0xa4
 80023be:	f7ff ff9d 	bl	80022fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80023c2:	20d3      	movs	r0, #211	@ 0xd3
 80023c4:	f7ff ff9a 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7ff ff97 	bl	80022fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023ce:	20d5      	movs	r0, #213	@ 0xd5
 80023d0:	f7ff ff94 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80023d4:	20f0      	movs	r0, #240	@ 0xf0
 80023d6:	f7ff ff91 	bl	80022fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80023da:	20d9      	movs	r0, #217	@ 0xd9
 80023dc:	f7ff ff8e 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80023e0:	2022      	movs	r0, #34	@ 0x22
 80023e2:	f7ff ff8b 	bl	80022fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80023e6:	20da      	movs	r0, #218	@ 0xda
 80023e8:	f7ff ff88 	bl	80022fc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
#elif (SSD1306_HEIGHT == 128)
    ssd1306_WriteCommand(0x12);
 80023ec:	2012      	movs	r0, #18
 80023ee:	f7ff ff85 	bl	80022fc <ssd1306_WriteCommand>
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80023f2:	20db      	movs	r0, #219	@ 0xdb
 80023f4:	f7ff ff82 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80023f8:	2020      	movs	r0, #32
 80023fa:	f7ff ff7f 	bl	80022fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80023fe:	208d      	movs	r0, #141	@ 0x8d
 8002400:	f7ff ff7c 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002404:	2014      	movs	r0, #20
 8002406:	f7ff ff79 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800240a:	2001      	movs	r0, #1
 800240c:	f000 fa9e 	bl	800294c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002410:	2000      	movs	r0, #0
 8002412:	f000 f80f 	bl	8002434 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002416:	f000 f825 	bl	8002464 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800241a:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <ssd1306_Init+0xd0>)
 800241c:	2200      	movs	r2, #0
 800241e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <ssd1306_Init+0xd0>)
 8002422:	2200      	movs	r2, #0
 8002424:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002426:	4b02      	ldr	r3, [pc, #8]	@ (8002430 <ssd1306_Init+0xd0>)
 8002428:	2201      	movs	r2, #1
 800242a:	711a      	strb	r2, [r3, #4]
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000a8c 	.word	0x20000a8c

08002434 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <ssd1306_Fill+0x14>
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <ssd1306_Fill+0x16>
 8002448:	23ff      	movs	r3, #255	@ 0xff
 800244a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800244e:	4619      	mov	r1, r3
 8002450:	4803      	ldr	r0, [pc, #12]	@ (8002460 <ssd1306_Fill+0x2c>)
 8002452:	f004 fa3d 	bl	80068d0 <memset>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000028c 	.word	0x2000028c

08002464 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	e016      	b.n	800249e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	3b50      	subs	r3, #80	@ 0x50
 8002474:	b2db      	uxtb	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff40 	bl	80022fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff ff3d 	bl	80022fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002482:	2010      	movs	r0, #16
 8002484:	f7ff ff3a 	bl	80022fc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	01db      	lsls	r3, r3, #7
 800248c:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <ssd1306_UpdateScreen+0x4c>)
 800248e:	4413      	add	r3, r2
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff4a 	bl	800232c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	3301      	adds	r3, #1
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d9e5      	bls.n	8002470 <ssd1306_UpdateScreen+0xc>
    }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000028c 	.word	0x2000028c

080024b4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	460b      	mov	r3, r1
 80024c0:	71bb      	strb	r3, [r7, #6]
 80024c2:	4613      	mov	r3, r2
 80024c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db3e      	blt.n	800254c <ssd1306_DrawPixel+0x98>
 80024ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db3a      	blt.n	800254c <ssd1306_DrawPixel+0x98>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80024d6:	797b      	ldrb	r3, [r7, #5]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d11a      	bne.n	8002512 <ssd1306_DrawPixel+0x5e>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	b2d8      	uxtb	r0, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	01db      	lsls	r3, r3, #7
 80024e8:	4413      	add	r3, r2
 80024ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <ssd1306_DrawPixel+0xa4>)
 80024ec:	5cd3      	ldrb	r3, [r2, r3]
 80024ee:	b25a      	sxtb	r2, r3
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b259      	sxtb	r1, r3
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	4603      	mov	r3, r0
 8002506:	01db      	lsls	r3, r3, #7
 8002508:	4413      	add	r3, r2
 800250a:	b2c9      	uxtb	r1, r1
 800250c:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <ssd1306_DrawPixel+0xa4>)
 800250e:	54d1      	strb	r1, [r2, r3]
 8002510:	e01d      	b.n	800254e <ssd1306_DrawPixel+0x9a>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002512:	79fa      	ldrb	r2, [r7, #7]
 8002514:	79bb      	ldrb	r3, [r7, #6]
 8002516:	08db      	lsrs	r3, r3, #3
 8002518:	b2d8      	uxtb	r0, r3
 800251a:	4603      	mov	r3, r0
 800251c:	01db      	lsls	r3, r3, #7
 800251e:	4413      	add	r3, r2
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <ssd1306_DrawPixel+0xa4>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	b25a      	sxtb	r2, r3
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	b25b      	sxtb	r3, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	b25b      	sxtb	r3, r3
 8002538:	4013      	ands	r3, r2
 800253a:	b259      	sxtb	r1, r3
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	4603      	mov	r3, r0
 8002540:	01db      	lsls	r3, r3, #7
 8002542:	4413      	add	r3, r2
 8002544:	b2c9      	uxtb	r1, r1
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <ssd1306_DrawPixel+0xa4>)
 8002548:	54d1      	strb	r1, [r2, r3]
 800254a:	e000      	b.n	800254e <ssd1306_DrawPixel+0x9a>
        return;
 800254c:	bf00      	nop
    }
}
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	2000028c 	.word	0x2000028c

0800255c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	4604      	mov	r4, r0
 8002564:	4638      	mov	r0, r7
 8002566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800256a:	4623      	mov	r3, r4
 800256c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b1f      	cmp	r3, #31
 8002572:	d902      	bls.n	800257a <ssd1306_WriteChar+0x1e>
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b7e      	cmp	r3, #126	@ 0x7e
 8002578:	d901      	bls.n	800257e <ssd1306_WriteChar+0x22>
        return 0;
 800257a:	2300      	movs	r3, #0
 800257c:	e077      	b.n	800266e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800257e:	4b3e      	ldr	r3, [pc, #248]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	783b      	ldrb	r3, [r7, #0]
 8002586:	4413      	add	r3, r2
 8002588:	2b80      	cmp	r3, #128	@ 0x80
 800258a:	dc06      	bgt.n	800259a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800258c:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 800258e:	885b      	ldrh	r3, [r3, #2]
 8002590:	461a      	mov	r2, r3
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002596:	2b80      	cmp	r3, #128	@ 0x80
 8002598:	dd01      	ble.n	800259e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800259a:	2300      	movs	r3, #0
 800259c:	e067      	b.n	800266e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e04e      	b.n	8002642 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	3b20      	subs	r3, #32
 80025aa:	7879      	ldrb	r1, [r7, #1]
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	440b      	add	r3, r1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e036      	b.n	8002632 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80025d4:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4413      	add	r3, r2
 80025e0:	b2d8      	uxtb	r0, r3
 80025e2:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 80025e4:	885b      	ldrh	r3, [r3, #2]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7ff ff5d 	bl	80024b4 <ssd1306_DrawPixel>
 80025fa:	e017      	b.n	800262c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80025fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	b2d8      	uxtb	r0, r3
 800260a:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 800260c:	885b      	ldrh	r3, [r3, #2]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b2d9      	uxtb	r1, r3
 8002618:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	f7ff ff44 	bl	80024b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3301      	adds	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	783b      	ldrb	r3, [r7, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4293      	cmp	r3, r2
 800263a:	d3c3      	bcc.n	80025c4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	3301      	adds	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	787b      	ldrb	r3, [r7, #1]
 8002644:	461a      	mov	r2, r3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4293      	cmp	r3, r2
 800264a:	d3ab      	bcc.n	80025a4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800264c:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	2a00      	cmp	r2, #0
 8002654:	d005      	beq.n	8002662 <ssd1306_WriteChar+0x106>
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	3a20      	subs	r2, #32
 800265c:	440a      	add	r2, r1
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	e000      	b.n	8002664 <ssd1306_WriteChar+0x108>
 8002662:	783a      	ldrb	r2, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b03      	ldr	r3, [pc, #12]	@ (8002678 <ssd1306_WriteChar+0x11c>)
 800266a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	@ 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	20000a8c 	.word	0x20000a8c

0800267c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	4638      	mov	r0, r7
 8002686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800268a:	e013      	b.n	80026b4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	7818      	ldrb	r0, [r3, #0]
 8002690:	7e3b      	ldrb	r3, [r7, #24]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	463b      	mov	r3, r7
 8002696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002698:	f7ff ff60 	bl	800255c <ssd1306_WriteChar>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d002      	beq.n	80026ae <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	e008      	b.n	80026c0 <ssd1306_WriteString+0x44>
        }
        str++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e7      	bne.n	800268c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	781b      	ldrb	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	460a      	mov	r2, r1
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <ssd1306_SetCursor+0x2c>)
 80026de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80026e0:	79bb      	ldrb	r3, [r7, #6]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <ssd1306_SetCursor+0x2c>)
 80026e6:	805a      	strh	r2, [r3, #2]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	20000a8c 	.word	0x20000a8c

080026f8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b089      	sub	sp, #36	@ 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4623      	mov	r3, r4
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	4603      	mov	r3, r0
 800270c:	71bb      	strb	r3, [r7, #6]
 800270e:	460b      	mov	r3, r1
 8002710:	717b      	strb	r3, [r7, #5]
 8002712:	4613      	mov	r3, r2
 8002714:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002716:	797a      	ldrb	r2, [r7, #5]
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bfb8      	it	lt
 8002720:	425b      	neglt	r3, r3
 8002722:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002724:	793a      	ldrb	r2, [r7, #4]
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	bfb8      	it	lt
 800272e:	425b      	neglt	r3, r3
 8002730:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002732:	79fa      	ldrb	r2, [r7, #7]
 8002734:	797b      	ldrb	r3, [r7, #5]
 8002736:	429a      	cmp	r2, r3
 8002738:	d201      	bcs.n	800273e <ssd1306_Line+0x46>
 800273a:	2301      	movs	r3, #1
 800273c:	e001      	b.n	8002742 <ssd1306_Line+0x4a>
 800273e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002742:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002744:	79ba      	ldrb	r2, [r7, #6]
 8002746:	793b      	ldrb	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	d201      	bcs.n	8002750 <ssd1306_Line+0x58>
 800274c:	2301      	movs	r3, #1
 800274e:	e001      	b.n	8002754 <ssd1306_Line+0x5c>
 8002750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002754:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800275e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002762:	7939      	ldrb	r1, [r7, #4]
 8002764:	797b      	ldrb	r3, [r7, #5]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fea4 	bl	80024b4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800276c:	e024      	b.n	80027b8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800276e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002772:	79b9      	ldrb	r1, [r7, #6]
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fe9c 	bl	80024b4 <ssd1306_DrawPixel>
        error2 = error * 2;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	425b      	negs	r3, r3
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	429a      	cmp	r2, r3
 800278a:	dd08      	ble.n	800279e <ssd1306_Line+0xa6>
            error -= deltaY;
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	4413      	add	r3, r2
 800279c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	da08      	bge.n	80027b8 <ssd1306_Line+0xc0>
            error += deltaX;
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	79bb      	ldrb	r3, [r7, #6]
 80027b4:	4413      	add	r3, r2
 80027b6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80027b8:	79fa      	ldrb	r2, [r7, #7]
 80027ba:	797b      	ldrb	r3, [r7, #5]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1d6      	bne.n	800276e <ssd1306_Line+0x76>
 80027c0:	79ba      	ldrb	r2, [r7, #6]
 80027c2:	793b      	ldrb	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1d2      	bne.n	800276e <ssd1306_Line+0x76>
        }
    }
    return;
 80027c8:	bf00      	nop
}
 80027ca:	3724      	adds	r7, #36	@ 0x24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4604      	mov	r4, r0
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	71fb      	strb	r3, [r7, #7]
 80027e2:	4603      	mov	r3, r0
 80027e4:	71bb      	strb	r3, [r7, #6]
 80027e6:	460b      	mov	r3, r1
 80027e8:	717b      	strb	r3, [r7, #5]
 80027ea:	4613      	mov	r3, r2
 80027ec:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	797b      	ldrb	r3, [r7, #5]
 80027f2:	4293      	cmp	r3, r2
 80027f4:	bf28      	it	cs
 80027f6:	4613      	movcs	r3, r2
 80027f8:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80027fa:	797a      	ldrb	r2, [r7, #5]
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4293      	cmp	r3, r2
 8002800:	bf38      	it	cc
 8002802:	4613      	movcc	r3, r2
 8002804:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002806:	79ba      	ldrb	r2, [r7, #6]
 8002808:	793b      	ldrb	r3, [r7, #4]
 800280a:	4293      	cmp	r3, r2
 800280c:	bf28      	it	cs
 800280e:	4613      	movcs	r3, r2
 8002810:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002812:	793a      	ldrb	r2, [r7, #4]
 8002814:	79bb      	ldrb	r3, [r7, #6]
 8002816:	4293      	cmp	r3, r2
 8002818:	bf38      	it	cc
 800281a:	4613      	movcc	r3, r2
 800281c:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800281e:	7afb      	ldrb	r3, [r7, #11]
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e017      	b.n	8002854 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002824:	7b7b      	ldrb	r3, [r7, #13]
 8002826:	73bb      	strb	r3, [r7, #14]
 8002828:	e009      	b.n	800283e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800282a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800282e:	7bf9      	ldrb	r1, [r7, #15]
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fe3e 	bl	80024b4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	3301      	adds	r3, #1
 800283c:	73bb      	strb	r3, [r7, #14]
 800283e:	7bba      	ldrb	r2, [r7, #14]
 8002840:	7b3b      	ldrb	r3, [r7, #12]
 8002842:	429a      	cmp	r2, r3
 8002844:	d803      	bhi.n	800284e <ssd1306_FillRectangle+0x7e>
 8002846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800284a:	2b00      	cmp	r3, #0
 800284c:	daed      	bge.n	800282a <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3301      	adds	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	7abb      	ldrb	r3, [r7, #10]
 8002858:	429a      	cmp	r2, r3
 800285a:	d804      	bhi.n	8002866 <ssd1306_FillRectangle+0x96>
 800285c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	dadf      	bge.n	8002824 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002864:	bf00      	nop
 8002866:	bf00      	nop
}
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}

0800286e <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	603a      	str	r2, [r7, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
 800287c:	460b      	mov	r3, r1
 800287e:	71bb      	strb	r3, [r7, #6]
 8002880:	4613      	mov	r3, r2
 8002882:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002884:	797b      	ldrb	r3, [r7, #5]
 8002886:	3307      	adds	r3, #7
 8002888:	2b00      	cmp	r3, #0
 800288a:	da00      	bge.n	800288e <ssd1306_DrawBitmap+0x20>
 800288c:	3307      	adds	r3, #7
 800288e:	10db      	asrs	r3, r3, #3
 8002890:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db3f      	blt.n	800291e <ssd1306_DrawBitmap+0xb0>
 800289e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db3b      	blt.n	800291e <ssd1306_DrawBitmap+0xb0>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	73bb      	strb	r3, [r7, #14]
 80028aa:	e033      	b.n	8002914 <ssd1306_DrawBitmap+0xa6>
        for (uint8_t i = 0; i < w; i++) {
 80028ac:	2300      	movs	r3, #0
 80028ae:	737b      	strb	r3, [r7, #13]
 80028b0:	e026      	b.n	8002900 <ssd1306_DrawBitmap+0x92>
            if (i & 7) {
 80028b2:	7b7b      	ldrb	r3, [r7, #13]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <ssd1306_DrawBitmap+0x56>
                byte <<= 1;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	e00d      	b.n	80028e0 <ssd1306_DrawBitmap+0x72>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	7b7a      	ldrb	r2, [r7, #13]
 80028d0:	08d2      	lsrs	r2, r2, #3
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4413      	add	r3, r2
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da08      	bge.n	80028fa <ssd1306_DrawBitmap+0x8c>
                ssd1306_DrawPixel(x + i, y, color);
 80028e8:	79fa      	ldrb	r2, [r7, #7]
 80028ea:	7b7b      	ldrb	r3, [r7, #13]
 80028ec:	4413      	add	r3, r2
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	7f3a      	ldrb	r2, [r7, #28]
 80028f2:	79b9      	ldrb	r1, [r7, #6]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fddd 	bl	80024b4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	3301      	adds	r3, #1
 80028fe:	737b      	strb	r3, [r7, #13]
 8002900:	7b7a      	ldrb	r2, [r7, #13]
 8002902:	797b      	ldrb	r3, [r7, #5]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3d4      	bcc.n	80028b2 <ssd1306_DrawBitmap+0x44>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002908:	7bbb      	ldrb	r3, [r7, #14]
 800290a:	3301      	adds	r3, #1
 800290c:	73bb      	strb	r3, [r7, #14]
 800290e:	79bb      	ldrb	r3, [r7, #6]
 8002910:	3301      	adds	r3, #1
 8002912:	71bb      	strb	r3, [r7, #6]
 8002914:	7bba      	ldrb	r2, [r7, #14]
 8002916:	7e3b      	ldrb	r3, [r7, #24]
 8002918:	429a      	cmp	r2, r3
 800291a:	d3c7      	bcc.n	80028ac <ssd1306_DrawBitmap+0x3e>
            }
        }
    }
    return;
 800291c:	e000      	b.n	8002920 <ssd1306_DrawBitmap+0xb2>
        return;
 800291e:	bf00      	nop
}
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002930:	2381      	movs	r3, #129	@ 0x81
 8002932:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fce0 	bl	80022fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fcdc 	bl	80022fc <ssd1306_WriteCommand>
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800295c:	23af      	movs	r3, #175	@ 0xaf
 800295e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002960:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <ssd1306_SetDisplayOn+0x38>)
 8002962:	2201      	movs	r2, #1
 8002964:	715a      	strb	r2, [r3, #5]
 8002966:	e004      	b.n	8002972 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002968:	23ae      	movs	r3, #174	@ 0xae
 800296a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <ssd1306_SetDisplayOn+0x38>)
 800296e:	2200      	movs	r2, #0
 8002970:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fcc1 	bl	80022fc <ssd1306_WriteCommand>
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000a8c 	.word	0x20000a8c

08002988 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_MspInit+0x4c>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <HAL_MspInit+0x4c>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800299c:	6453      	str	r3, [r2, #68]	@ 0x44
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800

080029d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	@ 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <HAL_ADC_MspInit+0x7c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d127      	bne.n	8002a4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <HAL_ADC_MspInit+0x80>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	4a15      	ldr	r2, [pc, #84]	@ (8002a58 <HAL_ADC_MspInit+0x80>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0a:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <HAL_ADC_MspInit+0x80>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <HAL_ADC_MspInit+0x80>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a58 <HAL_ADC_MspInit+0x80>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <HAL_ADC_MspInit+0x80>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a36:	2303      	movs	r3, #3
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	@ (8002a5c <HAL_ADC_MspInit+0x84>)
 8002a46:	f000 ffad 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	@ 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40012000 	.word	0x40012000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020000 	.word	0x40020000

08002a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	@ 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b68 <HAL_I2C_MspInit+0x108>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d12c      	bne.n	8002adc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	4b39      	ldr	r3, [pc, #228]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	4a38      	ldr	r2, [pc, #224]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a92:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a9e:	23c0      	movs	r3, #192	@ 0xc0
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa2:	2312      	movs	r3, #18
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482d      	ldr	r0, [pc, #180]	@ (8002b70 <HAL_I2C_MspInit+0x110>)
 8002aba:	f000 ff73 	bl	80039a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002ac8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ace:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ada:	e041      	b.n	8002b60 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a24      	ldr	r2, [pc, #144]	@ (8002b74 <HAL_I2C_MspInit+0x114>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d13c      	bne.n	8002b60 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b08:	2312      	movs	r3, #18
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b14:	2304      	movs	r3, #4
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4814      	ldr	r0, [pc, #80]	@ (8002b70 <HAL_I2C_MspInit+0x110>)
 8002b20:	f000 ff40 	bl	80039a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b24:	2308      	movs	r3, #8
 8002b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b28:	2312      	movs	r3, #18
 8002b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002b34:	2309      	movs	r3, #9
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480c      	ldr	r0, [pc, #48]	@ (8002b70 <HAL_I2C_MspInit+0x110>)
 8002b40:	f000 ff30 	bl	80039a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4a07      	ldr	r2, [pc, #28]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002b4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_I2C_MspInit+0x10c>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3730      	adds	r7, #48	@ 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020400 	.word	0x40020400
 8002b74:	40005800 	.word	0x40005800

08002b78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	@ (8002bfc <HAL_TIM_Encoder_MspInit+0x84>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12c      	bne.n	8002bf4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a10      	ldr	r2, [pc, #64]	@ (8002c00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002be4:	2301      	movs	r3, #1
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4619      	mov	r1, r3
 8002bee:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bf0:	f000 fed8 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3728      	adds	r7, #40	@ 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020000 	.word	0x40020000

08002c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <HAL_TIM_Base_MspInit+0x64>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <HAL_TIM_Base_MspInit+0x64>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_TIM_Base_MspInit+0x64>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c36:	e012      	b.n	8002c5e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c70 <HAL_TIM_Base_MspInit+0x68>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d10d      	bne.n	8002c5e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_TIM_Base_MspInit+0x64>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a08      	ldr	r2, [pc, #32]	@ (8002c6c <HAL_TIM_Base_MspInit+0x64>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_TIM_Base_MspInit+0x64>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40000400 	.word	0x40000400

08002c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c94:	d11e      	bne.n	8002cd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <HAL_TIM_MspPostInit+0xb0>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a21      	ldr	r2, [pc, #132]	@ (8002d24 <HAL_TIM_MspPostInit+0xb0>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <HAL_TIM_MspPostInit+0xb0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4816      	ldr	r0, [pc, #88]	@ (8002d28 <HAL_TIM_MspPostInit+0xb4>)
 8002cce:	f000 fe69 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cd2:	e022      	b.n	8002d1a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <HAL_TIM_MspPostInit+0xb8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d11d      	bne.n	8002d1a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_TIM_MspPostInit+0xb0>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d24 <HAL_TIM_MspPostInit+0xb0>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_TIM_MspPostInit+0xb0>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cfa:	2340      	movs	r3, #64	@ 0x40
 8002cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	4804      	ldr	r0, [pc, #16]	@ (8002d28 <HAL_TIM_MspPostInit+0xb4>)
 8002d16:	f000 fe45 	bl	80039a4 <HAL_GPIO_Init>
}
 8002d1a:	bf00      	nop
 8002d1c:	3728      	adds	r7, #40	@ 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40000400 	.word	0x40000400

08002d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <NMI_Handler+0x4>

08002d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <HardFault_Handler+0x4>

08002d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <MemManage_Handler+0x4>

08002d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d86:	f000 f8d5 	bl	8002f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f000 ffbc 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002da0:	2002      	movs	r0, #2
 8002da2:	f000 ffb5 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db4:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <_sbrk+0x5c>)
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <_sbrk+0x60>)
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc0:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <_sbrk+0x64>)
 8002dca:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <_sbrk+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d207      	bcs.n	8002dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ddc:	f003 fd80 	bl	80068e0 <__errno>
 8002de0:	4603      	mov	r3, r0
 8002de2:	220c      	movs	r2, #12
 8002de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dea:	e009      	b.n	8002e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a05      	ldr	r2, [pc, #20]	@ (8002e10 <_sbrk+0x64>)
 8002dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20010000 	.word	0x20010000
 8002e0c:	00000400 	.word	0x00000400
 8002e10:	20000a94 	.word	0x20000a94
 8002e14:	20000be8 	.word	0x20000be8

08002e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <SystemInit+0x20>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	4a05      	ldr	r2, [pc, #20]	@ (8002e38 <SystemInit+0x20>)
 8002e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e40:	f7ff ffea 	bl	8002e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e44:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e46:	490d      	ldr	r1, [pc, #52]	@ (8002e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e48:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f003 fd3f 	bl	80068ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6e:	f7fe fcff 	bl	8001870 <main>
  bx  lr    
 8002e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e80:	0800a910 	.word	0x0800a910
  ldr r2, =_sbss
 8002e84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e88:	20000be4 	.word	0x20000be4

08002e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC_IRQHandler>
	...

08002e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <HAL_Init+0x40>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <HAL_Init+0x40>)
 8002ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eac:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a07      	ldr	r2, [pc, #28]	@ (8002ed0 <HAL_Init+0x40>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb8:	2003      	movs	r0, #3
 8002eba:	f000 fd31 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ebe:	200f      	movs	r0, #15
 8002ec0:	f000 f808 	bl	8002ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec4:	f7ff fd60 	bl	8002988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00

08002ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_InitTick+0x54>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <HAL_InitTick+0x58>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fd49 	bl	800398a <HAL_SYSTICK_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00e      	b.n	8002f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	d80a      	bhi.n	8002f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f10:	f000 fd11 	bl	8003936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f14:	4a06      	ldr	r2, [pc, #24]	@ (8002f30 <HAL_InitTick+0x5c>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000014 	.word	0x20000014
 8002f2c:	2000001c 	.word	0x2000001c
 8002f30:	20000018 	.word	0x20000018

08002f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_IncTick+0x20>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_IncTick+0x24>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <HAL_IncTick+0x24>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	2000001c 	.word	0x2000001c
 8002f58:	20000a98 	.word	0x20000a98

08002f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <HAL_GetTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000a98 	.word	0x20000a98

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff ffee 	bl	8002f5c <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f8c:	d005      	beq.n	8002f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_Delay+0x44>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f9a:	bf00      	nop
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d8f7      	bhi.n	8002f9c <HAL_Delay+0x28>
  {
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000001c 	.word	0x2000001c

08002fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e033      	b.n	800303a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fcfc 	bl	80029d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003002:	f023 0302 	bic.w	r3, r3, #2
 8003006:	f043 0202 	orr.w	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 faba 	bl	8003588 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40
 800302a:	e001      	b.n	8003030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADC_Start+0x1a>
 800305a:	2302      	movs	r3, #2
 800305c:	e097      	b.n	800318e <HAL_ADC_Start+0x14a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d018      	beq.n	80030a6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003084:	4b45      	ldr	r3, [pc, #276]	@ (800319c <HAL_ADC_Start+0x158>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a45      	ldr	r2, [pc, #276]	@ (80031a0 <HAL_ADC_Start+0x15c>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9a      	lsrs	r2, r3, #18
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003098:	e002      	b.n	80030a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3b01      	subs	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f9      	bne.n	800309a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d15f      	bne.n	8003174 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f2:	d106      	bne.n	8003102 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	f023 0206 	bic.w	r2, r3, #6
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8003100:	e002      	b.n	8003108 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003110:	4b24      	ldr	r3, [pc, #144]	@ (80031a4 <HAL_ADC_Start+0x160>)
 8003112:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800311c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d129      	bne.n	800318c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e020      	b.n	800318c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a16      	ldr	r2, [pc, #88]	@ (80031a8 <HAL_ADC_Start+0x164>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d11b      	bne.n	800318c <HAL_ADC_Start+0x148>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d114      	bne.n	800318c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	e00b      	b.n	800318c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000014 	.word	0x20000014
 80031a0:	431bde83 	.word	0x431bde83
 80031a4:	40012300 	.word	0x40012300
 80031a8:	40012000 	.word	0x40012000

080031ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_Stop+0x16>
 80031be:	2302      	movs	r3, #2
 80031c0:	e021      	b.n	8003206 <HAL_ADC_Stop+0x5a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322e:	d113      	bne.n	8003258 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800323a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323e:	d10b      	bne.n	8003258 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e063      	b.n	8003320 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003258:	f7ff fe80 	bl	8002f5c <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800325e:	e021      	b.n	80032a4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003266:	d01d      	beq.n	80032a4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_ADC_PollForConversion+0x6c>
 800326e:	f7ff fe75 	bl	8002f5c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d212      	bcs.n	80032a4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b02      	cmp	r3, #2
 800328a:	d00b      	beq.n	80032a4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e03d      	b.n	8003320 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d1d6      	bne.n	8003260 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0212 	mvn.w	r2, #18
 80032ba:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d123      	bne.n	800331e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d11f      	bne.n	800331e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d111      	bne.n	800331e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e105      	b.n	800356c <HAL_ADC_ConfigChannel+0x228>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b09      	cmp	r3, #9
 800336e:	d925      	bls.n	80033bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68d9      	ldr	r1, [r3, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	3b1e      	subs	r3, #30
 8003386:	2207      	movs	r2, #7
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43da      	mvns	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	400a      	ands	r2, r1
 8003394:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68d9      	ldr	r1, [r3, #12]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	4603      	mov	r3, r0
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4403      	add	r3, r0
 80033ae:	3b1e      	subs	r3, #30
 80033b0:	409a      	lsls	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	e022      	b.n	8003402 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	2207      	movs	r2, #7
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	400a      	ands	r2, r1
 80033de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6919      	ldr	r1, [r3, #16]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4403      	add	r3, r0
 80033f8:	409a      	lsls	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d824      	bhi.n	8003454 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	3b05      	subs	r3, #5
 800341c:	221f      	movs	r2, #31
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	400a      	ands	r2, r1
 800342a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	4618      	mov	r0, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	3b05      	subs	r3, #5
 8003446:	fa00 f203 	lsl.w	r2, r0, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	635a      	str	r2, [r3, #52]	@ 0x34
 8003452:	e04c      	b.n	80034ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d824      	bhi.n	80034a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	3b23      	subs	r3, #35	@ 0x23
 800346e:	221f      	movs	r2, #31
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43da      	mvns	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	400a      	ands	r2, r1
 800347c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	4618      	mov	r0, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	3b23      	subs	r3, #35	@ 0x23
 8003498:	fa00 f203 	lsl.w	r2, r0, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034a4:	e023      	b.n	80034ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	3b41      	subs	r3, #65	@ 0x41
 80034b8:	221f      	movs	r2, #31
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	400a      	ands	r2, r1
 80034c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4618      	mov	r0, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b41      	subs	r3, #65	@ 0x41
 80034e2:	fa00 f203 	lsl.w	r2, r0, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ee:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <HAL_ADC_ConfigChannel+0x234>)
 80034f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a21      	ldr	r2, [pc, #132]	@ (800357c <HAL_ADC_ConfigChannel+0x238>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d109      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1cc>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b12      	cmp	r3, #18
 8003502:	d105      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	@ (800357c <HAL_ADC_ConfigChannel+0x238>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d123      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b10      	cmp	r3, #16
 8003520:	d003      	beq.n	800352a <HAL_ADC_ConfigChannel+0x1e6>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b11      	cmp	r3, #17
 8003528:	d11b      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b10      	cmp	r3, #16
 800353c:	d111      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800353e:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <HAL_ADC_ConfigChannel+0x23c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a10      	ldr	r2, [pc, #64]	@ (8003584 <HAL_ADC_ConfigChannel+0x240>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	0c9a      	lsrs	r2, r3, #18
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003554:	e002      	b.n	800355c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f9      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40012300 	.word	0x40012300
 800357c:	40012000 	.word	0x40012000
 8003580:	20000014 	.word	0x20000014
 8003584:	431bde83 	.word	0x431bde83

08003588 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003590:	4b79      	ldr	r3, [pc, #484]	@ (8003778 <ADC_Init+0x1f0>)
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	4a58      	ldr	r2, [pc, #352]	@ (800377c <ADC_Init+0x1f4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d022      	beq.n	8003666 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800362e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6899      	ldr	r1, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e00f      	b.n	8003686 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003684:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0202 	bic.w	r2, r2, #2
 8003694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7e1b      	ldrb	r3, [r3, #24]
 80036a0:	005a      	lsls	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	3b01      	subs	r3, #1
 80036e0:	035a      	lsls	r2, r3, #13
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	e007      	b.n	80036fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800370a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	3b01      	subs	r3, #1
 8003718:	051a      	lsls	r2, r3, #20
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800373e:	025a      	lsls	r2, r3, #9
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003756:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6899      	ldr	r1, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	029a      	lsls	r2, r3, #10
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012300 	.word	0x40012300
 800377c:	0f000001 	.word	0x0f000001

08003780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800379c:	4013      	ands	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b2:	4a04      	ldr	r2, [pc, #16]	@ (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	60d3      	str	r3, [r2, #12]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037cc:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	f003 0307 	and.w	r3, r3, #7
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db0b      	blt.n	800380e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	4907      	ldr	r1, [pc, #28]	@ (800381c <__NVIC_EnableIRQ+0x38>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2001      	movs	r0, #1
 8003806:	fa00 f202 	lsl.w	r2, r0, r2
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000e100 	.word	0xe000e100

08003820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db0a      	blt.n	800384a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	490c      	ldr	r1, [pc, #48]	@ (800386c <__NVIC_SetPriority+0x4c>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003848:	e00a      	b.n	8003860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4908      	ldr	r1, [pc, #32]	@ (8003870 <__NVIC_SetPriority+0x50>)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3b04      	subs	r3, #4
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	440b      	add	r3, r1
 800385e:	761a      	strb	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	@ 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f1c3 0307 	rsb	r3, r3, #7
 800388e:	2b04      	cmp	r3, #4
 8003890:	bf28      	it	cs
 8003892:	2304      	movcs	r3, #4
 8003894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	2b06      	cmp	r3, #6
 800389c:	d902      	bls.n	80038a4 <NVIC_EncodePriority+0x30>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3b03      	subs	r3, #3
 80038a2:	e000      	b.n	80038a6 <NVIC_EncodePriority+0x32>
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43d9      	mvns	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	4313      	orrs	r3, r2
         );
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	@ 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003900:	f7ff ff8e 	bl	8003820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	@ (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff29 	bl	8003780 <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003948:	f7ff ff3e 	bl	80037c8 <__NVIC_GetPriorityGrouping>
 800394c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff8e 	bl	8003874 <NVIC_EncodePriority>
 8003958:	4602      	mov	r2, r0
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff5d 	bl	8003820 <__NVIC_SetPriority>
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff31 	bl	80037e4 <__NVIC_EnableIRQ>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ffa2 	bl	80038dc <SysTick_Config>
 8003998:	4603      	mov	r3, r0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	@ 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e159      	b.n	8003c74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039c0:	2201      	movs	r2, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f040 8148 	bne.w	8003c6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d005      	beq.n	80039f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d130      	bne.n	8003a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 0201 	and.w	r2, r3, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d017      	beq.n	8003a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d123      	bne.n	8003ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	08da      	lsrs	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3208      	adds	r2, #8
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a2 	beq.w	8003c6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b57      	ldr	r3, [pc, #348]	@ (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	4a56      	ldr	r2, [pc, #344]	@ (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b3a:	4b54      	ldr	r3, [pc, #336]	@ (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b46:	4a52      	ldr	r2, [pc, #328]	@ (8003c90 <HAL_GPIO_Init+0x2ec>)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a49      	ldr	r2, [pc, #292]	@ (8003c94 <HAL_GPIO_Init+0x2f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d019      	beq.n	8003ba6 <HAL_GPIO_Init+0x202>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a48      	ldr	r2, [pc, #288]	@ (8003c98 <HAL_GPIO_Init+0x2f4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_GPIO_Init+0x1fe>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a47      	ldr	r2, [pc, #284]	@ (8003c9c <HAL_GPIO_Init+0x2f8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00d      	beq.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a46      	ldr	r2, [pc, #280]	@ (8003ca0 <HAL_GPIO_Init+0x2fc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <HAL_GPIO_Init+0x1f6>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a45      	ldr	r2, [pc, #276]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_GPIO_Init+0x1f2>
 8003b92:	2304      	movs	r3, #4
 8003b94:	e008      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003b96:	2307      	movs	r3, #7
 8003b98:	e006      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e004      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e002      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_GPIO_Init+0x204>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	f002 0203 	and.w	r2, r2, #3
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	4093      	lsls	r3, r2
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb8:	4935      	ldr	r1, [pc, #212]	@ (8003c90 <HAL_GPIO_Init+0x2ec>)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bc6:	4b38      	ldr	r3, [pc, #224]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bea:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c14:	4a24      	ldr	r2, [pc, #144]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c44:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c68:	4a0f      	ldr	r2, [pc, #60]	@ (8003ca8 <HAL_GPIO_Init+0x304>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	f67f aea2 	bls.w	80039c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3724      	adds	r7, #36	@ 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	40020400 	.word	0x40020400
 8003c9c:	40020800 	.word	0x40020800
 8003ca0:	40020c00 	.word	0x40020c00
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40013c00 	.word	0x40013c00

08003cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e001      	b.n	8003cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cec:	787b      	ldrb	r3, [r7, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cf8:	e003      	b.n	8003d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	041a      	lsls	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	619a      	str	r2, [r3, #24]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d1a:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d26:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fd5a 	bl	80017e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e12b      	b.n	8003faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe fe7a 	bl	8002a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	@ 0x24
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003da4:	f001 fd86 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a81      	ldr	r2, [pc, #516]	@ (8003fb4 <HAL_I2C_Init+0x274>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d807      	bhi.n	8003dc4 <HAL_I2C_Init+0x84>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a80      	ldr	r2, [pc, #512]	@ (8003fb8 <HAL_I2C_Init+0x278>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e006      	b.n	8003dd2 <HAL_I2C_Init+0x92>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8003fbc <HAL_I2C_Init+0x27c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf94      	ite	ls
 8003dcc:	2301      	movls	r3, #1
 8003dce:	2300      	movhi	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0e7      	b.n	8003faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a78      	ldr	r2, [pc, #480]	@ (8003fc0 <HAL_I2C_Init+0x280>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9b      	lsrs	r3, r3, #18
 8003de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a6a      	ldr	r2, [pc, #424]	@ (8003fb4 <HAL_I2C_Init+0x274>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d802      	bhi.n	8003e14 <HAL_I2C_Init+0xd4>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	e009      	b.n	8003e28 <HAL_I2C_Init+0xe8>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	4a69      	ldr	r2, [pc, #420]	@ (8003fc4 <HAL_I2C_Init+0x284>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	3301      	adds	r3, #1
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	495c      	ldr	r1, [pc, #368]	@ (8003fb4 <HAL_I2C_Init+0x274>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d819      	bhi.n	8003e7c <HAL_I2C_Init+0x13c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e59      	subs	r1, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_I2C_Init+0x138>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e59      	subs	r1, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	e051      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e04f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <HAL_I2C_Init+0x168>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e012      	b.n	8003ece <HAL_I2C_Init+0x18e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Init+0x196>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e022      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10e      	bne.n	8003efc <HAL_I2C_Init+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e58      	subs	r0, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	440b      	add	r3, r1
 8003eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	6809      	ldr	r1, [r1, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6911      	ldr	r1, [r2, #16]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	000186a0 	.word	0x000186a0
 8003fb8:	001e847f 	.word	0x001e847f
 8003fbc:	003d08ff 	.word	0x003d08ff
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	817b      	strh	r3, [r7, #10]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7fe ffbe 	bl	8002f5c <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	f040 80e0 	bne.w	80041b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2319      	movs	r3, #25
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4970      	ldr	r1, [pc, #448]	@ (80041bc <HAL_I2C_Master_Transmit+0x1f4>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fdf4 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
 8004008:	e0d3      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_I2C_Master_Transmit+0x50>
 8004014:	2302      	movs	r3, #2
 8004016:	e0cc      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d007      	beq.n	800403e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800404c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2221      	movs	r2, #33	@ 0x21
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2210      	movs	r2, #16
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	893a      	ldrh	r2, [r7, #8]
 800406e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a50      	ldr	r2, [pc, #320]	@ (80041c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800407e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004080:	8979      	ldrh	r1, [r7, #10]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fbc8 	bl	800481c <I2C_MasterRequestWrite>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e08d      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040ac:	e066      	b.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 feb2 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_I2C_Master_Transmit+0x188>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fea9 	bl	8004eac <I2C_WaitOnBTFFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e01a      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d194      	bne.n	80040ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000

080041c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	@ 0x30
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	460b      	mov	r3, r1
 80041d2:	817b      	strh	r3, [r7, #10]
 80041d4:	4613      	mov	r3, r2
 80041d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7fe fec0 	bl	8002f5c <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	f040 8217 	bne.w	800461a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2319      	movs	r3, #25
 80041f2:	2201      	movs	r2, #1
 80041f4:	497c      	ldr	r1, [pc, #496]	@ (80043e8 <HAL_I2C_Master_Receive+0x224>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fcf6 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	e20a      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_I2C_Master_Receive+0x50>
 8004210:	2302      	movs	r3, #2
 8004212:	e203      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d007      	beq.n	800423a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2222      	movs	r2, #34	@ 0x22
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2210      	movs	r2, #16
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a5c      	ldr	r2, [pc, #368]	@ (80043ec <HAL_I2C_Master_Receive+0x228>)
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800427c:	8979      	ldrh	r1, [r7, #10]
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fb4c 	bl	8004920 <I2C_MasterRequestRead>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e1c4      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d113      	bne.n	80042c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e198      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d11b      	bne.n	8004302 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e178      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004306:	2b02      	cmp	r3, #2
 8004308:	d11b      	bne.n	8004342 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004318:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	e158      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004368:	e144      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	2b03      	cmp	r3, #3
 8004370:	f200 80f1 	bhi.w	8004556 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004378:	2b01      	cmp	r3, #1
 800437a:	d123      	bne.n	80043c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fddb 	bl	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e145      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043c2:	e117      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d14e      	bne.n	800446a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	2200      	movs	r2, #0
 80043d4:	4906      	ldr	r1, [pc, #24]	@ (80043f0 <HAL_I2C_Master_Receive+0x22c>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fc06 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e11a      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000
 80043f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004468:	e0c4      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	496c      	ldr	r1, [pc, #432]	@ (8004624 <HAL_I2C_Master_Receive+0x460>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fbb7 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0cb      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	4955      	ldr	r1, [pc, #340]	@ (8004624 <HAL_I2C_Master_Receive+0x460>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fb89 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e09d      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004554:	e04e      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004558:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fcee 	bl	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e058      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d124      	bne.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d107      	bne.n	80045c2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f47f aeb6 	bne.w	800436a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	@ 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	00010004 	.word	0x00010004

08004628 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	4603      	mov	r3, r0
 8004638:	817b      	strh	r3, [r7, #10]
 800463a:	460b      	mov	r3, r1
 800463c:	813b      	strh	r3, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004642:	f7fe fc8b 	bl	8002f5c <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b20      	cmp	r3, #32
 8004652:	f040 80d9 	bne.w	8004808 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2319      	movs	r3, #25
 800465c:	2201      	movs	r2, #1
 800465e:	496d      	ldr	r1, [pc, #436]	@ (8004814 <HAL_I2C_Mem_Write+0x1ec>)
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fac1 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
 800466e:	e0cc      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_I2C_Mem_Write+0x56>
 800467a:	2302      	movs	r3, #2
 800467c:	e0c5      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d007      	beq.n	80046a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2221      	movs	r2, #33	@ 0x21
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2240      	movs	r2, #64	@ 0x40
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004818 <HAL_I2C_Mem_Write+0x1f0>)
 80046e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e6:	88f8      	ldrh	r0, [r7, #6]
 80046e8:	893a      	ldrh	r2, [r7, #8]
 80046ea:	8979      	ldrh	r1, [r7, #10]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4603      	mov	r3, r0
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f9e0 	bl	8004abc <I2C_RequestMemoryWrite>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d052      	beq.n	80047a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e081      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fb86 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06b      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_I2C_Mem_Write+0x180>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1aa      	bne.n	8004706 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fb79 	bl	8004eac <I2C_WaitOnBTFFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00d      	beq.n	80047dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d107      	bne.n	80047d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e016      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	00100002 	.word	0x00100002
 8004818:	ffff0000 	.word	0xffff0000

0800481c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	460b      	mov	r3, r1
 800482a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d006      	beq.n	8004846 <I2C_MasterRequestWrite+0x2a>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d003      	beq.n	8004846 <I2C_MasterRequestWrite+0x2a>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004844:	d108      	bne.n	8004858 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e00b      	b.n	8004870 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	2b12      	cmp	r3, #18
 800485e:	d107      	bne.n	8004870 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800486e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f9b3 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004896:	d103      	bne.n	80048a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800489e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e035      	b.n	8004910 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ac:	d108      	bne.n	80048c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ae:	897b      	ldrh	r3, [r7, #10]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048bc:	611a      	str	r2, [r3, #16]
 80048be:	e01b      	b.n	80048f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048c0:	897b      	ldrh	r3, [r7, #10]
 80048c2:	11db      	asrs	r3, r3, #7
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f003 0306 	and.w	r3, r3, #6
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f063 030f 	orn	r3, r3, #15
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	490e      	ldr	r1, [pc, #56]	@ (8004918 <I2C_MasterRequestWrite+0xfc>)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f9fc 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e010      	b.n	8004910 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4907      	ldr	r1, [pc, #28]	@ (800491c <I2C_MasterRequestWrite+0x100>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f9ec 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	00010008 	.word	0x00010008
 800491c:	00010002 	.word	0x00010002

08004920 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	460b      	mov	r3, r1
 800492e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004944:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d006      	beq.n	800495a <I2C_MasterRequestRead+0x3a>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d003      	beq.n	800495a <I2C_MasterRequestRead+0x3a>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004958:	d108      	bne.n	800496c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e00b      	b.n	8004984 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	2b11      	cmp	r3, #17
 8004972:	d107      	bne.n	8004984 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f929 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00d      	beq.n	80049b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049aa:	d103      	bne.n	80049b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e079      	b.n	8004aac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049c0:	d108      	bne.n	80049d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049c2:	897b      	ldrh	r3, [r7, #10]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]
 80049d2:	e05f      	b.n	8004a94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049d4:	897b      	ldrh	r3, [r7, #10]
 80049d6:	11db      	asrs	r3, r3, #7
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f003 0306 	and.w	r3, r3, #6
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f063 030f 	orn	r3, r3, #15
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4930      	ldr	r1, [pc, #192]	@ (8004ab4 <I2C_MasterRequestRead+0x194>)
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f972 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e054      	b.n	8004aac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4929      	ldr	r1, [pc, #164]	@ (8004ab8 <I2C_MasterRequestRead+0x198>)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f962 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e044      	b.n	8004aac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f8c7 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a6e:	d103      	bne.n	8004a78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e017      	b.n	8004aac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a7c:	897b      	ldrh	r3, [r7, #10]
 8004a7e:	11db      	asrs	r3, r3, #7
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f063 030e 	orn	r3, r3, #14
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4907      	ldr	r1, [pc, #28]	@ (8004ab8 <I2C_MasterRequestRead+0x198>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f91e 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	00010008 	.word	0x00010008
 8004ab8:	00010002 	.word	0x00010002

08004abc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	817b      	strh	r3, [r7, #10]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	813b      	strh	r3, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f878 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b0c:	d103      	bne.n	8004b16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e05f      	b.n	8004bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b1a:	897b      	ldrh	r3, [r7, #10]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	492d      	ldr	r1, [pc, #180]	@ (8004be4 <I2C_RequestMemoryWrite+0x128>)
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f8d3 	bl	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e04c      	b.n	8004bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b58:	6a39      	ldr	r1, [r7, #32]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f95e 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d107      	bne.n	8004b7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e02b      	b.n	8004bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b88:	893b      	ldrh	r3, [r7, #8]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	611a      	str	r2, [r3, #16]
 8004b92:	e021      	b.n	8004bd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba4:	6a39      	ldr	r1, [r7, #32]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f938 	bl	8004e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d107      	bne.n	8004bca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e005      	b.n	8004bda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bce:	893b      	ldrh	r3, [r7, #8]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	00010002 	.word	0x00010002

08004be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf8:	e048      	b.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c00:	d044      	beq.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fe f9ab 	bl	8002f5c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d139      	bne.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10d      	bne.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	e00c      	b.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d116      	bne.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e023      	b.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10d      	bne.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	e00c      	b.n	8004ccc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d093      	beq.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cea:	e071      	b.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfa:	d123      	bne.n	8004d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	f043 0204 	orr.w	r2, r3, #4
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e067      	b.n	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d4a:	d041      	beq.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4c:	f7fe f906 	bl	8002f5c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d136      	bne.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d10c      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	43da      	mvns	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf14      	ite	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	2300      	moveq	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	e00b      	b.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	43da      	mvns	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4013      	ands	r3, r2
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e021      	b.n	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d10c      	bne.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e00b      	b.n	8004e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	43da      	mvns	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f47f af6d 	bne.w	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e28:	e034      	b.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f8e3 	bl	8004ff6 <I2C_IsAcknowledgeFailed>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e034      	b.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e40:	d028      	beq.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fe f88b 	bl	8002f5c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d11d      	bne.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e62:	2b80      	cmp	r3, #128	@ 0x80
 8004e64:	d016      	beq.n	8004e94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	f043 0220 	orr.w	r2, r3, #32
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e007      	b.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ea0:	d1c3      	bne.n	8004e2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eb8:	e034      	b.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f89b 	bl	8004ff6 <I2C_IsAcknowledgeFailed>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e034      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ed0:	d028      	beq.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fe f843 	bl	8002f5c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11d      	bne.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d016      	beq.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e007      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d1c3      	bne.n	8004eba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f48:	e049      	b.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d119      	bne.n	8004f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e030      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8c:	f7fd ffe6 	bl	8002f5c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d11d      	bne.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b40      	cmp	r3, #64	@ 0x40
 8004fae:	d016      	beq.n	8004fde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e007      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d1ae      	bne.n	8004f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500c:	d11b      	bne.n	8005046 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005016:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e267      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d075      	beq.n	800515e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005072:	4b88      	ldr	r3, [pc, #544]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d00c      	beq.n	8005098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507e:	4b85      	ldr	r3, [pc, #532]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005086:	2b08      	cmp	r3, #8
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508a:	4b82      	ldr	r3, [pc, #520]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005096:	d10b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	4b7e      	ldr	r3, [pc, #504]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05b      	beq.n	800515c <HAL_RCC_OscConfig+0x108>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d157      	bne.n	800515c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e242      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x74>
 80050ba:	4b76      	ldr	r3, [pc, #472]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a75      	ldr	r2, [pc, #468]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b70      	ldr	r3, [pc, #448]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b6d      	ldr	r3, [pc, #436]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050ec:	4b69      	ldr	r3, [pc, #420]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a68      	ldr	r2, [pc, #416]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b66      	ldr	r3, [pc, #408]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a65      	ldr	r2, [pc, #404]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fd ff26 	bl	8002f5c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005114:	f7fd ff22 	bl	8002f5c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	@ 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e207      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b5b      	ldr	r3, [pc, #364]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xc0>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fd ff12 	bl	8002f5c <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513c:	f7fd ff0e 	bl	8002f5c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	@ 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1f3      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	4b51      	ldr	r3, [pc, #324]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0xe8>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d063      	beq.n	8005232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800516a:	4b4a      	ldr	r3, [pc, #296]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005176:	4b47      	ldr	r3, [pc, #284]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11c      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005182:	4b44      	ldr	r3, [pc, #272]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518e:	4b41      	ldr	r3, [pc, #260]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1c7      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4937      	ldr	r1, [pc, #220]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	e03a      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c4:	4b34      	ldr	r3, [pc, #208]	@ (8005298 <HAL_RCC_OscConfig+0x244>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fd fec7 	bl	8002f5c <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d2:	f7fd fec3 	bl	8002f5c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1a8      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4925      	ldr	r1, [pc, #148]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005206:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <HAL_RCC_OscConfig+0x244>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd fea6 	bl	8002f5c <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005214:	f7fd fea2 	bl	8002f5c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e187      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d036      	beq.n	80052ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b15      	ldr	r3, [pc, #84]	@ (800529c <HAL_RCC_OscConfig+0x248>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd fe86 	bl	8002f5c <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005254:	f7fd fe82 	bl	8002f5c <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e167      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x200>
 8005272:	e01b      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005274:	4b09      	ldr	r3, [pc, #36]	@ (800529c <HAL_RCC_OscConfig+0x248>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527a:	f7fd fe6f 	bl	8002f5c <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005280:	e00e      	b.n	80052a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005282:	f7fd fe6b 	bl	8002f5c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d907      	bls.n	80052a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e150      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 8005294:	40023800 	.word	0x40023800
 8005298:	42470000 	.word	0x42470000
 800529c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	4b88      	ldr	r3, [pc, #544]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ea      	bne.n	8005282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8097 	beq.w	80053e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052be:	4b81      	ldr	r3, [pc, #516]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b7d      	ldr	r3, [pc, #500]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	4a7c      	ldr	r2, [pc, #496]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052da:	4b7a      	ldr	r3, [pc, #488]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b77      	ldr	r3, [pc, #476]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f6:	4b74      	ldr	r3, [pc, #464]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a73      	ldr	r2, [pc, #460]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fd fe2b 	bl	8002f5c <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fd fe27 	bl	8002f5c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e10c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	4b6a      	ldr	r3, [pc, #424]	@ (80054c8 <HAL_RCC_OscConfig+0x474>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x2ea>
 8005330:	4b64      	ldr	r3, [pc, #400]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a63      	ldr	r2, [pc, #396]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
 800533c:	e01c      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x30c>
 8005346:	4b5f      	ldr	r3, [pc, #380]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	4a5e      	ldr	r2, [pc, #376]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	6713      	str	r3, [r2, #112]	@ 0x70
 8005352:	4b5c      	ldr	r3, [pc, #368]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	4a5b      	ldr	r2, [pc, #364]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 8005360:	4b58      	ldr	r3, [pc, #352]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	4a57      	ldr	r2, [pc, #348]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	@ 0x70
 800536c:	4b55      	ldr	r3, [pc, #340]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a54      	ldr	r2, [pc, #336]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fd fdec 	bl	8002f5c <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fd fde8 	bl	8002f5c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0cb      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539e:	4b49      	ldr	r3, [pc, #292]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x334>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ac:	f7fd fdd6 	bl	8002f5c <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fd fdd2 	bl	8002f5c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0b5      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ca:	4b3e      	ldr	r3, [pc, #248]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b39      	ldr	r3, [pc, #228]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	4a38      	ldr	r2, [pc, #224]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a1 	beq.w	8005534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f2:	4b34      	ldr	r3, [pc, #208]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d05c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d141      	bne.n	800548a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fd fda6 	bl	8002f5c <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005414:	f7fd fda2 	bl	8002f5c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e087      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b27      	ldr	r3, [pc, #156]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	491b      	ldr	r1, [pc, #108]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800545c:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005462:	f7fd fd7b 	bl	8002f5c <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546a:	f7fd fd77 	bl	8002f5c <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e05c      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547c:	4b11      	ldr	r3, [pc, #68]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x416>
 8005488:	e054      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	4b10      	ldr	r3, [pc, #64]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fd fd64 	bl	8002f5c <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005498:	f7fd fd60 	bl	8002f5c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e045      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_RCC_OscConfig+0x470>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x444>
 80054b6:	e03d      	b.n	8005534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e038      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005540 <HAL_RCC_OscConfig+0x4ec>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d028      	beq.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d11a      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800

08005544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0cc      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005558:	4b68      	ldr	r3, [pc, #416]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d90c      	bls.n	8005580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005566:	4b65      	ldr	r3, [pc, #404]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b63      	ldr	r3, [pc, #396]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0b8      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005598:	4b59      	ldr	r3, [pc, #356]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a58      	ldr	r2, [pc, #352]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b0:	4b53      	ldr	r3, [pc, #332]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a52      	ldr	r2, [pc, #328]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055bc:	4b50      	ldr	r3, [pc, #320]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	494d      	ldr	r1, [pc, #308]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d044      	beq.n	8005664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b47      	ldr	r3, [pc, #284]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d119      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d003      	beq.n	8005602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d107      	bne.n	8005612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005602:	4b3f      	ldr	r3, [pc, #252]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005612:	4b3b      	ldr	r3, [pc, #236]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e067      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005622:	4b37      	ldr	r3, [pc, #220]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 0203 	bic.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4934      	ldr	r1, [pc, #208]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005634:	f7fd fc92 	bl	8002f5c <HAL_GetTick>
 8005638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563a:	e00a      	b.n	8005652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563c:	f7fd fc8e 	bl	8002f5c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e04f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005652:	4b2b      	ldr	r3, [pc, #172]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 020c 	and.w	r2, r3, #12
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	429a      	cmp	r2, r3
 8005662:	d1eb      	bne.n	800563c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005664:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d20c      	bcs.n	800568c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b22      	ldr	r3, [pc, #136]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e032      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005698:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4916      	ldr	r1, [pc, #88]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b6:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	490e      	ldr	r1, [pc, #56]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ca:	f000 f821 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ce:	4602      	mov	r2, r0
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	490a      	ldr	r1, [pc, #40]	@ (8005704 <HAL_RCC_ClockConfig+0x1c0>)
 80056dc:	5ccb      	ldrb	r3, [r1, r3]
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	4a09      	ldr	r2, [pc, #36]	@ (8005708 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056e6:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_RCC_ClockConfig+0x1c8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd fbf2 	bl	8002ed4 <HAL_InitTick>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023c00 	.word	0x40023c00
 8005700:	40023800 	.word	0x40023800
 8005704:	0800a8b4 	.word	0x0800a8b4
 8005708:	20000014 	.word	0x20000014
 800570c:	20000018 	.word	0x20000018

08005710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b090      	sub	sp, #64	@ 0x40
 8005716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005720:	2300      	movs	r3, #0
 8005722:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005728:	4b59      	ldr	r3, [pc, #356]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b08      	cmp	r3, #8
 8005732:	d00d      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x40>
 8005734:	2b08      	cmp	r3, #8
 8005736:	f200 80a1 	bhi.w	800587c <HAL_RCC_GetSysClockFreq+0x16c>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
 800573e:	2b04      	cmp	r3, #4
 8005740:	d003      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x3a>
 8005742:	e09b      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005744:	4b53      	ldr	r3, [pc, #332]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x184>)
 8005746:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005748:	e09b      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800574a:	4b53      	ldr	r3, [pc, #332]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x188>)
 800574c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800574e:	e098      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005750:	4b4f      	ldr	r3, [pc, #316]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800575a:	4b4d      	ldr	r3, [pc, #308]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d028      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005766:	4b4a      	ldr	r3, [pc, #296]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	2200      	movs	r2, #0
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	627a      	str	r2, [r7, #36]	@ 0x24
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005778:	2100      	movs	r1, #0
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x188>)
 800577c:	fb03 f201 	mul.w	r2, r3, r1
 8005780:	2300      	movs	r3, #0
 8005782:	fb00 f303 	mul.w	r3, r0, r3
 8005786:	4413      	add	r3, r2
 8005788:	4a43      	ldr	r2, [pc, #268]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x188>)
 800578a:	fba0 1202 	umull	r1, r2, r0, r2
 800578e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005790:	460a      	mov	r2, r1
 8005792:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005796:	4413      	add	r3, r2
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579c:	2200      	movs	r2, #0
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	61fa      	str	r2, [r7, #28]
 80057a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80057aa:	f7fb f987 	bl	8000abc <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4613      	mov	r3, r2
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b6:	e053      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057b8:	4b35      	ldr	r3, [pc, #212]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	099b      	lsrs	r3, r3, #6
 80057be:	2200      	movs	r2, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	617a      	str	r2, [r7, #20]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057ca:	f04f 0b00 	mov.w	fp, #0
 80057ce:	4652      	mov	r2, sl
 80057d0:	465b      	mov	r3, fp
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	0159      	lsls	r1, r3, #5
 80057dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e0:	0150      	lsls	r0, r2, #5
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	ebb2 080a 	subs.w	r8, r2, sl
 80057ea:	eb63 090b 	sbc.w	r9, r3, fp
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005802:	ebb2 0408 	subs.w	r4, r2, r8
 8005806:	eb63 0509 	sbc.w	r5, r3, r9
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	00eb      	lsls	r3, r5, #3
 8005814:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005818:	00e2      	lsls	r2, r4, #3
 800581a:	4614      	mov	r4, r2
 800581c:	461d      	mov	r5, r3
 800581e:	eb14 030a 	adds.w	r3, r4, sl
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	eb45 030b 	adc.w	r3, r5, fp
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005836:	4629      	mov	r1, r5
 8005838:	028b      	lsls	r3, r1, #10
 800583a:	4621      	mov	r1, r4
 800583c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005840:	4621      	mov	r1, r4
 8005842:	028a      	lsls	r2, r1, #10
 8005844:	4610      	mov	r0, r2
 8005846:	4619      	mov	r1, r3
 8005848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584a:	2200      	movs	r2, #0
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	60fa      	str	r2, [r7, #12]
 8005850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005854:	f7fb f932 	bl	8000abc <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4613      	mov	r3, r2
 800585e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005860:	4b0b      	ldr	r3, [pc, #44]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x180>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	3301      	adds	r3, #1
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005870:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800587a:	e002      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800587c:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <HAL_RCC_GetSysClockFreq+0x184>)
 800587e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005884:	4618      	mov	r0, r3
 8005886:	3740      	adds	r7, #64	@ 0x40
 8005888:	46bd      	mov	sp, r7
 800588a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800
 8005894:	00f42400 	.word	0x00f42400
 8005898:	017d7840 	.word	0x017d7840

0800589c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a0:	4b03      	ldr	r3, [pc, #12]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000014 	.word	0x20000014

080058b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b8:	f7ff fff0 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058bc:	4602      	mov	r2, r0
 80058be:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0a9b      	lsrs	r3, r3, #10
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4903      	ldr	r1, [pc, #12]	@ (80058d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ca:	5ccb      	ldrb	r3, [r1, r3]
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800
 80058d8:	0800a8c4 	.word	0x0800a8c4

080058dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e041      	b.n	8005972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fd f980 	bl	8002c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	4610      	mov	r0, r2
 800591c:	f000 fc58 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e041      	b.n	8005a10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f839 	bl	8005a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f000 fc09 	bl	80061d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <HAL_TIM_PWM_Start+0x24>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	e022      	b.n	8005a96 <HAL_TIM_PWM_Start+0x6a>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d109      	bne.n	8005a6a <HAL_TIM_PWM_Start+0x3e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	bf14      	ite	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	2300      	moveq	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	e015      	b.n	8005a96 <HAL_TIM_PWM_Start+0x6a>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d109      	bne.n	8005a84 <HAL_TIM_PWM_Start+0x58>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	e008      	b.n	8005a96 <HAL_TIM_PWM_Start+0x6a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e068      	b.n	8005b70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_PWM_Start+0x82>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aac:	e013      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xaa>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start+0x92>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005abc:	e00b      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xaa>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start+0xa2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005acc:	e003      	b.n	8005ad6 <HAL_TIM_PWM_Start+0xaa>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fe28 	bl	8006734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a23      	ldr	r2, [pc, #140]	@ (8005b78 <HAL_TIM_PWM_Start+0x14c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d107      	bne.n	8005afe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <HAL_TIM_PWM_Start+0x14c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d018      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x10e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b10:	d013      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x10e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a19      	ldr	r2, [pc, #100]	@ (8005b7c <HAL_TIM_PWM_Start+0x150>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00e      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x10e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a17      	ldr	r2, [pc, #92]	@ (8005b80 <HAL_TIM_PWM_Start+0x154>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d009      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x10e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a16      	ldr	r2, [pc, #88]	@ (8005b84 <HAL_TIM_PWM_Start+0x158>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x10e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a14      	ldr	r2, [pc, #80]	@ (8005b88 <HAL_TIM_PWM_Start+0x15c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d111      	bne.n	8005b5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d010      	beq.n	8005b6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5c:	e007      	b.n	8005b6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40014000 	.word	0x40014000

08005b8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fdc8 	bl	8006734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <HAL_TIM_PWM_Stop+0xc4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d117      	bne.n	8005bde <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6a1a      	ldr	r2, [r3, #32]
 8005bb4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10f      	bne.n	8005bde <HAL_TIM_PWM_Stop+0x52>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_TIM_PWM_Stop+0x52>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <HAL_TIM_PWM_Stop+0x82>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_PWM_Stop+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Stop+0x92>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c1c:	e013      	b.n	8005c46 <HAL_TIM_PWM_Stop+0xba>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Stop+0xa2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c2c:	e00b      	b.n	8005c46 <HAL_TIM_PWM_Stop+0xba>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_PWM_Stop+0xb2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c3c:	e003      	b.n	8005c46 <HAL_TIM_PWM_Stop+0xba>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40010000 	.word	0x40010000

08005c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e097      	b.n	8005d98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fc ff7b 	bl	8002b78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c98:	f023 0307 	bic.w	r3, r3, #7
 8005c9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f000 fa91 	bl	80061d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005cf4:	f023 030c 	bic.w	r3, r3, #12
 8005cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	4313      	orrs	r3, r2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	011a      	lsls	r2, r3, #4
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	031b      	lsls	r3, r3, #12
 8005d24:	4313      	orrs	r3, r2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	4313      	orrs	r3, r2
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005db0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005db8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d110      	bne.n	8005df2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dd6:	7b7b      	ldrb	r3, [r7, #13]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d001      	beq.n	8005de0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e069      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005df0:	e031      	b.n	8005e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d110      	bne.n	8005e1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d102      	bne.n	8005e04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dfe:	7b3b      	ldrb	r3, [r7, #12]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e055      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e18:	e01d      	b.n	8005e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d108      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d105      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e26:	7b7b      	ldrb	r3, [r7, #13]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d102      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e2c:	7b3b      	ldrb	r3, [r7, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d001      	beq.n	8005e36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03e      	b.n	8005eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_TIM_Encoder_Start+0xc4>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d008      	beq.n	8005e74 <HAL_TIM_Encoder_Start+0xd4>
 8005e62:	e00f      	b.n	8005e84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fc61 	bl	8006734 <TIM_CCxChannelCmd>
      break;
 8005e72:	e016      	b.n	8005ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2104      	movs	r1, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fc59 	bl	8006734 <TIM_CCxChannelCmd>
      break;
 8005e82:	e00e      	b.n	8005ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fc51 	bl	8006734 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2201      	movs	r2, #1
 8005e98:	2104      	movs	r1, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fc4a 	bl	8006734 <TIM_CCxChannelCmd>
      break;
 8005ea0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e0ae      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b0c      	cmp	r3, #12
 8005ee6:	f200 809f 	bhi.w	8006028 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eea:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08006029 	.word	0x08006029
 8005ef8:	08006029 	.word	0x08006029
 8005efc:	08006029 	.word	0x08006029
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	08006029 	.word	0x08006029
 8005f08:	08006029 	.word	0x08006029
 8005f0c:	08006029 	.word	0x08006029
 8005f10:	08005fa7 	.word	0x08005fa7
 8005f14:	08006029 	.word	0x08006029
 8005f18:	08006029 	.word	0x08006029
 8005f1c:	08006029 	.word	0x08006029
 8005f20:	08005fe7 	.word	0x08005fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f9dc 	bl	80062e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0204 	bic.w	r2, r2, #4
 8005f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6999      	ldr	r1, [r3, #24]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	619a      	str	r2, [r3, #24]
      break;
 8005f62:	e064      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fa22 	bl	80063b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6999      	ldr	r1, [r3, #24]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	619a      	str	r2, [r3, #24]
      break;
 8005fa4:	e043      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fa6d 	bl	800648c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0208 	orr.w	r2, r2, #8
 8005fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0204 	bic.w	r2, r2, #4
 8005fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69d9      	ldr	r1, [r3, #28]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	61da      	str	r2, [r3, #28]
      break;
 8005fe4:	e023      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fab7 	bl	8006560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69d9      	ldr	r1, [r3, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	021a      	lsls	r2, r3, #8
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	61da      	str	r2, [r3, #28]
      break;
 8006026:	e002      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	75fb      	strb	r3, [r7, #23]
      break;
 800602c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIM_ConfigClockSource+0x1c>
 8006058:	2302      	movs	r3, #2
 800605a:	e0b4      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x186>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800607a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006094:	d03e      	beq.n	8006114 <HAL_TIM_ConfigClockSource+0xd4>
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800609a:	f200 8087 	bhi.w	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060a2:	f000 8086 	beq.w	80061b2 <HAL_TIM_ConfigClockSource+0x172>
 80060a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060aa:	d87f      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 80060ac:	2b70      	cmp	r3, #112	@ 0x70
 80060ae:	d01a      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0xa6>
 80060b0:	2b70      	cmp	r3, #112	@ 0x70
 80060b2:	d87b      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 80060b4:	2b60      	cmp	r3, #96	@ 0x60
 80060b6:	d050      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x11a>
 80060b8:	2b60      	cmp	r3, #96	@ 0x60
 80060ba:	d877      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 80060bc:	2b50      	cmp	r3, #80	@ 0x50
 80060be:	d03c      	beq.n	800613a <HAL_TIM_ConfigClockSource+0xfa>
 80060c0:	2b50      	cmp	r3, #80	@ 0x50
 80060c2:	d873      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 80060c4:	2b40      	cmp	r3, #64	@ 0x40
 80060c6:	d058      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x13a>
 80060c8:	2b40      	cmp	r3, #64	@ 0x40
 80060ca:	d86f      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 80060cc:	2b30      	cmp	r3, #48	@ 0x30
 80060ce:	d064      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x15a>
 80060d0:	2b30      	cmp	r3, #48	@ 0x30
 80060d2:	d86b      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d060      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x15a>
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d867      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d05c      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x15a>
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d05a      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x15a>
 80060e4:	e062      	b.n	80061ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060f6:	f000 fafd 	bl	80066f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	609a      	str	r2, [r3, #8]
      break;
 8006112:	e04f      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006124:	f000 fae6 	bl	80066f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006136:	609a      	str	r2, [r3, #8]
      break;
 8006138:	e03c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006146:	461a      	mov	r2, r3
 8006148:	f000 fa5a 	bl	8006600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2150      	movs	r1, #80	@ 0x50
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fab3 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006158:	e02c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006166:	461a      	mov	r2, r3
 8006168:	f000 fa79 	bl	800665e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2160      	movs	r1, #96	@ 0x60
 8006172:	4618      	mov	r0, r3
 8006174:	f000 faa3 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006178:	e01c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006186:	461a      	mov	r2, r3
 8006188:	f000 fa3a 	bl	8006600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2140      	movs	r1, #64	@ 0x40
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fa93 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006198:	e00c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f000 fa8a 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 80061aa:	e003      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
      break;
 80061b0:	e000      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a3a      	ldr	r2, [pc, #232]	@ (80062cc <TIM_Base_SetConfig+0xfc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00f      	beq.n	8006208 <TIM_Base_SetConfig+0x38>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ee:	d00b      	beq.n	8006208 <TIM_Base_SetConfig+0x38>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a37      	ldr	r2, [pc, #220]	@ (80062d0 <TIM_Base_SetConfig+0x100>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_Base_SetConfig+0x38>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a36      	ldr	r2, [pc, #216]	@ (80062d4 <TIM_Base_SetConfig+0x104>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0x38>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a35      	ldr	r2, [pc, #212]	@ (80062d8 <TIM_Base_SetConfig+0x108>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d108      	bne.n	800621a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2b      	ldr	r2, [pc, #172]	@ (80062cc <TIM_Base_SetConfig+0xfc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01b      	beq.n	800625a <TIM_Base_SetConfig+0x8a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006228:	d017      	beq.n	800625a <TIM_Base_SetConfig+0x8a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a28      	ldr	r2, [pc, #160]	@ (80062d0 <TIM_Base_SetConfig+0x100>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <TIM_Base_SetConfig+0x8a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a27      	ldr	r2, [pc, #156]	@ (80062d4 <TIM_Base_SetConfig+0x104>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00f      	beq.n	800625a <TIM_Base_SetConfig+0x8a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a26      	ldr	r2, [pc, #152]	@ (80062d8 <TIM_Base_SetConfig+0x108>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_Base_SetConfig+0x8a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a25      	ldr	r2, [pc, #148]	@ (80062dc <TIM_Base_SetConfig+0x10c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_Base_SetConfig+0x8a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a24      	ldr	r2, [pc, #144]	@ (80062e0 <TIM_Base_SetConfig+0x110>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_Base_SetConfig+0x8a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a23      	ldr	r2, [pc, #140]	@ (80062e4 <TIM_Base_SetConfig+0x114>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d108      	bne.n	800626c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0e      	ldr	r2, [pc, #56]	@ (80062cc <TIM_Base_SetConfig+0xfc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d105      	bne.n	80062be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]
  }
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f023 0201 	bic.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0303 	bic.w	r3, r3, #3
 800631e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f023 0302 	bic.w	r3, r3, #2
 8006330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <TIM_OC1_SetConfig+0xc8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d10c      	bne.n	800635e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0308 	bic.w	r3, r3, #8
 800634a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 0304 	bic.w	r3, r3, #4
 800635c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a13      	ldr	r2, [pc, #76]	@ (80063b0 <TIM_OC1_SetConfig+0xc8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d111      	bne.n	800638a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800636c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40010000 	.word	0x40010000

080063b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f023 0210 	bic.w	r2, r3, #16
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f023 0320 	bic.w	r3, r3, #32
 80063fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a1e      	ldr	r2, [pc, #120]	@ (8006488 <TIM_OC2_SetConfig+0xd4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d10d      	bne.n	8006430 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800641a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a15      	ldr	r2, [pc, #84]	@ (8006488 <TIM_OC2_SetConfig+0xd4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d113      	bne.n	8006460 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800643e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40010000 	.word	0x40010000

0800648c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	021b      	lsls	r3, r3, #8
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	@ (800655c <TIM_OC3_SetConfig+0xd0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10d      	bne.n	8006506 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a14      	ldr	r2, [pc, #80]	@ (800655c <TIM_OC3_SetConfig+0xd0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d113      	bne.n	8006536 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800651c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	621a      	str	r2, [r3, #32]
}
 8006550:	bf00      	nop
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	40010000 	.word	0x40010000

08006560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	031b      	lsls	r3, r3, #12
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a10      	ldr	r2, [pc, #64]	@ (80065fc <TIM_OC4_SetConfig+0x9c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d109      	bne.n	80065d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	019b      	lsls	r3, r3, #6
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40010000 	.word	0x40010000

08006600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 030a 	bic.w	r3, r3, #10
 800663c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	f023 0210 	bic.w	r2, r3, #16
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800669a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f043 0307 	orr.w	r3, r3, #7
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800670e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	431a      	orrs	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	609a      	str	r2, [r3, #8]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2201      	movs	r2, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1a      	ldr	r2, [r3, #32]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006794:	2302      	movs	r3, #2
 8006796:	e050      	b.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e4:	d013      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a18      	ldr	r2, [pc, #96]	@ (800684c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a16      	ldr	r2, [pc, #88]	@ (8006850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d10c      	bne.n	8006828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4313      	orrs	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40010000 	.word	0x40010000
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40014000 	.word	0x40014000

0800685c <siprintf>:
 800685c:	b40e      	push	{r1, r2, r3}
 800685e:	b500      	push	{lr}
 8006860:	b09c      	sub	sp, #112	@ 0x70
 8006862:	ab1d      	add	r3, sp, #116	@ 0x74
 8006864:	9002      	str	r0, [sp, #8]
 8006866:	9006      	str	r0, [sp, #24]
 8006868:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800686c:	4809      	ldr	r0, [pc, #36]	@ (8006894 <siprintf+0x38>)
 800686e:	9107      	str	r1, [sp, #28]
 8006870:	9104      	str	r1, [sp, #16]
 8006872:	4909      	ldr	r1, [pc, #36]	@ (8006898 <siprintf+0x3c>)
 8006874:	f853 2b04 	ldr.w	r2, [r3], #4
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	a902      	add	r1, sp, #8
 8006880:	f000 f9bc 	bl	8006bfc <_svfiprintf_r>
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	b01c      	add	sp, #112	@ 0x70
 800688c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006890:	b003      	add	sp, #12
 8006892:	4770      	bx	lr
 8006894:	20000020 	.word	0x20000020
 8006898:	ffff0208 	.word	0xffff0208

0800689c <memmove>:
 800689c:	4288      	cmp	r0, r1
 800689e:	b510      	push	{r4, lr}
 80068a0:	eb01 0402 	add.w	r4, r1, r2
 80068a4:	d902      	bls.n	80068ac <memmove+0x10>
 80068a6:	4284      	cmp	r4, r0
 80068a8:	4623      	mov	r3, r4
 80068aa:	d807      	bhi.n	80068bc <memmove+0x20>
 80068ac:	1e43      	subs	r3, r0, #1
 80068ae:	42a1      	cmp	r1, r4
 80068b0:	d008      	beq.n	80068c4 <memmove+0x28>
 80068b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ba:	e7f8      	b.n	80068ae <memmove+0x12>
 80068bc:	4402      	add	r2, r0
 80068be:	4601      	mov	r1, r0
 80068c0:	428a      	cmp	r2, r1
 80068c2:	d100      	bne.n	80068c6 <memmove+0x2a>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ce:	e7f7      	b.n	80068c0 <memmove+0x24>

080068d0 <memset>:
 80068d0:	4402      	add	r2, r0
 80068d2:	4603      	mov	r3, r0
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d100      	bne.n	80068da <memset+0xa>
 80068d8:	4770      	bx	lr
 80068da:	f803 1b01 	strb.w	r1, [r3], #1
 80068de:	e7f9      	b.n	80068d4 <memset+0x4>

080068e0 <__errno>:
 80068e0:	4b01      	ldr	r3, [pc, #4]	@ (80068e8 <__errno+0x8>)
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000020 	.word	0x20000020

080068ec <__libc_init_array>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006924 <__libc_init_array+0x38>)
 80068f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006928 <__libc_init_array+0x3c>)
 80068f2:	1b64      	subs	r4, r4, r5
 80068f4:	10a4      	asrs	r4, r4, #2
 80068f6:	2600      	movs	r6, #0
 80068f8:	42a6      	cmp	r6, r4
 80068fa:	d109      	bne.n	8006910 <__libc_init_array+0x24>
 80068fc:	4d0b      	ldr	r5, [pc, #44]	@ (800692c <__libc_init_array+0x40>)
 80068fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006930 <__libc_init_array+0x44>)
 8006900:	f000 fc4c 	bl	800719c <_init>
 8006904:	1b64      	subs	r4, r4, r5
 8006906:	10a4      	asrs	r4, r4, #2
 8006908:	2600      	movs	r6, #0
 800690a:	42a6      	cmp	r6, r4
 800690c:	d105      	bne.n	800691a <__libc_init_array+0x2e>
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	f855 3b04 	ldr.w	r3, [r5], #4
 8006914:	4798      	blx	r3
 8006916:	3601      	adds	r6, #1
 8006918:	e7ee      	b.n	80068f8 <__libc_init_array+0xc>
 800691a:	f855 3b04 	ldr.w	r3, [r5], #4
 800691e:	4798      	blx	r3
 8006920:	3601      	adds	r6, #1
 8006922:	e7f2      	b.n	800690a <__libc_init_array+0x1e>
 8006924:	0800a908 	.word	0x0800a908
 8006928:	0800a908 	.word	0x0800a908
 800692c:	0800a908 	.word	0x0800a908
 8006930:	0800a90c 	.word	0x0800a90c

08006934 <__retarget_lock_acquire_recursive>:
 8006934:	4770      	bx	lr

08006936 <__retarget_lock_release_recursive>:
 8006936:	4770      	bx	lr

08006938 <memcpy>:
 8006938:	440a      	add	r2, r1
 800693a:	4291      	cmp	r1, r2
 800693c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006940:	d100      	bne.n	8006944 <memcpy+0xc>
 8006942:	4770      	bx	lr
 8006944:	b510      	push	{r4, lr}
 8006946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800694a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800694e:	4291      	cmp	r1, r2
 8006950:	d1f9      	bne.n	8006946 <memcpy+0xe>
 8006952:	bd10      	pop	{r4, pc}

08006954 <_free_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4605      	mov	r5, r0
 8006958:	2900      	cmp	r1, #0
 800695a:	d041      	beq.n	80069e0 <_free_r+0x8c>
 800695c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006960:	1f0c      	subs	r4, r1, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	bfb8      	it	lt
 8006966:	18e4      	addlt	r4, r4, r3
 8006968:	f000 f8e0 	bl	8006b2c <__malloc_lock>
 800696c:	4a1d      	ldr	r2, [pc, #116]	@ (80069e4 <_free_r+0x90>)
 800696e:	6813      	ldr	r3, [r2, #0]
 8006970:	b933      	cbnz	r3, 8006980 <_free_r+0x2c>
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	6014      	str	r4, [r2, #0]
 8006976:	4628      	mov	r0, r5
 8006978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800697c:	f000 b8dc 	b.w	8006b38 <__malloc_unlock>
 8006980:	42a3      	cmp	r3, r4
 8006982:	d908      	bls.n	8006996 <_free_r+0x42>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	1821      	adds	r1, r4, r0
 8006988:	428b      	cmp	r3, r1
 800698a:	bf01      	itttt	eq
 800698c:	6819      	ldreq	r1, [r3, #0]
 800698e:	685b      	ldreq	r3, [r3, #4]
 8006990:	1809      	addeq	r1, r1, r0
 8006992:	6021      	streq	r1, [r4, #0]
 8006994:	e7ed      	b.n	8006972 <_free_r+0x1e>
 8006996:	461a      	mov	r2, r3
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	b10b      	cbz	r3, 80069a0 <_free_r+0x4c>
 800699c:	42a3      	cmp	r3, r4
 800699e:	d9fa      	bls.n	8006996 <_free_r+0x42>
 80069a0:	6811      	ldr	r1, [r2, #0]
 80069a2:	1850      	adds	r0, r2, r1
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d10b      	bne.n	80069c0 <_free_r+0x6c>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	4401      	add	r1, r0
 80069ac:	1850      	adds	r0, r2, r1
 80069ae:	4283      	cmp	r3, r0
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	d1e0      	bne.n	8006976 <_free_r+0x22>
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	6053      	str	r3, [r2, #4]
 80069ba:	4408      	add	r0, r1
 80069bc:	6010      	str	r0, [r2, #0]
 80069be:	e7da      	b.n	8006976 <_free_r+0x22>
 80069c0:	d902      	bls.n	80069c8 <_free_r+0x74>
 80069c2:	230c      	movs	r3, #12
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	e7d6      	b.n	8006976 <_free_r+0x22>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	1821      	adds	r1, r4, r0
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf04      	itt	eq
 80069d0:	6819      	ldreq	r1, [r3, #0]
 80069d2:	685b      	ldreq	r3, [r3, #4]
 80069d4:	6063      	str	r3, [r4, #4]
 80069d6:	bf04      	itt	eq
 80069d8:	1809      	addeq	r1, r1, r0
 80069da:	6021      	streq	r1, [r4, #0]
 80069dc:	6054      	str	r4, [r2, #4]
 80069de:	e7ca      	b.n	8006976 <_free_r+0x22>
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
 80069e2:	bf00      	nop
 80069e4:	20000be0 	.word	0x20000be0

080069e8 <sbrk_aligned>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006a28 <sbrk_aligned+0x40>)
 80069ec:	460c      	mov	r4, r1
 80069ee:	6831      	ldr	r1, [r6, #0]
 80069f0:	4605      	mov	r5, r0
 80069f2:	b911      	cbnz	r1, 80069fa <sbrk_aligned+0x12>
 80069f4:	f000 fb8c 	bl	8007110 <_sbrk_r>
 80069f8:	6030      	str	r0, [r6, #0]
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 fb87 	bl	8007110 <_sbrk_r>
 8006a02:	1c43      	adds	r3, r0, #1
 8006a04:	d103      	bne.n	8006a0e <sbrk_aligned+0x26>
 8006a06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	bd70      	pop	{r4, r5, r6, pc}
 8006a0e:	1cc4      	adds	r4, r0, #3
 8006a10:	f024 0403 	bic.w	r4, r4, #3
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d0f8      	beq.n	8006a0a <sbrk_aligned+0x22>
 8006a18:	1a21      	subs	r1, r4, r0
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 fb78 	bl	8007110 <_sbrk_r>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d1f2      	bne.n	8006a0a <sbrk_aligned+0x22>
 8006a24:	e7ef      	b.n	8006a06 <sbrk_aligned+0x1e>
 8006a26:	bf00      	nop
 8006a28:	20000bdc 	.word	0x20000bdc

08006a2c <_malloc_r>:
 8006a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a30:	1ccd      	adds	r5, r1, #3
 8006a32:	f025 0503 	bic.w	r5, r5, #3
 8006a36:	3508      	adds	r5, #8
 8006a38:	2d0c      	cmp	r5, #12
 8006a3a:	bf38      	it	cc
 8006a3c:	250c      	movcc	r5, #12
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	4606      	mov	r6, r0
 8006a42:	db01      	blt.n	8006a48 <_malloc_r+0x1c>
 8006a44:	42a9      	cmp	r1, r5
 8006a46:	d904      	bls.n	8006a52 <_malloc_r+0x26>
 8006a48:	230c      	movs	r3, #12
 8006a4a:	6033      	str	r3, [r6, #0]
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b28 <_malloc_r+0xfc>
 8006a56:	f000 f869 	bl	8006b2c <__malloc_lock>
 8006a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5e:	461c      	mov	r4, r3
 8006a60:	bb44      	cbnz	r4, 8006ab4 <_malloc_r+0x88>
 8006a62:	4629      	mov	r1, r5
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7ff ffbf 	bl	80069e8 <sbrk_aligned>
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	d158      	bne.n	8006b22 <_malloc_r+0xf6>
 8006a70:	f8d8 4000 	ldr.w	r4, [r8]
 8006a74:	4627      	mov	r7, r4
 8006a76:	2f00      	cmp	r7, #0
 8006a78:	d143      	bne.n	8006b02 <_malloc_r+0xd6>
 8006a7a:	2c00      	cmp	r4, #0
 8006a7c:	d04b      	beq.n	8006b16 <_malloc_r+0xea>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	4639      	mov	r1, r7
 8006a82:	4630      	mov	r0, r6
 8006a84:	eb04 0903 	add.w	r9, r4, r3
 8006a88:	f000 fb42 	bl	8007110 <_sbrk_r>
 8006a8c:	4581      	cmp	r9, r0
 8006a8e:	d142      	bne.n	8006b16 <_malloc_r+0xea>
 8006a90:	6821      	ldr	r1, [r4, #0]
 8006a92:	1a6d      	subs	r5, r5, r1
 8006a94:	4629      	mov	r1, r5
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7ff ffa6 	bl	80069e8 <sbrk_aligned>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d03a      	beq.n	8006b16 <_malloc_r+0xea>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	442b      	add	r3, r5
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	bb62      	cbnz	r2, 8006b08 <_malloc_r+0xdc>
 8006aae:	f8c8 7000 	str.w	r7, [r8]
 8006ab2:	e00f      	b.n	8006ad4 <_malloc_r+0xa8>
 8006ab4:	6822      	ldr	r2, [r4, #0]
 8006ab6:	1b52      	subs	r2, r2, r5
 8006ab8:	d420      	bmi.n	8006afc <_malloc_r+0xd0>
 8006aba:	2a0b      	cmp	r2, #11
 8006abc:	d917      	bls.n	8006aee <_malloc_r+0xc2>
 8006abe:	1961      	adds	r1, r4, r5
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	6025      	str	r5, [r4, #0]
 8006ac4:	bf18      	it	ne
 8006ac6:	6059      	strne	r1, [r3, #4]
 8006ac8:	6863      	ldr	r3, [r4, #4]
 8006aca:	bf08      	it	eq
 8006acc:	f8c8 1000 	streq.w	r1, [r8]
 8006ad0:	5162      	str	r2, [r4, r5]
 8006ad2:	604b      	str	r3, [r1, #4]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f82f 	bl	8006b38 <__malloc_unlock>
 8006ada:	f104 000b 	add.w	r0, r4, #11
 8006ade:	1d23      	adds	r3, r4, #4
 8006ae0:	f020 0007 	bic.w	r0, r0, #7
 8006ae4:	1ac2      	subs	r2, r0, r3
 8006ae6:	bf1c      	itt	ne
 8006ae8:	1a1b      	subne	r3, r3, r0
 8006aea:	50a3      	strne	r3, [r4, r2]
 8006aec:	e7af      	b.n	8006a4e <_malloc_r+0x22>
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	bf0c      	ite	eq
 8006af4:	f8c8 2000 	streq.w	r2, [r8]
 8006af8:	605a      	strne	r2, [r3, #4]
 8006afa:	e7eb      	b.n	8006ad4 <_malloc_r+0xa8>
 8006afc:	4623      	mov	r3, r4
 8006afe:	6864      	ldr	r4, [r4, #4]
 8006b00:	e7ae      	b.n	8006a60 <_malloc_r+0x34>
 8006b02:	463c      	mov	r4, r7
 8006b04:	687f      	ldr	r7, [r7, #4]
 8006b06:	e7b6      	b.n	8006a76 <_malloc_r+0x4a>
 8006b08:	461a      	mov	r2, r3
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	d1fb      	bne.n	8006b08 <_malloc_r+0xdc>
 8006b10:	2300      	movs	r3, #0
 8006b12:	6053      	str	r3, [r2, #4]
 8006b14:	e7de      	b.n	8006ad4 <_malloc_r+0xa8>
 8006b16:	230c      	movs	r3, #12
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f80c 	bl	8006b38 <__malloc_unlock>
 8006b20:	e794      	b.n	8006a4c <_malloc_r+0x20>
 8006b22:	6005      	str	r5, [r0, #0]
 8006b24:	e7d6      	b.n	8006ad4 <_malloc_r+0xa8>
 8006b26:	bf00      	nop
 8006b28:	20000be0 	.word	0x20000be0

08006b2c <__malloc_lock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <__malloc_lock+0x8>)
 8006b2e:	f7ff bf01 	b.w	8006934 <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	20000bd8 	.word	0x20000bd8

08006b38 <__malloc_unlock>:
 8006b38:	4801      	ldr	r0, [pc, #4]	@ (8006b40 <__malloc_unlock+0x8>)
 8006b3a:	f7ff befc 	b.w	8006936 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20000bd8 	.word	0x20000bd8

08006b44 <__ssputs_r>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	688e      	ldr	r6, [r1, #8]
 8006b4a:	461f      	mov	r7, r3
 8006b4c:	42be      	cmp	r6, r7
 8006b4e:	680b      	ldr	r3, [r1, #0]
 8006b50:	4682      	mov	sl, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	4690      	mov	r8, r2
 8006b56:	d82d      	bhi.n	8006bb4 <__ssputs_r+0x70>
 8006b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b60:	d026      	beq.n	8006bb0 <__ssputs_r+0x6c>
 8006b62:	6965      	ldr	r5, [r4, #20]
 8006b64:	6909      	ldr	r1, [r1, #16]
 8006b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b6a:	eba3 0901 	sub.w	r9, r3, r1
 8006b6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b72:	1c7b      	adds	r3, r7, #1
 8006b74:	444b      	add	r3, r9
 8006b76:	106d      	asrs	r5, r5, #1
 8006b78:	429d      	cmp	r5, r3
 8006b7a:	bf38      	it	cc
 8006b7c:	461d      	movcc	r5, r3
 8006b7e:	0553      	lsls	r3, r2, #21
 8006b80:	d527      	bpl.n	8006bd2 <__ssputs_r+0x8e>
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7ff ff52 	bl	8006a2c <_malloc_r>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	b360      	cbz	r0, 8006be6 <__ssputs_r+0xa2>
 8006b8c:	6921      	ldr	r1, [r4, #16]
 8006b8e:	464a      	mov	r2, r9
 8006b90:	f7ff fed2 	bl	8006938 <memcpy>
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	6126      	str	r6, [r4, #16]
 8006ba2:	6165      	str	r5, [r4, #20]
 8006ba4:	444e      	add	r6, r9
 8006ba6:	eba5 0509 	sub.w	r5, r5, r9
 8006baa:	6026      	str	r6, [r4, #0]
 8006bac:	60a5      	str	r5, [r4, #8]
 8006bae:	463e      	mov	r6, r7
 8006bb0:	42be      	cmp	r6, r7
 8006bb2:	d900      	bls.n	8006bb6 <__ssputs_r+0x72>
 8006bb4:	463e      	mov	r6, r7
 8006bb6:	6820      	ldr	r0, [r4, #0]
 8006bb8:	4632      	mov	r2, r6
 8006bba:	4641      	mov	r1, r8
 8006bbc:	f7ff fe6e 	bl	800689c <memmove>
 8006bc0:	68a3      	ldr	r3, [r4, #8]
 8006bc2:	1b9b      	subs	r3, r3, r6
 8006bc4:	60a3      	str	r3, [r4, #8]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	4433      	add	r3, r6
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	f000 faac 	bl	8007130 <_realloc_r>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d1e0      	bne.n	8006ba0 <__ssputs_r+0x5c>
 8006bde:	6921      	ldr	r1, [r4, #16]
 8006be0:	4650      	mov	r0, sl
 8006be2:	f7ff feb7 	bl	8006954 <_free_r>
 8006be6:	230c      	movs	r3, #12
 8006be8:	f8ca 3000 	str.w	r3, [sl]
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bf8:	e7e9      	b.n	8006bce <__ssputs_r+0x8a>
	...

08006bfc <_svfiprintf_r>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	4698      	mov	r8, r3
 8006c02:	898b      	ldrh	r3, [r1, #12]
 8006c04:	061b      	lsls	r3, r3, #24
 8006c06:	b09d      	sub	sp, #116	@ 0x74
 8006c08:	4607      	mov	r7, r0
 8006c0a:	460d      	mov	r5, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	d510      	bpl.n	8006c32 <_svfiprintf_r+0x36>
 8006c10:	690b      	ldr	r3, [r1, #16]
 8006c12:	b973      	cbnz	r3, 8006c32 <_svfiprintf_r+0x36>
 8006c14:	2140      	movs	r1, #64	@ 0x40
 8006c16:	f7ff ff09 	bl	8006a2c <_malloc_r>
 8006c1a:	6028      	str	r0, [r5, #0]
 8006c1c:	6128      	str	r0, [r5, #16]
 8006c1e:	b930      	cbnz	r0, 8006c2e <_svfiprintf_r+0x32>
 8006c20:	230c      	movs	r3, #12
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c28:	b01d      	add	sp, #116	@ 0x74
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	2340      	movs	r3, #64	@ 0x40
 8006c30:	616b      	str	r3, [r5, #20]
 8006c32:	2300      	movs	r3, #0
 8006c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c36:	2320      	movs	r3, #32
 8006c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c40:	2330      	movs	r3, #48	@ 0x30
 8006c42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006de0 <_svfiprintf_r+0x1e4>
 8006c46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c4a:	f04f 0901 	mov.w	r9, #1
 8006c4e:	4623      	mov	r3, r4
 8006c50:	469a      	mov	sl, r3
 8006c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c56:	b10a      	cbz	r2, 8006c5c <_svfiprintf_r+0x60>
 8006c58:	2a25      	cmp	r2, #37	@ 0x25
 8006c5a:	d1f9      	bne.n	8006c50 <_svfiprintf_r+0x54>
 8006c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c60:	d00b      	beq.n	8006c7a <_svfiprintf_r+0x7e>
 8006c62:	465b      	mov	r3, fp
 8006c64:	4622      	mov	r2, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ff6b 	bl	8006b44 <__ssputs_r>
 8006c6e:	3001      	adds	r0, #1
 8006c70:	f000 80a7 	beq.w	8006dc2 <_svfiprintf_r+0x1c6>
 8006c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c76:	445a      	add	r2, fp
 8006c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 809f 	beq.w	8006dc2 <_svfiprintf_r+0x1c6>
 8006c84:	2300      	movs	r3, #0
 8006c86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c8e:	f10a 0a01 	add.w	sl, sl, #1
 8006c92:	9304      	str	r3, [sp, #16]
 8006c94:	9307      	str	r3, [sp, #28]
 8006c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c9c:	4654      	mov	r4, sl
 8006c9e:	2205      	movs	r2, #5
 8006ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca4:	484e      	ldr	r0, [pc, #312]	@ (8006de0 <_svfiprintf_r+0x1e4>)
 8006ca6:	f7f9 fa9b 	bl	80001e0 <memchr>
 8006caa:	9a04      	ldr	r2, [sp, #16]
 8006cac:	b9d8      	cbnz	r0, 8006ce6 <_svfiprintf_r+0xea>
 8006cae:	06d0      	lsls	r0, r2, #27
 8006cb0:	bf44      	itt	mi
 8006cb2:	2320      	movmi	r3, #32
 8006cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cb8:	0711      	lsls	r1, r2, #28
 8006cba:	bf44      	itt	mi
 8006cbc:	232b      	movmi	r3, #43	@ 0x2b
 8006cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc8:	d015      	beq.n	8006cf6 <_svfiprintf_r+0xfa>
 8006cca:	9a07      	ldr	r2, [sp, #28]
 8006ccc:	4654      	mov	r4, sl
 8006cce:	2000      	movs	r0, #0
 8006cd0:	f04f 0c0a 	mov.w	ip, #10
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cda:	3b30      	subs	r3, #48	@ 0x30
 8006cdc:	2b09      	cmp	r3, #9
 8006cde:	d94b      	bls.n	8006d78 <_svfiprintf_r+0x17c>
 8006ce0:	b1b0      	cbz	r0, 8006d10 <_svfiprintf_r+0x114>
 8006ce2:	9207      	str	r2, [sp, #28]
 8006ce4:	e014      	b.n	8006d10 <_svfiprintf_r+0x114>
 8006ce6:	eba0 0308 	sub.w	r3, r0, r8
 8006cea:	fa09 f303 	lsl.w	r3, r9, r3
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	46a2      	mov	sl, r4
 8006cf4:	e7d2      	b.n	8006c9c <_svfiprintf_r+0xa0>
 8006cf6:	9b03      	ldr	r3, [sp, #12]
 8006cf8:	1d19      	adds	r1, r3, #4
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	9103      	str	r1, [sp, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bfbb      	ittet	lt
 8006d02:	425b      	neglt	r3, r3
 8006d04:	f042 0202 	orrlt.w	r2, r2, #2
 8006d08:	9307      	strge	r3, [sp, #28]
 8006d0a:	9307      	strlt	r3, [sp, #28]
 8006d0c:	bfb8      	it	lt
 8006d0e:	9204      	strlt	r2, [sp, #16]
 8006d10:	7823      	ldrb	r3, [r4, #0]
 8006d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d14:	d10a      	bne.n	8006d2c <_svfiprintf_r+0x130>
 8006d16:	7863      	ldrb	r3, [r4, #1]
 8006d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d1a:	d132      	bne.n	8006d82 <_svfiprintf_r+0x186>
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	9203      	str	r2, [sp, #12]
 8006d24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d28:	3402      	adds	r4, #2
 8006d2a:	9305      	str	r3, [sp, #20]
 8006d2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006df0 <_svfiprintf_r+0x1f4>
 8006d30:	7821      	ldrb	r1, [r4, #0]
 8006d32:	2203      	movs	r2, #3
 8006d34:	4650      	mov	r0, sl
 8006d36:	f7f9 fa53 	bl	80001e0 <memchr>
 8006d3a:	b138      	cbz	r0, 8006d4c <_svfiprintf_r+0x150>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	eba0 000a 	sub.w	r0, r0, sl
 8006d42:	2240      	movs	r2, #64	@ 0x40
 8006d44:	4082      	lsls	r2, r0
 8006d46:	4313      	orrs	r3, r2
 8006d48:	3401      	adds	r4, #1
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d50:	4824      	ldr	r0, [pc, #144]	@ (8006de4 <_svfiprintf_r+0x1e8>)
 8006d52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d56:	2206      	movs	r2, #6
 8006d58:	f7f9 fa42 	bl	80001e0 <memchr>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d036      	beq.n	8006dce <_svfiprintf_r+0x1d2>
 8006d60:	4b21      	ldr	r3, [pc, #132]	@ (8006de8 <_svfiprintf_r+0x1ec>)
 8006d62:	bb1b      	cbnz	r3, 8006dac <_svfiprintf_r+0x1b0>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	3307      	adds	r3, #7
 8006d68:	f023 0307 	bic.w	r3, r3, #7
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d72:	4433      	add	r3, r6
 8006d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d76:	e76a      	b.n	8006c4e <_svfiprintf_r+0x52>
 8006d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	2001      	movs	r0, #1
 8006d80:	e7a8      	b.n	8006cd4 <_svfiprintf_r+0xd8>
 8006d82:	2300      	movs	r3, #0
 8006d84:	3401      	adds	r4, #1
 8006d86:	9305      	str	r3, [sp, #20]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f04f 0c0a 	mov.w	ip, #10
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d94:	3a30      	subs	r2, #48	@ 0x30
 8006d96:	2a09      	cmp	r2, #9
 8006d98:	d903      	bls.n	8006da2 <_svfiprintf_r+0x1a6>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0c6      	beq.n	8006d2c <_svfiprintf_r+0x130>
 8006d9e:	9105      	str	r1, [sp, #20]
 8006da0:	e7c4      	b.n	8006d2c <_svfiprintf_r+0x130>
 8006da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006da6:	4604      	mov	r4, r0
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7f0      	b.n	8006d8e <_svfiprintf_r+0x192>
 8006dac:	ab03      	add	r3, sp, #12
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	462a      	mov	r2, r5
 8006db2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dec <_svfiprintf_r+0x1f0>)
 8006db4:	a904      	add	r1, sp, #16
 8006db6:	4638      	mov	r0, r7
 8006db8:	f3af 8000 	nop.w
 8006dbc:	1c42      	adds	r2, r0, #1
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	d1d6      	bne.n	8006d70 <_svfiprintf_r+0x174>
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	065b      	lsls	r3, r3, #25
 8006dc6:	f53f af2d 	bmi.w	8006c24 <_svfiprintf_r+0x28>
 8006dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dcc:	e72c      	b.n	8006c28 <_svfiprintf_r+0x2c>
 8006dce:	ab03      	add	r3, sp, #12
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	462a      	mov	r2, r5
 8006dd4:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <_svfiprintf_r+0x1f0>)
 8006dd6:	a904      	add	r1, sp, #16
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f000 f879 	bl	8006ed0 <_printf_i>
 8006dde:	e7ed      	b.n	8006dbc <_svfiprintf_r+0x1c0>
 8006de0:	0800a8cc 	.word	0x0800a8cc
 8006de4:	0800a8d6 	.word	0x0800a8d6
 8006de8:	00000000 	.word	0x00000000
 8006dec:	08006b45 	.word	0x08006b45
 8006df0:	0800a8d2 	.word	0x0800a8d2

08006df4 <_printf_common>:
 8006df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	4616      	mov	r6, r2
 8006dfa:	4698      	mov	r8, r3
 8006dfc:	688a      	ldr	r2, [r1, #8]
 8006dfe:	690b      	ldr	r3, [r1, #16]
 8006e00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bfb8      	it	lt
 8006e08:	4613      	movlt	r3, r2
 8006e0a:	6033      	str	r3, [r6, #0]
 8006e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e10:	4607      	mov	r7, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	b10a      	cbz	r2, 8006e1a <_printf_common+0x26>
 8006e16:	3301      	adds	r3, #1
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	0699      	lsls	r1, r3, #26
 8006e1e:	bf42      	ittt	mi
 8006e20:	6833      	ldrmi	r3, [r6, #0]
 8006e22:	3302      	addmi	r3, #2
 8006e24:	6033      	strmi	r3, [r6, #0]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	f015 0506 	ands.w	r5, r5, #6
 8006e2c:	d106      	bne.n	8006e3c <_printf_common+0x48>
 8006e2e:	f104 0a19 	add.w	sl, r4, #25
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	6832      	ldr	r2, [r6, #0]
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	42ab      	cmp	r3, r5
 8006e3a:	dc26      	bgt.n	8006e8a <_printf_common+0x96>
 8006e3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e40:	6822      	ldr	r2, [r4, #0]
 8006e42:	3b00      	subs	r3, #0
 8006e44:	bf18      	it	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	0692      	lsls	r2, r2, #26
 8006e4a:	d42b      	bmi.n	8006ea4 <_printf_common+0xb0>
 8006e4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e50:	4641      	mov	r1, r8
 8006e52:	4638      	mov	r0, r7
 8006e54:	47c8      	blx	r9
 8006e56:	3001      	adds	r0, #1
 8006e58:	d01e      	beq.n	8006e98 <_printf_common+0xa4>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	6922      	ldr	r2, [r4, #16]
 8006e5e:	f003 0306 	and.w	r3, r3, #6
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	bf02      	ittt	eq
 8006e66:	68e5      	ldreq	r5, [r4, #12]
 8006e68:	6833      	ldreq	r3, [r6, #0]
 8006e6a:	1aed      	subeq	r5, r5, r3
 8006e6c:	68a3      	ldr	r3, [r4, #8]
 8006e6e:	bf0c      	ite	eq
 8006e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e74:	2500      	movne	r5, #0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfc4      	itt	gt
 8006e7a:	1a9b      	subgt	r3, r3, r2
 8006e7c:	18ed      	addgt	r5, r5, r3
 8006e7e:	2600      	movs	r6, #0
 8006e80:	341a      	adds	r4, #26
 8006e82:	42b5      	cmp	r5, r6
 8006e84:	d11a      	bne.n	8006ebc <_printf_common+0xc8>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e008      	b.n	8006e9c <_printf_common+0xa8>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4641      	mov	r1, r8
 8006e90:	4638      	mov	r0, r7
 8006e92:	47c8      	blx	r9
 8006e94:	3001      	adds	r0, #1
 8006e96:	d103      	bne.n	8006ea0 <_printf_common+0xac>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	3501      	adds	r5, #1
 8006ea2:	e7c6      	b.n	8006e32 <_printf_common+0x3e>
 8006ea4:	18e1      	adds	r1, r4, r3
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	2030      	movs	r0, #48	@ 0x30
 8006eaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006eae:	4422      	add	r2, r4
 8006eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006eb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006eb8:	3302      	adds	r3, #2
 8006eba:	e7c7      	b.n	8006e4c <_printf_common+0x58>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c8      	blx	r9
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d0e6      	beq.n	8006e98 <_printf_common+0xa4>
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7d9      	b.n	8006e82 <_printf_common+0x8e>
	...

08006ed0 <_printf_i>:
 8006ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed4:	7e0f      	ldrb	r7, [r1, #24]
 8006ed6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ed8:	2f78      	cmp	r7, #120	@ 0x78
 8006eda:	4691      	mov	r9, r2
 8006edc:	4680      	mov	r8, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	469a      	mov	sl, r3
 8006ee2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ee6:	d807      	bhi.n	8006ef8 <_printf_i+0x28>
 8006ee8:	2f62      	cmp	r7, #98	@ 0x62
 8006eea:	d80a      	bhi.n	8006f02 <_printf_i+0x32>
 8006eec:	2f00      	cmp	r7, #0
 8006eee:	f000 80d2 	beq.w	8007096 <_printf_i+0x1c6>
 8006ef2:	2f58      	cmp	r7, #88	@ 0x58
 8006ef4:	f000 80b9 	beq.w	800706a <_printf_i+0x19a>
 8006ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006efc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f00:	e03a      	b.n	8006f78 <_printf_i+0xa8>
 8006f02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f06:	2b15      	cmp	r3, #21
 8006f08:	d8f6      	bhi.n	8006ef8 <_printf_i+0x28>
 8006f0a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f10 <_printf_i+0x40>)
 8006f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f10:	08006f69 	.word	0x08006f69
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006ef9 	.word	0x08006ef9
 8006f1c:	08006ef9 	.word	0x08006ef9
 8006f20:	08006ef9 	.word	0x08006ef9
 8006f24:	08006ef9 	.word	0x08006ef9
 8006f28:	08006f7d 	.word	0x08006f7d
 8006f2c:	08006ef9 	.word	0x08006ef9
 8006f30:	08006ef9 	.word	0x08006ef9
 8006f34:	08006ef9 	.word	0x08006ef9
 8006f38:	08006ef9 	.word	0x08006ef9
 8006f3c:	0800707d 	.word	0x0800707d
 8006f40:	08006fa7 	.word	0x08006fa7
 8006f44:	08007037 	.word	0x08007037
 8006f48:	08006ef9 	.word	0x08006ef9
 8006f4c:	08006ef9 	.word	0x08006ef9
 8006f50:	0800709f 	.word	0x0800709f
 8006f54:	08006ef9 	.word	0x08006ef9
 8006f58:	08006fa7 	.word	0x08006fa7
 8006f5c:	08006ef9 	.word	0x08006ef9
 8006f60:	08006ef9 	.word	0x08006ef9
 8006f64:	0800703f 	.word	0x0800703f
 8006f68:	6833      	ldr	r3, [r6, #0]
 8006f6a:	1d1a      	adds	r2, r3, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6032      	str	r2, [r6, #0]
 8006f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e09d      	b.n	80070b8 <_printf_i+0x1e8>
 8006f7c:	6833      	ldr	r3, [r6, #0]
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	1d19      	adds	r1, r3, #4
 8006f82:	6031      	str	r1, [r6, #0]
 8006f84:	0606      	lsls	r6, r0, #24
 8006f86:	d501      	bpl.n	8006f8c <_printf_i+0xbc>
 8006f88:	681d      	ldr	r5, [r3, #0]
 8006f8a:	e003      	b.n	8006f94 <_printf_i+0xc4>
 8006f8c:	0645      	lsls	r5, r0, #25
 8006f8e:	d5fb      	bpl.n	8006f88 <_printf_i+0xb8>
 8006f90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f94:	2d00      	cmp	r5, #0
 8006f96:	da03      	bge.n	8006fa0 <_printf_i+0xd0>
 8006f98:	232d      	movs	r3, #45	@ 0x2d
 8006f9a:	426d      	negs	r5, r5
 8006f9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fa0:	4859      	ldr	r0, [pc, #356]	@ (8007108 <_printf_i+0x238>)
 8006fa2:	230a      	movs	r3, #10
 8006fa4:	e011      	b.n	8006fca <_printf_i+0xfa>
 8006fa6:	6821      	ldr	r1, [r4, #0]
 8006fa8:	6833      	ldr	r3, [r6, #0]
 8006faa:	0608      	lsls	r0, r1, #24
 8006fac:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fb0:	d402      	bmi.n	8006fb8 <_printf_i+0xe8>
 8006fb2:	0649      	lsls	r1, r1, #25
 8006fb4:	bf48      	it	mi
 8006fb6:	b2ad      	uxthmi	r5, r5
 8006fb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fba:	4853      	ldr	r0, [pc, #332]	@ (8007108 <_printf_i+0x238>)
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	bf14      	ite	ne
 8006fc0:	230a      	movne	r3, #10
 8006fc2:	2308      	moveq	r3, #8
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fca:	6866      	ldr	r6, [r4, #4]
 8006fcc:	60a6      	str	r6, [r4, #8]
 8006fce:	2e00      	cmp	r6, #0
 8006fd0:	bfa2      	ittt	ge
 8006fd2:	6821      	ldrge	r1, [r4, #0]
 8006fd4:	f021 0104 	bicge.w	r1, r1, #4
 8006fd8:	6021      	strge	r1, [r4, #0]
 8006fda:	b90d      	cbnz	r5, 8006fe0 <_printf_i+0x110>
 8006fdc:	2e00      	cmp	r6, #0
 8006fde:	d04b      	beq.n	8007078 <_printf_i+0x1a8>
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fe6:	fb03 5711 	mls	r7, r3, r1, r5
 8006fea:	5dc7      	ldrb	r7, [r0, r7]
 8006fec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ff0:	462f      	mov	r7, r5
 8006ff2:	42bb      	cmp	r3, r7
 8006ff4:	460d      	mov	r5, r1
 8006ff6:	d9f4      	bls.n	8006fe2 <_printf_i+0x112>
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d10b      	bne.n	8007014 <_printf_i+0x144>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07df      	lsls	r7, r3, #31
 8007000:	d508      	bpl.n	8007014 <_printf_i+0x144>
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	4299      	cmp	r1, r3
 8007008:	bfde      	ittt	le
 800700a:	2330      	movle	r3, #48	@ 0x30
 800700c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007010:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007014:	1b92      	subs	r2, r2, r6
 8007016:	6122      	str	r2, [r4, #16]
 8007018:	f8cd a000 	str.w	sl, [sp]
 800701c:	464b      	mov	r3, r9
 800701e:	aa03      	add	r2, sp, #12
 8007020:	4621      	mov	r1, r4
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff fee6 	bl	8006df4 <_printf_common>
 8007028:	3001      	adds	r0, #1
 800702a:	d14a      	bne.n	80070c2 <_printf_i+0x1f2>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007030:	b004      	add	sp, #16
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	f043 0320 	orr.w	r3, r3, #32
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	4833      	ldr	r0, [pc, #204]	@ (800710c <_printf_i+0x23c>)
 8007040:	2778      	movs	r7, #120	@ 0x78
 8007042:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	6831      	ldr	r1, [r6, #0]
 800704a:	061f      	lsls	r7, r3, #24
 800704c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007050:	d402      	bmi.n	8007058 <_printf_i+0x188>
 8007052:	065f      	lsls	r7, r3, #25
 8007054:	bf48      	it	mi
 8007056:	b2ad      	uxthmi	r5, r5
 8007058:	6031      	str	r1, [r6, #0]
 800705a:	07d9      	lsls	r1, r3, #31
 800705c:	bf44      	itt	mi
 800705e:	f043 0320 	orrmi.w	r3, r3, #32
 8007062:	6023      	strmi	r3, [r4, #0]
 8007064:	b11d      	cbz	r5, 800706e <_printf_i+0x19e>
 8007066:	2310      	movs	r3, #16
 8007068:	e7ac      	b.n	8006fc4 <_printf_i+0xf4>
 800706a:	4827      	ldr	r0, [pc, #156]	@ (8007108 <_printf_i+0x238>)
 800706c:	e7e9      	b.n	8007042 <_printf_i+0x172>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	f023 0320 	bic.w	r3, r3, #32
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	e7f6      	b.n	8007066 <_printf_i+0x196>
 8007078:	4616      	mov	r6, r2
 800707a:	e7bd      	b.n	8006ff8 <_printf_i+0x128>
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	6825      	ldr	r5, [r4, #0]
 8007080:	6961      	ldr	r1, [r4, #20]
 8007082:	1d18      	adds	r0, r3, #4
 8007084:	6030      	str	r0, [r6, #0]
 8007086:	062e      	lsls	r6, r5, #24
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	d501      	bpl.n	8007090 <_printf_i+0x1c0>
 800708c:	6019      	str	r1, [r3, #0]
 800708e:	e002      	b.n	8007096 <_printf_i+0x1c6>
 8007090:	0668      	lsls	r0, r5, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0x1bc>
 8007094:	8019      	strh	r1, [r3, #0]
 8007096:	2300      	movs	r3, #0
 8007098:	6123      	str	r3, [r4, #16]
 800709a:	4616      	mov	r6, r2
 800709c:	e7bc      	b.n	8007018 <_printf_i+0x148>
 800709e:	6833      	ldr	r3, [r6, #0]
 80070a0:	1d1a      	adds	r2, r3, #4
 80070a2:	6032      	str	r2, [r6, #0]
 80070a4:	681e      	ldr	r6, [r3, #0]
 80070a6:	6862      	ldr	r2, [r4, #4]
 80070a8:	2100      	movs	r1, #0
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7f9 f898 	bl	80001e0 <memchr>
 80070b0:	b108      	cbz	r0, 80070b6 <_printf_i+0x1e6>
 80070b2:	1b80      	subs	r0, r0, r6
 80070b4:	6060      	str	r0, [r4, #4]
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	2300      	movs	r3, #0
 80070bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070c0:	e7aa      	b.n	8007018 <_printf_i+0x148>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	4632      	mov	r2, r6
 80070c6:	4649      	mov	r1, r9
 80070c8:	4640      	mov	r0, r8
 80070ca:	47d0      	blx	sl
 80070cc:	3001      	adds	r0, #1
 80070ce:	d0ad      	beq.n	800702c <_printf_i+0x15c>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	079b      	lsls	r3, r3, #30
 80070d4:	d413      	bmi.n	80070fe <_printf_i+0x22e>
 80070d6:	68e0      	ldr	r0, [r4, #12]
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	4298      	cmp	r0, r3
 80070dc:	bfb8      	it	lt
 80070de:	4618      	movlt	r0, r3
 80070e0:	e7a6      	b.n	8007030 <_printf_i+0x160>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4632      	mov	r2, r6
 80070e6:	4649      	mov	r1, r9
 80070e8:	4640      	mov	r0, r8
 80070ea:	47d0      	blx	sl
 80070ec:	3001      	adds	r0, #1
 80070ee:	d09d      	beq.n	800702c <_printf_i+0x15c>
 80070f0:	3501      	adds	r5, #1
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	9903      	ldr	r1, [sp, #12]
 80070f6:	1a5b      	subs	r3, r3, r1
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dcf2      	bgt.n	80070e2 <_printf_i+0x212>
 80070fc:	e7eb      	b.n	80070d6 <_printf_i+0x206>
 80070fe:	2500      	movs	r5, #0
 8007100:	f104 0619 	add.w	r6, r4, #25
 8007104:	e7f5      	b.n	80070f2 <_printf_i+0x222>
 8007106:	bf00      	nop
 8007108:	0800a8dd 	.word	0x0800a8dd
 800710c:	0800a8ee 	.word	0x0800a8ee

08007110 <_sbrk_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d06      	ldr	r5, [pc, #24]	@ (800712c <_sbrk_r+0x1c>)
 8007114:	2300      	movs	r3, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	f7fb fe46 	bl	8002dac <_sbrk>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_sbrk_r+0x1a>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_sbrk_r+0x1a>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20000bd4 	.word	0x20000bd4

08007130 <_realloc_r>:
 8007130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007134:	4680      	mov	r8, r0
 8007136:	4615      	mov	r5, r2
 8007138:	460c      	mov	r4, r1
 800713a:	b921      	cbnz	r1, 8007146 <_realloc_r+0x16>
 800713c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007140:	4611      	mov	r1, r2
 8007142:	f7ff bc73 	b.w	8006a2c <_malloc_r>
 8007146:	b92a      	cbnz	r2, 8007154 <_realloc_r+0x24>
 8007148:	f7ff fc04 	bl	8006954 <_free_r>
 800714c:	2400      	movs	r4, #0
 800714e:	4620      	mov	r0, r4
 8007150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007154:	f000 f81a 	bl	800718c <_malloc_usable_size_r>
 8007158:	4285      	cmp	r5, r0
 800715a:	4606      	mov	r6, r0
 800715c:	d802      	bhi.n	8007164 <_realloc_r+0x34>
 800715e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007162:	d8f4      	bhi.n	800714e <_realloc_r+0x1e>
 8007164:	4629      	mov	r1, r5
 8007166:	4640      	mov	r0, r8
 8007168:	f7ff fc60 	bl	8006a2c <_malloc_r>
 800716c:	4607      	mov	r7, r0
 800716e:	2800      	cmp	r0, #0
 8007170:	d0ec      	beq.n	800714c <_realloc_r+0x1c>
 8007172:	42b5      	cmp	r5, r6
 8007174:	462a      	mov	r2, r5
 8007176:	4621      	mov	r1, r4
 8007178:	bf28      	it	cs
 800717a:	4632      	movcs	r2, r6
 800717c:	f7ff fbdc 	bl	8006938 <memcpy>
 8007180:	4621      	mov	r1, r4
 8007182:	4640      	mov	r0, r8
 8007184:	f7ff fbe6 	bl	8006954 <_free_r>
 8007188:	463c      	mov	r4, r7
 800718a:	e7e0      	b.n	800714e <_realloc_r+0x1e>

0800718c <_malloc_usable_size_r>:
 800718c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007190:	1f18      	subs	r0, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfbc      	itt	lt
 8007196:	580b      	ldrlt	r3, [r1, r0]
 8007198:	18c0      	addlt	r0, r0, r3
 800719a:	4770      	bx	lr

0800719c <_init>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr

080071a8 <_fini>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr
